
/Users/lucy/Desktop/project/MyWeatherStation/target/5.3.2/argon/MyWeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000467c  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000b869c  000b869c  0000869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000b86a4  000b86a4  000086a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000070  2003e5f0  000b86c8  0000e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000190  2003e660  2003e660  0001e660  2**2
                  ALLOC
  7 .backup       00000004  2003f400  000b8738  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000b873c  000b873c  0001873c  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000b8742  000b8742  00018742  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000b8766  000b8766  00018766  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   0011decd  00000000  00000000  0001876a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00012741  00000000  00000000  00136637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00038e47  00000000  00000000  00148d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002928  00000000  00000000  00181bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000a670  00000000  00000000  001844e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039a84  00000000  00000000  0018eb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003dcef  00000000  00000000  001c85db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ff2d  00000000  00000000  002062ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000078b0  00000000  00000000  003461f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2f>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4900:	bf24      	itt	cs
   b4902:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4906:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b490a:	d90d      	bls.n	b4928 <__aeabi_d2f+0x30>
   b490c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4910:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4914:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b4918:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b491c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4920:	bf08      	it	eq
   b4922:	f020 0001 	biceq.w	r0, r0, #1
   b4926:	4770      	bx	lr
   b4928:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b492c:	d121      	bne.n	b4972 <__aeabi_d2f+0x7a>
   b492e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4932:	bfbc      	itt	lt
   b4934:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b4938:	4770      	bxlt	lr
   b493a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b493e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4942:	f1c2 0218 	rsb	r2, r2, #24
   b4946:	f1c2 0c20 	rsb	ip, r2, #32
   b494a:	fa10 f30c 	lsls.w	r3, r0, ip
   b494e:	fa20 f002 	lsr.w	r0, r0, r2
   b4952:	bf18      	it	ne
   b4954:	f040 0001 	orrne.w	r0, r0, #1
   b4958:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b495c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4960:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4964:	ea40 000c 	orr.w	r0, r0, ip
   b4968:	fa23 f302 	lsr.w	r3, r3, r2
   b496c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4970:	e7cc      	b.n	b490c <__aeabi_d2f+0x14>
   b4972:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4976:	d107      	bne.n	b4988 <__aeabi_d2f+0x90>
   b4978:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b497c:	bf1e      	ittt	ne
   b497e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4982:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4986:	4770      	bxne	lr
   b4988:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b498c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4994:	4770      	bx	lr
   b4996:	bf00      	nop

000b4998 <__aeabi_frsub>:
   b4998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b499c:	e002      	b.n	b49a4 <__addsf3>
   b499e:	bf00      	nop

000b49a0 <__aeabi_fsub>:
   b49a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b49a4 <__addsf3>:
   b49a4:	0042      	lsls	r2, r0, #1
   b49a6:	bf1f      	itttt	ne
   b49a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b49ac:	ea92 0f03 	teqne	r2, r3
   b49b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b49b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b49b8:	d06a      	beq.n	b4a90 <__addsf3+0xec>
   b49ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b49be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b49c2:	bfc1      	itttt	gt
   b49c4:	18d2      	addgt	r2, r2, r3
   b49c6:	4041      	eorgt	r1, r0
   b49c8:	4048      	eorgt	r0, r1
   b49ca:	4041      	eorgt	r1, r0
   b49cc:	bfb8      	it	lt
   b49ce:	425b      	neglt	r3, r3
   b49d0:	2b19      	cmp	r3, #25
   b49d2:	bf88      	it	hi
   b49d4:	4770      	bxhi	lr
   b49d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b49da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b49e2:	bf18      	it	ne
   b49e4:	4240      	negne	r0, r0
   b49e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b49ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b49ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b49f2:	bf18      	it	ne
   b49f4:	4249      	negne	r1, r1
   b49f6:	ea92 0f03 	teq	r2, r3
   b49fa:	d03f      	beq.n	b4a7c <__addsf3+0xd8>
   b49fc:	f1a2 0201 	sub.w	r2, r2, #1
   b4a00:	fa41 fc03 	asr.w	ip, r1, r3
   b4a04:	eb10 000c 	adds.w	r0, r0, ip
   b4a08:	f1c3 0320 	rsb	r3, r3, #32
   b4a0c:	fa01 f103 	lsl.w	r1, r1, r3
   b4a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4a14:	d502      	bpl.n	b4a1c <__addsf3+0x78>
   b4a16:	4249      	negs	r1, r1
   b4a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b4a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4a20:	d313      	bcc.n	b4a4a <__addsf3+0xa6>
   b4a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b4a26:	d306      	bcc.n	b4a36 <__addsf3+0x92>
   b4a28:	0840      	lsrs	r0, r0, #1
   b4a2a:	ea4f 0131 	mov.w	r1, r1, rrx
   b4a2e:	f102 0201 	add.w	r2, r2, #1
   b4a32:	2afe      	cmp	r2, #254	; 0xfe
   b4a34:	d251      	bcs.n	b4ada <__addsf3+0x136>
   b4a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b4a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b4a3e:	bf08      	it	eq
   b4a40:	f020 0001 	biceq.w	r0, r0, #1
   b4a44:	ea40 0003 	orr.w	r0, r0, r3
   b4a48:	4770      	bx	lr
   b4a4a:	0049      	lsls	r1, r1, #1
   b4a4c:	eb40 0000 	adc.w	r0, r0, r0
   b4a50:	3a01      	subs	r2, #1
   b4a52:	bf28      	it	cs
   b4a54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b4a58:	d2ed      	bcs.n	b4a36 <__addsf3+0x92>
   b4a5a:	fab0 fc80 	clz	ip, r0
   b4a5e:	f1ac 0c08 	sub.w	ip, ip, #8
   b4a62:	ebb2 020c 	subs.w	r2, r2, ip
   b4a66:	fa00 f00c 	lsl.w	r0, r0, ip
   b4a6a:	bfaa      	itet	ge
   b4a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b4a70:	4252      	neglt	r2, r2
   b4a72:	4318      	orrge	r0, r3
   b4a74:	bfbc      	itt	lt
   b4a76:	40d0      	lsrlt	r0, r2
   b4a78:	4318      	orrlt	r0, r3
   b4a7a:	4770      	bx	lr
   b4a7c:	f092 0f00 	teq	r2, #0
   b4a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b4a84:	bf06      	itte	eq
   b4a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b4a8a:	3201      	addeq	r2, #1
   b4a8c:	3b01      	subne	r3, #1
   b4a8e:	e7b5      	b.n	b49fc <__addsf3+0x58>
   b4a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b4a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b4a98:	bf18      	it	ne
   b4a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4a9e:	d021      	beq.n	b4ae4 <__addsf3+0x140>
   b4aa0:	ea92 0f03 	teq	r2, r3
   b4aa4:	d004      	beq.n	b4ab0 <__addsf3+0x10c>
   b4aa6:	f092 0f00 	teq	r2, #0
   b4aaa:	bf08      	it	eq
   b4aac:	4608      	moveq	r0, r1
   b4aae:	4770      	bx	lr
   b4ab0:	ea90 0f01 	teq	r0, r1
   b4ab4:	bf1c      	itt	ne
   b4ab6:	2000      	movne	r0, #0
   b4ab8:	4770      	bxne	lr
   b4aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b4abe:	d104      	bne.n	b4aca <__addsf3+0x126>
   b4ac0:	0040      	lsls	r0, r0, #1
   b4ac2:	bf28      	it	cs
   b4ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b4ac8:	4770      	bx	lr
   b4aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b4ace:	bf3c      	itt	cc
   b4ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b4ad4:	4770      	bxcc	lr
   b4ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b4ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4ae2:	4770      	bx	lr
   b4ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b4ae8:	bf16      	itet	ne
   b4aea:	4608      	movne	r0, r1
   b4aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b4af0:	4601      	movne	r1, r0
   b4af2:	0242      	lsls	r2, r0, #9
   b4af4:	bf06      	itte	eq
   b4af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b4afa:	ea90 0f01 	teqeq	r0, r1
   b4afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b4b02:	4770      	bx	lr

000b4b04 <__aeabi_ui2f>:
   b4b04:	f04f 0300 	mov.w	r3, #0
   b4b08:	e004      	b.n	b4b14 <__aeabi_i2f+0x8>
   b4b0a:	bf00      	nop

000b4b0c <__aeabi_i2f>:
   b4b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b4b10:	bf48      	it	mi
   b4b12:	4240      	negmi	r0, r0
   b4b14:	ea5f 0c00 	movs.w	ip, r0
   b4b18:	bf08      	it	eq
   b4b1a:	4770      	bxeq	lr
   b4b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b4b20:	4601      	mov	r1, r0
   b4b22:	f04f 0000 	mov.w	r0, #0
   b4b26:	e01c      	b.n	b4b62 <__aeabi_l2f+0x2a>

000b4b28 <__aeabi_ul2f>:
   b4b28:	ea50 0201 	orrs.w	r2, r0, r1
   b4b2c:	bf08      	it	eq
   b4b2e:	4770      	bxeq	lr
   b4b30:	f04f 0300 	mov.w	r3, #0
   b4b34:	e00a      	b.n	b4b4c <__aeabi_l2f+0x14>
   b4b36:	bf00      	nop

000b4b38 <__aeabi_l2f>:
   b4b38:	ea50 0201 	orrs.w	r2, r0, r1
   b4b3c:	bf08      	it	eq
   b4b3e:	4770      	bxeq	lr
   b4b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b4b44:	d502      	bpl.n	b4b4c <__aeabi_l2f+0x14>
   b4b46:	4240      	negs	r0, r0
   b4b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4b4c:	ea5f 0c01 	movs.w	ip, r1
   b4b50:	bf02      	ittt	eq
   b4b52:	4684      	moveq	ip, r0
   b4b54:	4601      	moveq	r1, r0
   b4b56:	2000      	moveq	r0, #0
   b4b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b4b5c:	bf08      	it	eq
   b4b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b4b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b4b66:	fabc f28c 	clz	r2, ip
   b4b6a:	3a08      	subs	r2, #8
   b4b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b4b70:	db10      	blt.n	b4b94 <__aeabi_l2f+0x5c>
   b4b72:	fa01 fc02 	lsl.w	ip, r1, r2
   b4b76:	4463      	add	r3, ip
   b4b78:	fa00 fc02 	lsl.w	ip, r0, r2
   b4b7c:	f1c2 0220 	rsb	r2, r2, #32
   b4b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4b84:	fa20 f202 	lsr.w	r2, r0, r2
   b4b88:	eb43 0002 	adc.w	r0, r3, r2
   b4b8c:	bf08      	it	eq
   b4b8e:	f020 0001 	biceq.w	r0, r0, #1
   b4b92:	4770      	bx	lr
   b4b94:	f102 0220 	add.w	r2, r2, #32
   b4b98:	fa01 fc02 	lsl.w	ip, r1, r2
   b4b9c:	f1c2 0220 	rsb	r2, r2, #32
   b4ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b4ba4:	fa21 f202 	lsr.w	r2, r1, r2
   b4ba8:	eb43 0002 	adc.w	r0, r3, r2
   b4bac:	bf08      	it	eq
   b4bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b4bb2:	4770      	bx	lr

000b4bb4 <__aeabi_ldivmod>:
   b4bb4:	b97b      	cbnz	r3, b4bd6 <__aeabi_ldivmod+0x22>
   b4bb6:	b972      	cbnz	r2, b4bd6 <__aeabi_ldivmod+0x22>
   b4bb8:	2900      	cmp	r1, #0
   b4bba:	bfbe      	ittt	lt
   b4bbc:	2000      	movlt	r0, #0
   b4bbe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b4bc2:	e006      	blt.n	b4bd2 <__aeabi_ldivmod+0x1e>
   b4bc4:	bf08      	it	eq
   b4bc6:	2800      	cmpeq	r0, #0
   b4bc8:	bf1c      	itt	ne
   b4bca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b4bce:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4bd2:	f000 b9a7 	b.w	b4f24 <__aeabi_idiv0>
   b4bd6:	f1ad 0c08 	sub.w	ip, sp, #8
   b4bda:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4bde:	2900      	cmp	r1, #0
   b4be0:	db09      	blt.n	b4bf6 <__aeabi_ldivmod+0x42>
   b4be2:	2b00      	cmp	r3, #0
   b4be4:	db1a      	blt.n	b4c1c <__aeabi_ldivmod+0x68>
   b4be6:	f000 f835 	bl	b4c54 <__udivmoddi4>
   b4bea:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4bf2:	b004      	add	sp, #16
   b4bf4:	4770      	bx	lr
   b4bf6:	4240      	negs	r0, r0
   b4bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4bfc:	2b00      	cmp	r3, #0
   b4bfe:	db1b      	blt.n	b4c38 <__aeabi_ldivmod+0x84>
   b4c00:	f000 f828 	bl	b4c54 <__udivmoddi4>
   b4c04:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c0c:	b004      	add	sp, #16
   b4c0e:	4240      	negs	r0, r0
   b4c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c14:	4252      	negs	r2, r2
   b4c16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c1a:	4770      	bx	lr
   b4c1c:	4252      	negs	r2, r2
   b4c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c22:	f000 f817 	bl	b4c54 <__udivmoddi4>
   b4c26:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c2e:	b004      	add	sp, #16
   b4c30:	4240      	negs	r0, r0
   b4c32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c36:	4770      	bx	lr
   b4c38:	4252      	negs	r2, r2
   b4c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c3e:	f000 f809 	bl	b4c54 <__udivmoddi4>
   b4c42:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c4a:	b004      	add	sp, #16
   b4c4c:	4252      	negs	r2, r2
   b4c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4c52:	4770      	bx	lr

000b4c54 <__udivmoddi4>:
   b4c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4c58:	9d08      	ldr	r5, [sp, #32]
   b4c5a:	4604      	mov	r4, r0
   b4c5c:	468e      	mov	lr, r1
   b4c5e:	2b00      	cmp	r3, #0
   b4c60:	d14d      	bne.n	b4cfe <__udivmoddi4+0xaa>
   b4c62:	428a      	cmp	r2, r1
   b4c64:	4694      	mov	ip, r2
   b4c66:	d969      	bls.n	b4d3c <__udivmoddi4+0xe8>
   b4c68:	fab2 f282 	clz	r2, r2
   b4c6c:	b152      	cbz	r2, b4c84 <__udivmoddi4+0x30>
   b4c6e:	fa01 f302 	lsl.w	r3, r1, r2
   b4c72:	f1c2 0120 	rsb	r1, r2, #32
   b4c76:	fa20 f101 	lsr.w	r1, r0, r1
   b4c7a:	fa0c fc02 	lsl.w	ip, ip, r2
   b4c7e:	ea41 0e03 	orr.w	lr, r1, r3
   b4c82:	4094      	lsls	r4, r2
   b4c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4c88:	0c21      	lsrs	r1, r4, #16
   b4c8a:	fbbe f6f8 	udiv	r6, lr, r8
   b4c8e:	fa1f f78c 	uxth.w	r7, ip
   b4c92:	fb08 e316 	mls	r3, r8, r6, lr
   b4c96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4c9a:	fb06 f107 	mul.w	r1, r6, r7
   b4c9e:	4299      	cmp	r1, r3
   b4ca0:	d90a      	bls.n	b4cb8 <__udivmoddi4+0x64>
   b4ca2:	eb1c 0303 	adds.w	r3, ip, r3
   b4ca6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4caa:	f080 811f 	bcs.w	b4eec <__udivmoddi4+0x298>
   b4cae:	4299      	cmp	r1, r3
   b4cb0:	f240 811c 	bls.w	b4eec <__udivmoddi4+0x298>
   b4cb4:	3e02      	subs	r6, #2
   b4cb6:	4463      	add	r3, ip
   b4cb8:	1a5b      	subs	r3, r3, r1
   b4cba:	b2a4      	uxth	r4, r4
   b4cbc:	fbb3 f0f8 	udiv	r0, r3, r8
   b4cc0:	fb08 3310 	mls	r3, r8, r0, r3
   b4cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4cc8:	fb00 f707 	mul.w	r7, r0, r7
   b4ccc:	42a7      	cmp	r7, r4
   b4cce:	d90a      	bls.n	b4ce6 <__udivmoddi4+0x92>
   b4cd0:	eb1c 0404 	adds.w	r4, ip, r4
   b4cd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4cd8:	f080 810a 	bcs.w	b4ef0 <__udivmoddi4+0x29c>
   b4cdc:	42a7      	cmp	r7, r4
   b4cde:	f240 8107 	bls.w	b4ef0 <__udivmoddi4+0x29c>
   b4ce2:	4464      	add	r4, ip
   b4ce4:	3802      	subs	r0, #2
   b4ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4cea:	1be4      	subs	r4, r4, r7
   b4cec:	2600      	movs	r6, #0
   b4cee:	b11d      	cbz	r5, b4cf8 <__udivmoddi4+0xa4>
   b4cf0:	40d4      	lsrs	r4, r2
   b4cf2:	2300      	movs	r3, #0
   b4cf4:	e9c5 4300 	strd	r4, r3, [r5]
   b4cf8:	4631      	mov	r1, r6
   b4cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4cfe:	428b      	cmp	r3, r1
   b4d00:	d909      	bls.n	b4d16 <__udivmoddi4+0xc2>
   b4d02:	2d00      	cmp	r5, #0
   b4d04:	f000 80ef 	beq.w	b4ee6 <__udivmoddi4+0x292>
   b4d08:	2600      	movs	r6, #0
   b4d0a:	e9c5 0100 	strd	r0, r1, [r5]
   b4d0e:	4630      	mov	r0, r6
   b4d10:	4631      	mov	r1, r6
   b4d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d16:	fab3 f683 	clz	r6, r3
   b4d1a:	2e00      	cmp	r6, #0
   b4d1c:	d14a      	bne.n	b4db4 <__udivmoddi4+0x160>
   b4d1e:	428b      	cmp	r3, r1
   b4d20:	d302      	bcc.n	b4d28 <__udivmoddi4+0xd4>
   b4d22:	4282      	cmp	r2, r0
   b4d24:	f200 80f9 	bhi.w	b4f1a <__udivmoddi4+0x2c6>
   b4d28:	1a84      	subs	r4, r0, r2
   b4d2a:	eb61 0303 	sbc.w	r3, r1, r3
   b4d2e:	2001      	movs	r0, #1
   b4d30:	469e      	mov	lr, r3
   b4d32:	2d00      	cmp	r5, #0
   b4d34:	d0e0      	beq.n	b4cf8 <__udivmoddi4+0xa4>
   b4d36:	e9c5 4e00 	strd	r4, lr, [r5]
   b4d3a:	e7dd      	b.n	b4cf8 <__udivmoddi4+0xa4>
   b4d3c:	b902      	cbnz	r2, b4d40 <__udivmoddi4+0xec>
   b4d3e:	deff      	udf	#255	; 0xff
   b4d40:	fab2 f282 	clz	r2, r2
   b4d44:	2a00      	cmp	r2, #0
   b4d46:	f040 8092 	bne.w	b4e6e <__udivmoddi4+0x21a>
   b4d4a:	eba1 010c 	sub.w	r1, r1, ip
   b4d4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4d52:	fa1f fe8c 	uxth.w	lr, ip
   b4d56:	2601      	movs	r6, #1
   b4d58:	0c20      	lsrs	r0, r4, #16
   b4d5a:	fbb1 f3f7 	udiv	r3, r1, r7
   b4d5e:	fb07 1113 	mls	r1, r7, r3, r1
   b4d62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4d66:	fb0e f003 	mul.w	r0, lr, r3
   b4d6a:	4288      	cmp	r0, r1
   b4d6c:	d908      	bls.n	b4d80 <__udivmoddi4+0x12c>
   b4d6e:	eb1c 0101 	adds.w	r1, ip, r1
   b4d72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4d76:	d202      	bcs.n	b4d7e <__udivmoddi4+0x12a>
   b4d78:	4288      	cmp	r0, r1
   b4d7a:	f200 80cb 	bhi.w	b4f14 <__udivmoddi4+0x2c0>
   b4d7e:	4643      	mov	r3, r8
   b4d80:	1a09      	subs	r1, r1, r0
   b4d82:	b2a4      	uxth	r4, r4
   b4d84:	fbb1 f0f7 	udiv	r0, r1, r7
   b4d88:	fb07 1110 	mls	r1, r7, r0, r1
   b4d8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4d90:	fb0e fe00 	mul.w	lr, lr, r0
   b4d94:	45a6      	cmp	lr, r4
   b4d96:	d908      	bls.n	b4daa <__udivmoddi4+0x156>
   b4d98:	eb1c 0404 	adds.w	r4, ip, r4
   b4d9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4da0:	d202      	bcs.n	b4da8 <__udivmoddi4+0x154>
   b4da2:	45a6      	cmp	lr, r4
   b4da4:	f200 80bb 	bhi.w	b4f1e <__udivmoddi4+0x2ca>
   b4da8:	4608      	mov	r0, r1
   b4daa:	eba4 040e 	sub.w	r4, r4, lr
   b4dae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4db2:	e79c      	b.n	b4cee <__udivmoddi4+0x9a>
   b4db4:	f1c6 0720 	rsb	r7, r6, #32
   b4db8:	40b3      	lsls	r3, r6
   b4dba:	fa22 fc07 	lsr.w	ip, r2, r7
   b4dbe:	ea4c 0c03 	orr.w	ip, ip, r3
   b4dc2:	fa20 f407 	lsr.w	r4, r0, r7
   b4dc6:	fa01 f306 	lsl.w	r3, r1, r6
   b4dca:	431c      	orrs	r4, r3
   b4dcc:	40f9      	lsrs	r1, r7
   b4dce:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4dd2:	fa00 f306 	lsl.w	r3, r0, r6
   b4dd6:	fbb1 f8f9 	udiv	r8, r1, r9
   b4dda:	0c20      	lsrs	r0, r4, #16
   b4ddc:	fa1f fe8c 	uxth.w	lr, ip
   b4de0:	fb09 1118 	mls	r1, r9, r8, r1
   b4de4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4de8:	fb08 f00e 	mul.w	r0, r8, lr
   b4dec:	4288      	cmp	r0, r1
   b4dee:	fa02 f206 	lsl.w	r2, r2, r6
   b4df2:	d90b      	bls.n	b4e0c <__udivmoddi4+0x1b8>
   b4df4:	eb1c 0101 	adds.w	r1, ip, r1
   b4df8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4dfc:	f080 8088 	bcs.w	b4f10 <__udivmoddi4+0x2bc>
   b4e00:	4288      	cmp	r0, r1
   b4e02:	f240 8085 	bls.w	b4f10 <__udivmoddi4+0x2bc>
   b4e06:	f1a8 0802 	sub.w	r8, r8, #2
   b4e0a:	4461      	add	r1, ip
   b4e0c:	1a09      	subs	r1, r1, r0
   b4e0e:	b2a4      	uxth	r4, r4
   b4e10:	fbb1 f0f9 	udiv	r0, r1, r9
   b4e14:	fb09 1110 	mls	r1, r9, r0, r1
   b4e18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4e1c:	fb00 fe0e 	mul.w	lr, r0, lr
   b4e20:	458e      	cmp	lr, r1
   b4e22:	d908      	bls.n	b4e36 <__udivmoddi4+0x1e2>
   b4e24:	eb1c 0101 	adds.w	r1, ip, r1
   b4e28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4e2c:	d26c      	bcs.n	b4f08 <__udivmoddi4+0x2b4>
   b4e2e:	458e      	cmp	lr, r1
   b4e30:	d96a      	bls.n	b4f08 <__udivmoddi4+0x2b4>
   b4e32:	3802      	subs	r0, #2
   b4e34:	4461      	add	r1, ip
   b4e36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4e3a:	fba0 9402 	umull	r9, r4, r0, r2
   b4e3e:	eba1 010e 	sub.w	r1, r1, lr
   b4e42:	42a1      	cmp	r1, r4
   b4e44:	46c8      	mov	r8, r9
   b4e46:	46a6      	mov	lr, r4
   b4e48:	d356      	bcc.n	b4ef8 <__udivmoddi4+0x2a4>
   b4e4a:	d053      	beq.n	b4ef4 <__udivmoddi4+0x2a0>
   b4e4c:	b15d      	cbz	r5, b4e66 <__udivmoddi4+0x212>
   b4e4e:	ebb3 0208 	subs.w	r2, r3, r8
   b4e52:	eb61 010e 	sbc.w	r1, r1, lr
   b4e56:	fa01 f707 	lsl.w	r7, r1, r7
   b4e5a:	fa22 f306 	lsr.w	r3, r2, r6
   b4e5e:	40f1      	lsrs	r1, r6
   b4e60:	431f      	orrs	r7, r3
   b4e62:	e9c5 7100 	strd	r7, r1, [r5]
   b4e66:	2600      	movs	r6, #0
   b4e68:	4631      	mov	r1, r6
   b4e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e6e:	f1c2 0320 	rsb	r3, r2, #32
   b4e72:	40d8      	lsrs	r0, r3
   b4e74:	fa0c fc02 	lsl.w	ip, ip, r2
   b4e78:	fa21 f303 	lsr.w	r3, r1, r3
   b4e7c:	4091      	lsls	r1, r2
   b4e7e:	4301      	orrs	r1, r0
   b4e80:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4e84:	fa1f fe8c 	uxth.w	lr, ip
   b4e88:	fbb3 f0f7 	udiv	r0, r3, r7
   b4e8c:	fb07 3610 	mls	r6, r7, r0, r3
   b4e90:	0c0b      	lsrs	r3, r1, #16
   b4e92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4e96:	fb00 f60e 	mul.w	r6, r0, lr
   b4e9a:	429e      	cmp	r6, r3
   b4e9c:	fa04 f402 	lsl.w	r4, r4, r2
   b4ea0:	d908      	bls.n	b4eb4 <__udivmoddi4+0x260>
   b4ea2:	eb1c 0303 	adds.w	r3, ip, r3
   b4ea6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4eaa:	d22f      	bcs.n	b4f0c <__udivmoddi4+0x2b8>
   b4eac:	429e      	cmp	r6, r3
   b4eae:	d92d      	bls.n	b4f0c <__udivmoddi4+0x2b8>
   b4eb0:	3802      	subs	r0, #2
   b4eb2:	4463      	add	r3, ip
   b4eb4:	1b9b      	subs	r3, r3, r6
   b4eb6:	b289      	uxth	r1, r1
   b4eb8:	fbb3 f6f7 	udiv	r6, r3, r7
   b4ebc:	fb07 3316 	mls	r3, r7, r6, r3
   b4ec0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4ec4:	fb06 f30e 	mul.w	r3, r6, lr
   b4ec8:	428b      	cmp	r3, r1
   b4eca:	d908      	bls.n	b4ede <__udivmoddi4+0x28a>
   b4ecc:	eb1c 0101 	adds.w	r1, ip, r1
   b4ed0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4ed4:	d216      	bcs.n	b4f04 <__udivmoddi4+0x2b0>
   b4ed6:	428b      	cmp	r3, r1
   b4ed8:	d914      	bls.n	b4f04 <__udivmoddi4+0x2b0>
   b4eda:	3e02      	subs	r6, #2
   b4edc:	4461      	add	r1, ip
   b4ede:	1ac9      	subs	r1, r1, r3
   b4ee0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4ee4:	e738      	b.n	b4d58 <__udivmoddi4+0x104>
   b4ee6:	462e      	mov	r6, r5
   b4ee8:	4628      	mov	r0, r5
   b4eea:	e705      	b.n	b4cf8 <__udivmoddi4+0xa4>
   b4eec:	4606      	mov	r6, r0
   b4eee:	e6e3      	b.n	b4cb8 <__udivmoddi4+0x64>
   b4ef0:	4618      	mov	r0, r3
   b4ef2:	e6f8      	b.n	b4ce6 <__udivmoddi4+0x92>
   b4ef4:	454b      	cmp	r3, r9
   b4ef6:	d2a9      	bcs.n	b4e4c <__udivmoddi4+0x1f8>
   b4ef8:	ebb9 0802 	subs.w	r8, r9, r2
   b4efc:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4f00:	3801      	subs	r0, #1
   b4f02:	e7a3      	b.n	b4e4c <__udivmoddi4+0x1f8>
   b4f04:	4646      	mov	r6, r8
   b4f06:	e7ea      	b.n	b4ede <__udivmoddi4+0x28a>
   b4f08:	4620      	mov	r0, r4
   b4f0a:	e794      	b.n	b4e36 <__udivmoddi4+0x1e2>
   b4f0c:	4640      	mov	r0, r8
   b4f0e:	e7d1      	b.n	b4eb4 <__udivmoddi4+0x260>
   b4f10:	46d0      	mov	r8, sl
   b4f12:	e77b      	b.n	b4e0c <__udivmoddi4+0x1b8>
   b4f14:	3b02      	subs	r3, #2
   b4f16:	4461      	add	r1, ip
   b4f18:	e732      	b.n	b4d80 <__udivmoddi4+0x12c>
   b4f1a:	4630      	mov	r0, r6
   b4f1c:	e709      	b.n	b4d32 <__udivmoddi4+0xde>
   b4f1e:	4464      	add	r4, ip
   b4f20:	3802      	subs	r0, #2
   b4f22:	e742      	b.n	b4daa <__udivmoddi4+0x156>

000b4f24 <__aeabi_idiv0>:
   b4f24:	4770      	bx	lr
   b4f26:	bf00      	nop

000b4f28 <strlen>:
   b4f28:	4603      	mov	r3, r0
   b4f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4f2e:	2a00      	cmp	r2, #0
   b4f30:	d1fb      	bne.n	b4f2a <strlen+0x2>
   b4f32:	1a18      	subs	r0, r3, r0
   b4f34:	3801      	subs	r0, #1
   b4f36:	4770      	bx	lr

000b4f38 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4f38:	4809      	ldr	r0, [pc, #36]	; (b4f60 <module_user_pre_init+0x28>)
   b4f3a:	490a      	ldr	r1, [pc, #40]	; (b4f64 <module_user_pre_init+0x2c>)
   b4f3c:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4f3e:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4f40:	d005      	beq.n	b4f4e <module_user_pre_init+0x16>
   b4f42:	4a09      	ldr	r2, [pc, #36]	; (b4f68 <module_user_pre_init+0x30>)
   b4f44:	4282      	cmp	r2, r0
   b4f46:	d002      	beq.n	b4f4e <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4f48:	1a12      	subs	r2, r2, r0
   b4f4a:	f003 f965 	bl	b8218 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4f4e:	4807      	ldr	r0, [pc, #28]	; (b4f6c <module_user_pre_init+0x34>)
   b4f50:	4a07      	ldr	r2, [pc, #28]	; (b4f70 <module_user_pre_init+0x38>)
   b4f52:	2100      	movs	r1, #0
   b4f54:	1a12      	subs	r2, r2, r0
   b4f56:	f003 f96d 	bl	b8234 <memset>
    return &link_global_data_start;
}
   b4f5a:	4801      	ldr	r0, [pc, #4]	; (b4f60 <module_user_pre_init+0x28>)
   b4f5c:	bd08      	pop	{r3, pc}
   b4f5e:	bf00      	nop
   b4f60:	2003e5f0 	.word	0x2003e5f0
   b4f64:	000b86c8 	.word	0x000b86c8
   b4f68:	2003e660 	.word	0x2003e660
   b4f6c:	2003e660 	.word	0x2003e660
   b4f70:	2003e7f0 	.word	0x2003e7f0

000b4f74 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4f74:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4f76:	4e07      	ldr	r6, [pc, #28]	; (b4f94 <module_user_init+0x20>)
   b4f78:	4c07      	ldr	r4, [pc, #28]	; (b4f98 <module_user_init+0x24>)
    module_user_init_hook();
   b4f7a:	f001 ff8f 	bl	b6e9c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4f7e:	1ba4      	subs	r4, r4, r6
   b4f80:	08a4      	lsrs	r4, r4, #2
   b4f82:	2500      	movs	r5, #0
   b4f84:	42ac      	cmp	r4, r5
   b4f86:	d100      	bne.n	b4f8a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4f88:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4f8a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4f8e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4f90:	3501      	adds	r5, #1
   b4f92:	e7f7      	b.n	b4f84 <module_user_init+0x10>
   b4f94:	000b8678 	.word	0x000b8678
   b4f98:	000b869c 	.word	0x000b869c

000b4f9c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4f9c:	f000 b82c 	b.w	b4ff8 <setup>

000b4fa0 <module_user_loop>:
}

void module_user_loop() {
   b4fa0:	b508      	push	{r3, lr}
    loop();
   b4fa2:	f000 f86b 	bl	b507c <loop>
    _post_loop();
}
   b4fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4faa:	f001 bf2f 	b.w	b6e0c <_post_loop>

000b4fae <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4fae:	f000 bf93 	b.w	b5ed8 <malloc>

000b4fb2 <_Znaj>:
   b4fb2:	f000 bf91 	b.w	b5ed8 <malloc>

000b4fb6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4fb6:	f000 bf97 	b.w	b5ee8 <free>

000b4fba <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4fba:	7800      	ldrb	r0, [r0, #0]
   b4fbc:	fab0 f080 	clz	r0, r0
   b4fc0:	0940      	lsrs	r0, r0, #5
   b4fc2:	4770      	bx	lr

000b4fc4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4fc4:	2301      	movs	r3, #1
   b4fc6:	7003      	strb	r3, [r0, #0]
   b4fc8:	4770      	bx	lr

000b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4fca:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4fcc:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4fce:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4fd0:	b17c      	cbz	r4, b4ff2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4fd2:	6863      	ldr	r3, [r4, #4]
   b4fd4:	3b01      	subs	r3, #1
   b4fd6:	6063      	str	r3, [r4, #4]
   b4fd8:	b95b      	cbnz	r3, b4ff2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4fda:	6823      	ldr	r3, [r4, #0]
   b4fdc:	4620      	mov	r0, r4
   b4fde:	689b      	ldr	r3, [r3, #8]
   b4fe0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4fe2:	68a3      	ldr	r3, [r4, #8]
   b4fe4:	3b01      	subs	r3, #1
   b4fe6:	60a3      	str	r3, [r4, #8]
   b4fe8:	b91b      	cbnz	r3, b4ff2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4fea:	6823      	ldr	r3, [r4, #0]
   b4fec:	4620      	mov	r0, r4
   b4fee:	68db      	ldr	r3, [r3, #12]
   b4ff0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4ff2:	4628      	mov	r0, r5
   b4ff4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ff8 <setup>:
int temp = 0;
int humidity = 0;
int pressure = 0;
int altitude = 0;

void setup() {
   b4ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bme.begin();
   b4ffa:	4815      	ldr	r0, [pc, #84]	; (b5050 <setup+0x58>)
   b4ffc:	f000 fd4d 	bl	b5a9a <_ZN15Adafruit_BME2805beginEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b5000:	4914      	ldr	r1, [pc, #80]	; (b5054 <setup+0x5c>)
   b5002:	4815      	ldr	r0, [pc, #84]	; (b5058 <setup+0x60>)
   b5004:	2300      	movs	r3, #0
   b5006:	2202      	movs	r2, #2
   b5008:	f000 fee6 	bl	b5dd8 <spark_variable>
   b500c:	4913      	ldr	r1, [pc, #76]	; (b505c <setup+0x64>)
   b500e:	4814      	ldr	r0, [pc, #80]	; (b5060 <setup+0x68>)
   b5010:	2300      	movs	r3, #0
   b5012:	2202      	movs	r2, #2
   b5014:	f000 fee0 	bl	b5dd8 <spark_variable>
   b5018:	4912      	ldr	r1, [pc, #72]	; (b5064 <setup+0x6c>)
   b501a:	4813      	ldr	r0, [pc, #76]	; (b5068 <setup+0x70>)
   b501c:	2300      	movs	r3, #0
   b501e:	2202      	movs	r2, #2
   b5020:	f000 feda 	bl	b5dd8 <spark_variable>
   b5024:	4911      	ldr	r1, [pc, #68]	; (b506c <setup+0x74>)
   b5026:	4812      	ldr	r0, [pc, #72]	; (b5070 <setup+0x78>)
   b5028:	2300      	movs	r3, #0
   b502a:	2202      	movs	r2, #2
   b502c:	f000 fed4 	bl	b5dd8 <spark_variable>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5030:	4b10      	ldr	r3, [pc, #64]	; (b5074 <setup+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5032:	4911      	ldr	r1, [pc, #68]	; (b5078 <setup+0x80>)
   b5034:	781b      	ldrb	r3, [r3, #0]
   b5036:	f88d 3000 	strb.w	r3, [sp]
   b503a:	2200      	movs	r2, #0
   b503c:	233c      	movs	r3, #60	; 0x3c
   b503e:	a802      	add	r0, sp, #8
   b5040:	f001 f8f0 	bl	b6224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5044:	a803      	add	r0, sp, #12
   b5046:	f7ff ffc0 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.variable("humidity", humidity);
  Particle.variable("pressure", pressure);
  Particle.variable("altitude", altitude);

  Particle.publish("Weather Station Online :)");
}
   b504a:	b005      	add	sp, #20
   b504c:	f85d fb04 	ldr.w	pc, [sp], #4
   b5050:	2003e668 	.word	0x2003e668
   b5054:	2003e6b4 	.word	0x2003e6b4
   b5058:	000b83bc 	.word	0x000b83bc
   b505c:	2003e6ac 	.word	0x2003e6ac
   b5060:	000b83c1 	.word	0x000b83c1
   b5064:	2003e6b0 	.word	0x2003e6b0
   b5068:	000b83ca 	.word	0x000b83ca
   b506c:	2003e664 	.word	0x2003e664
   b5070:	000b83d3 	.word	0x000b83d3
   b5074:	2003e660 	.word	0x2003e660
   b5078:	000b83dc 	.word	0x000b83dc

000b507c <loop>:


void loop() {
   b507c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  temp = (int)bme.readTemperature();
   b507e:	4819      	ldr	r0, [pc, #100]	; (b50e4 <loop+0x68>)
   b5080:	f000 fb2e 	bl	b56e0 <_ZN15Adafruit_BME28015readTemperatureEv>
   b5084:	4b18      	ldr	r3, [pc, #96]	; (b50e8 <loop+0x6c>)
  humidity = (int)bme.readHumidity();
   b5086:	4817      	ldr	r0, [pc, #92]	; (b50e4 <loop+0x68>)
  temp = (int)bme.readTemperature();
   b5088:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b508c:	ed83 0a00 	vstr	s0, [r3]
  humidity = (int)bme.readHumidity();
   b5090:	f000 fb56 	bl	b5740 <_ZN15Adafruit_BME28012readHumidityEv>
   b5094:	4b15      	ldr	r3, [pc, #84]	; (b50ec <loop+0x70>)
  pressure = (int)bme.readPressure();
   b5096:	4813      	ldr	r0, [pc, #76]	; (b50e4 <loop+0x68>)
  humidity = (int)bme.readHumidity();
   b5098:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b509c:	ed83 0a00 	vstr	s0, [r3]
  pressure = (int)bme.readPressure();
   b50a0:	f000 fb98 	bl	b57d4 <_ZN15Adafruit_BME28012readPressureEv>
   b50a4:	4b12      	ldr	r3, [pc, #72]	; (b50f0 <loop+0x74>)
  altitude = (int)bme.readAltitude(1013.25); //sea level pressure, estimates altitude
   b50a6:	480f      	ldr	r0, [pc, #60]	; (b50e4 <loop+0x68>)
  pressure = (int)bme.readPressure();
   b50a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b50ac:	ed83 0a00 	vstr	s0, [r3]
  altitude = (int)bme.readAltitude(1013.25); //sea level pressure, estimates altitude
   b50b0:	ed9f 0a10 	vldr	s0, [pc, #64]	; b50f4 <loop+0x78>
   b50b4:	f000 fc60 	bl	b5978 <_ZN15Adafruit_BME28012readAltitudeEf>
   b50b8:	4b0f      	ldr	r3, [pc, #60]	; (b50f8 <loop+0x7c>)
   b50ba:	4910      	ldr	r1, [pc, #64]	; (b50fc <loop+0x80>)
   b50bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b50c0:	2200      	movs	r2, #0
   b50c2:	ed83 0a00 	vstr	s0, [r3]
   b50c6:	4b0e      	ldr	r3, [pc, #56]	; (b5100 <loop+0x84>)
   b50c8:	781b      	ldrb	r3, [r3, #0]
   b50ca:	f88d 3000 	strb.w	r3, [sp]
   b50ce:	a802      	add	r0, sp, #8
   b50d0:	233c      	movs	r3, #60	; 0x3c
   b50d2:	f001 f8a7 	bl	b6224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b50d6:	a803      	add	r0, sp, #12
   b50d8:	f7ff ff77 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  Particle.publish("testing");

   b50dc:	b005      	add	sp, #20
   b50de:	f85d fb04 	ldr.w	pc, [sp], #4
   b50e2:	bf00      	nop
   b50e4:	2003e668 	.word	0x2003e668
   b50e8:	2003e6b4 	.word	0x2003e6b4
   b50ec:	2003e6ac 	.word	0x2003e6ac
   b50f0:	2003e6b0 	.word	0x2003e6b0
   b50f4:	447d5000 	.word	0x447d5000
   b50f8:	2003e664 	.word	0x2003e664
   b50fc:	000b83f6 	.word	0x000b83f6
   b5100:	2003e660 	.word	0x2003e660

000b5104 <_GLOBAL__sub_I_bme>:
        val_(val) {
   b5104:	4b02      	ldr	r3, [pc, #8]	; (b5110 <_GLOBAL__sub_I_bme+0xc>)
Adafruit_BME280 bme;
   b5106:	4803      	ldr	r0, [pc, #12]	; (b5114 <_GLOBAL__sub_I_bme+0x10>)
   b5108:	2200      	movs	r2, #0
   b510a:	701a      	strb	r2, [r3, #0]
   b510c:	f000 b844 	b.w	b5198 <_ZN15Adafruit_BME280C1Ev>
   b5110:	2003e660 	.word	0x2003e660
   b5114:	2003e668 	.word	0x2003e668

000b5118 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5118:	4770      	bx	lr

000b511a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b511a:	b510      	push	{r4, lr}
  }
   b511c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b511e:	4604      	mov	r4, r0
  }
   b5120:	f7ff ff49 	bl	b4fb6 <_ZdlPvj>
   b5124:	4620      	mov	r0, r4
   b5126:	bd10      	pop	{r4, pc}

000b5128 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5128:	b40e      	push	{r1, r2, r3}
   b512a:	b503      	push	{r0, r1, lr}
   b512c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b512e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5130:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5134:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5136:	f001 fc32 	bl	b699e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b513a:	b002      	add	sp, #8
   b513c:	f85d eb04 	ldr.w	lr, [sp], #4
   b5140:	b003      	add	sp, #12
   b5142:	4770      	bx	lr

000b5144 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5144:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5146:	4604      	mov	r4, r0
   b5148:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b514a:	7922      	ldrb	r2, [r4, #4]
   b514c:	68a3      	ldr	r3, [r4, #8]
   b514e:	b132      	cbz	r2, b515e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5150:	b9a3      	cbnz	r3, b517c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5152:	490b      	ldr	r1, [pc, #44]	; (b5180 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5154:	b002      	add	sp, #8
   b5156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b515a:	f001 bbef 	b.w	b693c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b515e:	4a09      	ldr	r2, [pc, #36]	; (b5184 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5160:	7b26      	ldrb	r6, [r4, #12]
   b5162:	4d09      	ldr	r5, [pc, #36]	; (b5188 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5164:	4909      	ldr	r1, [pc, #36]	; (b518c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5166:	7b64      	ldrb	r4, [r4, #13]
   b5168:	2e01      	cmp	r6, #1
   b516a:	bf18      	it	ne
   b516c:	4629      	movne	r1, r5
   b516e:	e9cd 1400 	strd	r1, r4, [sp]
   b5172:	4907      	ldr	r1, [pc, #28]	; (b5190 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5174:	f7ff ffd8 	bl	b5128 <_ZN5Print6printfEPKcz>
  }
   b5178:	b002      	add	sp, #8
   b517a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b517c:	4a05      	ldr	r2, [pc, #20]	; (b5194 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b517e:	e7ef      	b.n	b5160 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5180:	000b840f 	.word	0x000b840f
   b5184:	000b8406 	.word	0x000b8406
   b5188:	000b840b 	.word	0x000b840b
   b518c:	000b8407 	.word	0x000b8407
   b5190:	000b8425 	.word	0x000b8425
   b5194:	000b83fe 	.word	0x000b83fe

000b5198 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b5198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b519c:	6103      	str	r3, [r0, #16]
{ }
   b519e:	4770      	bx	lr

000b51a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b51a0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b51a2:	4c0b      	ldr	r4, [pc, #44]	; (b51d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b51a4:	7821      	ldrb	r1, [r4, #0]
   b51a6:	f3bf 8f5b 	dmb	ish
   b51aa:	f011 0101 	ands.w	r1, r1, #1
   b51ae:	d10b      	bne.n	b51c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b51b0:	4620      	mov	r0, r4
   b51b2:	9101      	str	r1, [sp, #4]
   b51b4:	f7ff ff01 	bl	b4fba <__cxa_guard_acquire>
   b51b8:	9901      	ldr	r1, [sp, #4]
   b51ba:	b128      	cbz	r0, b51c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b51bc:	4805      	ldr	r0, [pc, #20]	; (b51d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b51be:	f001 fc2b 	bl	b6a18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b51c2:	4620      	mov	r0, r4
   b51c4:	f7ff fefe 	bl	b4fc4 <__cxa_guard_release>
        return instance;
    }
   b51c8:	4802      	ldr	r0, [pc, #8]	; (b51d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b51ca:	b002      	add	sp, #8
   b51cc:	bd10      	pop	{r4, pc}
   b51ce:	bf00      	nop
   b51d0:	2003e6b8 	.word	0x2003e6b8
   b51d4:	2003e6bc 	.word	0x2003e6bc

000b51d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b51d8:	b508      	push	{r3, lr}
        instance().endTransaction();
   b51da:	f7ff ffe1 	bl	b51a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b51de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b51e2:	f001 bc37 	b.w	b6a54 <_ZN8SPIClass14endTransactionEv>

000b51e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b51e6:	b507      	push	{r0, r1, r2, lr}
   b51e8:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b51ea:	f7ff ffd9 	bl	b51a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b51ee:	9901      	ldr	r1, [sp, #4]
    }
   b51f0:	b003      	add	sp, #12
   b51f2:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b51f6:	f001 bc47 	b.w	b6a88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b51fa <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b51fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b51fe:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5202:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b5204:	4605      	mov	r5, r0
   b5206:	460f      	mov	r7, r1
    if (_sck == -1)
   b5208:	d106      	bne.n	b5218 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b520a:	f7ff ffc9 	bl	b51a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b520e:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b5210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5214:	f001 bca6 	b.w	b6b64 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b5218:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b521a:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b521c:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b5220:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5224:	2100      	movs	r1, #0
   b5226:	b280      	uxth	r0, r0
   b5228:	f001 feb9 	bl	b6f9e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b522c:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b5230:	fa08 f106 	lsl.w	r1, r8, r6
   b5234:	4039      	ands	r1, r7
   b5236:	b280      	uxth	r0, r0
   b5238:	f001 feb1 	bl	b6f9e <digitalWrite>
        digitalWrite(_sck, HIGH);
   b523c:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b5240:	2101      	movs	r1, #1
   b5242:	b280      	uxth	r0, r0
   b5244:	f001 feab 	bl	b6f9e <digitalWrite>
        if (digitalRead(_miso))
   b5248:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b524c:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b524e:	b280      	uxth	r0, r0
        reply <<= 1;
   b5250:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b5252:	f001 febd 	bl	b6fd0 <digitalRead>
   b5256:	b108      	cbz	r0, b525c <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b5258:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b525c:	3e01      	subs	r6, #1
   b525e:	d2df      	bcs.n	b5220 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b5260:	4620      	mov	r0, r4
   b5262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5268 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b5268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b526a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b526e:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b5270:	4604      	mov	r4, r0
   b5272:	460e      	mov	r6, r1
   b5274:	4615      	mov	r5, r2
    if (_cs == -1) {
   b5276:	d113      	bne.n	b52a0 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5278:	7901      	ldrb	r1, [r0, #4]
   b527a:	6800      	ldr	r0, [r0, #0]
   b527c:	f001 f9f8 	bl	b6670 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5280:	6820      	ldr	r0, [r4, #0]
   b5282:	6803      	ldr	r3, [r0, #0]
   b5284:	4631      	mov	r1, r6
   b5286:	689b      	ldr	r3, [r3, #8]
   b5288:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b528a:	6820      	ldr	r0, [r4, #0]
   b528c:	6803      	ldr	r3, [r0, #0]
   b528e:	4629      	mov	r1, r5
   b5290:	689b      	ldr	r3, [r3, #8]
   b5292:	4798      	blx	r3
        _wire -> endTransmission();
   b5294:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b5296:	b004      	add	sp, #16
   b5298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b529c:	f001 b9f0 	b.w	b6680 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b52a0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b52a4:	3301      	adds	r3, #1
   b52a6:	d10c      	bne.n	b52c2 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b52a8:	4b16      	ldr	r3, [pc, #88]	; (b5304 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b52aa:	9300      	str	r3, [sp, #0]
   b52ac:	2300      	movs	r3, #0
   b52ae:	f88d 3004 	strb.w	r3, [sp, #4]
   b52b2:	4b15      	ldr	r3, [pc, #84]	; (b5308 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b52b4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b52b6:	4668      	mov	r0, sp
   b52b8:	2301      	movs	r3, #1
   b52ba:	f8ad 300c 	strh.w	r3, [sp, #12]
   b52be:	f7ff ff92 	bl	b51e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b52c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b52c6:	2100      	movs	r1, #0
   b52c8:	b280      	uxth	r0, r0
   b52ca:	f001 fe68 	bl	b6f9e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b52ce:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b52d2:	4620      	mov	r0, r4
   b52d4:	f7ff ff91 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b52d8:	4629      	mov	r1, r5
   b52da:	4620      	mov	r0, r4
   b52dc:	f7ff ff8d 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b52e0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b52e4:	2101      	movs	r1, #1
   b52e6:	b280      	uxth	r0, r0
   b52e8:	f001 fe59 	bl	b6f9e <digitalWrite>
    if (_sck == -1)
   b52ec:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b52f0:	3301      	adds	r3, #1
   b52f2:	d104      	bne.n	b52fe <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b52f4:	b004      	add	sp, #16
   b52f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b52fa:	f7ff bf6d 	b.w	b51d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b52fe:	b004      	add	sp, #16
   b5300:	bd70      	pop	{r4, r5, r6, pc}
   b5302:	bf00      	nop
   b5304:	000b844c 	.word	0x000b844c
   b5308:	0007a120 	.word	0x0007a120

000b530c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b530e:	00db      	lsls	r3, r3, #3
   b5310:	f002 0207 	and.w	r2, r2, #7
   b5314:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b5318:	4313      	orrs	r3, r2
   b531a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b531e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b5322:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b5326:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b532a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b532e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b5332:	f366 1347 	bfi	r3, r6, #5, #3
   b5336:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b533a:	00ed      	lsls	r5, r5, #3
   b533c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b5340:	f007 0707 	and.w	r7, r7, #7
   b5344:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b5348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b534c:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b534e:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b5350:	431d      	orrs	r5, r3
   b5352:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b5356:	f006 0207 	and.w	r2, r6, #7
   b535a:	21f2      	movs	r1, #242	; 0xf2
   b535c:	f7ff ff84 	bl	b5268 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b5360:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b5364:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b5368:	f002 0107 	and.w	r1, r2, #7
   b536c:	009b      	lsls	r3, r3, #2
   b536e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b5372:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b5376:	4620      	mov	r0, r4
   b5378:	21f5      	movs	r1, #245	; 0xf5
   b537a:	f7ff ff75 	bl	b5268 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b537e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b5382:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b5386:	f002 0107 	and.w	r1, r2, #7
   b538a:	009b      	lsls	r3, r3, #2
   b538c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b5390:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b5394:	4620      	mov	r0, r4
   b5396:	21f4      	movs	r1, #244	; 0xf4
}
   b5398:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b539c:	f7ff bf64 	b.w	b5268 <_ZN15Adafruit_BME2806write8Ehh>

000b53a0 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b53a0:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b53a2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b53a6:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b53a8:	b085      	sub	sp, #20
   b53aa:	4604      	mov	r4, r0
   b53ac:	460d      	mov	r5, r1
    if (_cs == -1) {
   b53ae:	d118      	bne.n	b53e2 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b53b0:	7901      	ldrb	r1, [r0, #4]
   b53b2:	6800      	ldr	r0, [r0, #0]
   b53b4:	f001 f95c 	bl	b6670 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b53b8:	6820      	ldr	r0, [r4, #0]
   b53ba:	6803      	ldr	r3, [r0, #0]
   b53bc:	4629      	mov	r1, r5
   b53be:	689b      	ldr	r3, [r3, #8]
   b53c0:	4798      	blx	r3
        _wire -> endTransmission();
   b53c2:	6820      	ldr	r0, [r4, #0]
   b53c4:	f001 f95c 	bl	b6680 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b53c8:	7921      	ldrb	r1, [r4, #4]
   b53ca:	6820      	ldr	r0, [r4, #0]
   b53cc:	2201      	movs	r2, #1
   b53ce:	f001 f94c 	bl	b666a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b53d2:	6820      	ldr	r0, [r4, #0]
   b53d4:	6803      	ldr	r3, [r0, #0]
   b53d6:	695b      	ldr	r3, [r3, #20]
   b53d8:	4798      	blx	r3
   b53da:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b53dc:	4628      	mov	r0, r5
   b53de:	b005      	add	sp, #20
   b53e0:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b53e2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b53e6:	3301      	adds	r3, #1
   b53e8:	d10c      	bne.n	b5404 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b53ea:	4b15      	ldr	r3, [pc, #84]	; (b5440 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b53ec:	9300      	str	r3, [sp, #0]
   b53ee:	2300      	movs	r3, #0
   b53f0:	f88d 3004 	strb.w	r3, [sp, #4]
   b53f4:	4b13      	ldr	r3, [pc, #76]	; (b5444 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b53f6:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b53f8:	4668      	mov	r0, sp
   b53fa:	2301      	movs	r3, #1
   b53fc:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5400:	f7ff fef1 	bl	b51e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5404:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5408:	2100      	movs	r1, #0
   b540a:	b280      	uxth	r0, r0
   b540c:	f001 fdc7 	bl	b6f9e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5410:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5414:	4620      	mov	r0, r4
   b5416:	f7ff fef0 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b541a:	2100      	movs	r1, #0
   b541c:	4620      	mov	r0, r4
   b541e:	f7ff feec 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
   b5422:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b5424:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5428:	2101      	movs	r1, #1
   b542a:	b280      	uxth	r0, r0
   b542c:	f001 fdb7 	bl	b6f9e <digitalWrite>
        if (_sck == -1)
   b5430:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5434:	3301      	adds	r3, #1
   b5436:	d1d1      	bne.n	b53dc <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b5438:	f7ff fece 	bl	b51d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b543c:	e7ce      	b.n	b53dc <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b543e:	bf00      	nop
   b5440:	000b844c 	.word	0x000b844c
   b5444:	0007a120 	.word	0x0007a120

000b5448 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b5448:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b544a:	21f3      	movs	r1, #243	; 0xf3
   b544c:	f7ff ffa8 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b5450:	f000 0001 	and.w	r0, r0, #1
   b5454:	bd08      	pop	{r3, pc}
	...

000b5458 <_ZN15Adafruit_BME2806read16Eh>:
{
   b5458:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b545a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b545e:	3301      	adds	r3, #1
{
   b5460:	b085      	sub	sp, #20
   b5462:	4604      	mov	r4, r0
   b5464:	460d      	mov	r5, r1
    if (_cs == -1) {
   b5466:	d11f      	bne.n	b54a8 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b5468:	7901      	ldrb	r1, [r0, #4]
   b546a:	6800      	ldr	r0, [r0, #0]
   b546c:	f001 f900 	bl	b6670 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5470:	6820      	ldr	r0, [r4, #0]
   b5472:	6803      	ldr	r3, [r0, #0]
   b5474:	4629      	mov	r1, r5
   b5476:	689b      	ldr	r3, [r3, #8]
   b5478:	4798      	blx	r3
        _wire -> endTransmission();
   b547a:	6820      	ldr	r0, [r4, #0]
   b547c:	f001 f900 	bl	b6680 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b5480:	7921      	ldrb	r1, [r4, #4]
   b5482:	6820      	ldr	r0, [r4, #0]
   b5484:	2202      	movs	r2, #2
   b5486:	f001 f8f0 	bl	b666a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b548a:	6820      	ldr	r0, [r4, #0]
   b548c:	6803      	ldr	r3, [r0, #0]
   b548e:	695b      	ldr	r3, [r3, #20]
   b5490:	4798      	blx	r3
   b5492:	4605      	mov	r5, r0
   b5494:	6820      	ldr	r0, [r4, #0]
   b5496:	6803      	ldr	r3, [r0, #0]
   b5498:	695b      	ldr	r3, [r3, #20]
   b549a:	4798      	blx	r3
   b549c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b54a0:	b285      	uxth	r5, r0
}
   b54a2:	4628      	mov	r0, r5
   b54a4:	b005      	add	sp, #20
   b54a6:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b54a8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b54ac:	3301      	adds	r3, #1
   b54ae:	d10c      	bne.n	b54ca <_ZN15Adafruit_BME2806read16Eh+0x72>
   b54b0:	4b18      	ldr	r3, [pc, #96]	; (b5514 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b54b2:	9300      	str	r3, [sp, #0]
   b54b4:	2300      	movs	r3, #0
   b54b6:	f88d 3004 	strb.w	r3, [sp, #4]
   b54ba:	4b17      	ldr	r3, [pc, #92]	; (b5518 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b54bc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b54be:	4668      	mov	r0, sp
   b54c0:	2301      	movs	r3, #1
   b54c2:	f8ad 300c 	strh.w	r3, [sp, #12]
   b54c6:	f7ff fe8e 	bl	b51e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b54ca:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b54ce:	2100      	movs	r1, #0
   b54d0:	b280      	uxth	r0, r0
   b54d2:	f001 fd64 	bl	b6f9e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b54d6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b54da:	4620      	mov	r0, r4
   b54dc:	f7ff fe8d 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b54e0:	2100      	movs	r1, #0
   b54e2:	4620      	mov	r0, r4
   b54e4:	f7ff fe89 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
   b54e8:	2100      	movs	r1, #0
   b54ea:	4605      	mov	r5, r0
   b54ec:	4620      	mov	r0, r4
   b54ee:	f7ff fe84 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
   b54f2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b54f6:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b54f8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b54fc:	2101      	movs	r1, #1
   b54fe:	b280      	uxth	r0, r0
   b5500:	f001 fd4d 	bl	b6f9e <digitalWrite>
        if (_sck == -1)
   b5504:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b5508:	3301      	adds	r3, #1
   b550a:	d1ca      	bne.n	b54a2 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b550c:	f7ff fe64 	bl	b51d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b5510:	e7c7      	b.n	b54a2 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b5512:	bf00      	nop
   b5514:	000b844c 	.word	0x000b844c
   b5518:	0007a120 	.word	0x0007a120

000b551c <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b551c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b551e:	f7ff ff9b 	bl	b5458 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b5522:	ba40      	rev16	r0, r0
}
   b5524:	b280      	uxth	r0, r0
   b5526:	bd08      	pop	{r3, pc}

000b5528 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b5528:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b552a:	2188      	movs	r1, #136	; 0x88
{
   b552c:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b552e:	f7ff fff5 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5532:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b5534:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b5536:	4620      	mov	r0, r4
   b5538:	f7ff fff0 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b553c:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b553e:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b5540:	4620      	mov	r0, r4
   b5542:	f7ff ffeb 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5546:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b5548:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b554a:	4620      	mov	r0, r4
   b554c:	f7ff ffe6 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b5550:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b5552:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b5554:	4620      	mov	r0, r4
   b5556:	f7ff ffe1 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b555a:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b555c:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b555e:	4620      	mov	r0, r4
   b5560:	f7ff ffdc 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b5564:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b5566:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b5568:	4620      	mov	r0, r4
   b556a:	f7ff ffd7 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b556e:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b5570:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b5572:	4620      	mov	r0, r4
   b5574:	f7ff ffd2 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b5578:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b557a:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b557c:	4620      	mov	r0, r4
   b557e:	f7ff ffcd 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b5582:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b5584:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b5586:	4620      	mov	r0, r4
   b5588:	f7ff ffc8 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b558c:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b558e:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b5590:	4620      	mov	r0, r4
   b5592:	f7ff ffc3 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
   b5596:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b5598:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b559a:	4620      	mov	r0, r4
   b559c:	f7ff ffbe 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b55a0:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b55a2:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b55a4:	4620      	mov	r0, r4
   b55a6:	f7ff fefb 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b55aa:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b55ac:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b55b0:	4620      	mov	r0, r4
   b55b2:	f7ff ffb3 	bl	b551c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b55b6:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b55b8:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b55ba:	4620      	mov	r0, r4
   b55bc:	f7ff fef0 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b55c0:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b55c2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b55c6:	4620      	mov	r0, r4
   b55c8:	f7ff feea 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
   b55cc:	21e5      	movs	r1, #229	; 0xe5
   b55ce:	4605      	mov	r5, r0
   b55d0:	4620      	mov	r0, r4
   b55d2:	f7ff fee5 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
   b55d6:	f000 030f 	and.w	r3, r0, #15
   b55da:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b55de:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b55e0:	21e6      	movs	r1, #230	; 0xe6
   b55e2:	4620      	mov	r0, r4
   b55e4:	f7ff fedc 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
   b55e8:	21e5      	movs	r1, #229	; 0xe5
   b55ea:	4605      	mov	r5, r0
   b55ec:	4620      	mov	r0, r4
   b55ee:	f7ff fed7 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
   b55f2:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b55f6:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b55fa:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b55fc:	21e7      	movs	r1, #231	; 0xe7
   b55fe:	4620      	mov	r0, r4
   b5600:	f7ff fece 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
   b5604:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b5608:	bd38      	pop	{r3, r4, r5, pc}
	...

000b560c <_ZN15Adafruit_BME2806read24Eh>:
{
   b560c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b560e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b5612:	3301      	adds	r3, #1
{
   b5614:	b085      	sub	sp, #20
   b5616:	4604      	mov	r4, r0
   b5618:	460d      	mov	r5, r1
    if (_cs == -1) {
   b561a:	d123      	bne.n	b5664 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b561c:	7901      	ldrb	r1, [r0, #4]
   b561e:	6800      	ldr	r0, [r0, #0]
   b5620:	f001 f826 	bl	b6670 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b5624:	6820      	ldr	r0, [r4, #0]
   b5626:	6803      	ldr	r3, [r0, #0]
   b5628:	4629      	mov	r1, r5
   b562a:	689b      	ldr	r3, [r3, #8]
   b562c:	4798      	blx	r3
        _wire -> endTransmission();
   b562e:	6820      	ldr	r0, [r4, #0]
   b5630:	f001 f826 	bl	b6680 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b5634:	7921      	ldrb	r1, [r4, #4]
   b5636:	6820      	ldr	r0, [r4, #0]
   b5638:	2203      	movs	r2, #3
   b563a:	f001 f816 	bl	b666a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b563e:	6820      	ldr	r0, [r4, #0]
   b5640:	6803      	ldr	r3, [r0, #0]
   b5642:	695b      	ldr	r3, [r3, #20]
   b5644:	4798      	blx	r3
        value <<= 8;
   b5646:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5648:	6820      	ldr	r0, [r4, #0]
   b564a:	6803      	ldr	r3, [r0, #0]
   b564c:	695b      	ldr	r3, [r3, #20]
   b564e:	4798      	blx	r3
   b5650:	4328      	orrs	r0, r5
        value <<= 8;
   b5652:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b5654:	6820      	ldr	r0, [r4, #0]
   b5656:	6803      	ldr	r3, [r0, #0]
   b5658:	695b      	ldr	r3, [r3, #20]
   b565a:	4798      	blx	r3
   b565c:	4305      	orrs	r5, r0
}
   b565e:	4628      	mov	r0, r5
   b5660:	b005      	add	sp, #20
   b5662:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b5664:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b5668:	3301      	adds	r3, #1
   b566a:	d10c      	bne.n	b5686 <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b566c:	4b1a      	ldr	r3, [pc, #104]	; (b56d8 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b566e:	9300      	str	r3, [sp, #0]
   b5670:	2300      	movs	r3, #0
   b5672:	f88d 3004 	strb.w	r3, [sp, #4]
   b5676:	4b19      	ldr	r3, [pc, #100]	; (b56dc <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b5678:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b567a:	4668      	mov	r0, sp
   b567c:	2301      	movs	r3, #1
   b567e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b5682:	f7ff fdb0 	bl	b51e6 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b5686:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b568a:	2100      	movs	r1, #0
   b568c:	b280      	uxth	r0, r0
   b568e:	f001 fc86 	bl	b6f9e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b5692:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5696:	4620      	mov	r0, r4
   b5698:	f7ff fdaf 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b569c:	2100      	movs	r1, #0
   b569e:	4620      	mov	r0, r4
   b56a0:	f7ff fdab 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b56a4:	2100      	movs	r1, #0
        value <<= 8;
   b56a6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b56a8:	4620      	mov	r0, r4
   b56aa:	f7ff fda6 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
   b56ae:	4328      	orrs	r0, r5
        value <<= 8;
   b56b0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b56b2:	2100      	movs	r1, #0
   b56b4:	4620      	mov	r0, r4
   b56b6:	f7ff fda0 	bl	b51fa <_ZN15Adafruit_BME2807spixferEh>
   b56ba:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b56bc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b56c0:	2101      	movs	r1, #1
   b56c2:	b280      	uxth	r0, r0
   b56c4:	f001 fc6b 	bl	b6f9e <digitalWrite>
        if (_sck == -1)
   b56c8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b56cc:	3301      	adds	r3, #1
   b56ce:	d1c6      	bne.n	b565e <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b56d0:	f7ff fd82 	bl	b51d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b56d4:	e7c3      	b.n	b565e <_ZN15Adafruit_BME2806read24Eh+0x52>
   b56d6:	bf00      	nop
   b56d8:	000b844c 	.word	0x000b844c
   b56dc:	0007a120 	.word	0x0007a120

000b56e0 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b56e0:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b56e2:	21fa      	movs	r1, #250	; 0xfa
{
   b56e4:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b56e6:	f7ff ff91 	bl	b560c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b56ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b56ee:	d01f      	beq.n	b5730 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b56f0:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b56f2:	ed9f 7a11 	vldr	s14, [pc, #68]	; b5738 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b56f6:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b56f8:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b56fc:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b5700:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b5704:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5706:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b570a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b570e:	131b      	asrs	r3, r3, #12
   b5710:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b5712:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b5714:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b5718:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b571a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b571e:	3380      	adds	r3, #128	; 0x80
   b5720:	121b      	asrs	r3, r3, #8
   b5722:	ee07 3a90 	vmov	s15, r3
   b5726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b572a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b572e:	bd10      	pop	{r4, pc}
        return NAN;
   b5730:	ed9f 0a02 	vldr	s0, [pc, #8]	; b573c <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b5734:	e7fb      	b.n	b572e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b5736:	bf00      	nop
   b5738:	42c80000 	.word	0x42c80000
   b573c:	7fc00000 	.word	0x7fc00000

000b5740 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b5740:	b538      	push	{r3, r4, r5, lr}
   b5742:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b5744:	f7ff ffcc 	bl	b56e0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b5748:	21fd      	movs	r1, #253	; 0xfd
   b574a:	4620      	mov	r0, r4
   b574c:	f7ff fe84 	bl	b5458 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b5750:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b5754:	d038      	beq.n	b57c8 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b5756:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b5758:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b575c:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b5760:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b5764:	0509      	lsls	r1, r1, #20
   b5766:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b576a:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b576e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b5772:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5774:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5778:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b577c:	436b      	muls	r3, r5
   b577e:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5780:	4369      	muls	r1, r5
   b5782:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5784:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b5788:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b578a:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b578c:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b5790:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b5794:	434b      	muls	r3, r1
   b5796:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b579a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b579c:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b579e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b57a0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b57a4:	4352      	muls	r2, r2
   b57a6:	11d2      	asrs	r2, r2, #7
   b57a8:	434a      	muls	r2, r1
   b57aa:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b57ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b57b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b57b6:	bfa8      	it	ge
   b57b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b57bc:	131b      	asrs	r3, r3, #12
   b57be:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b57c2:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b57c6:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b57c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; b57d0 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b57cc:	e7fb      	b.n	b57c6 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b57ce:	bf00      	nop
   b57d0:	7fc00000 	.word	0x7fc00000

000b57d4 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b57d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b57d8:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b57da:	f7ff ff81 	bl	b56e0 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b57de:	21f7      	movs	r1, #247	; 0xf7
   b57e0:	4628      	mov	r0, r5
   b57e2:	f7ff ff13 	bl	b560c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b57e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b57ea:	f000 80b6 	beq.w	b595a <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b57ee:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b57f0:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b57f4:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b57f8:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b57fc:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5800:	17dc      	asrs	r4, r3, #31
   b5802:	fb03 f20e 	mul.w	r2, r3, lr
   b5806:	fb01 2204 	mla	r2, r1, r4, r2
   b580a:	fba3 3401 	umull	r3, r4, r3, r1
   b580e:	4422      	add	r2, r4
   b5810:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5812:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b5816:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5818:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b581c:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5820:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5824:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b5828:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b582c:	fb03 f608 	mul.w	r6, r3, r8
   b5830:	fb07 660c 	mla	r6, r7, ip, r6
   b5834:	fba3 3c07 	umull	r3, ip, r3, r7
   b5838:	4466      	add	r6, ip
   b583a:	0a1b      	lsrs	r3, r3, #8
   b583c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b5840:	191b      	adds	r3, r3, r4
   b5842:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b5846:	8b6e      	ldrh	r6, [r5, #26]
   b5848:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b584c:	fba3 3406 	umull	r3, r4, r3, r6
   b5850:	fb06 4402 	mla	r4, r6, r2, r4
   b5854:	17e3      	asrs	r3, r4, #31
   b5856:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b5858:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b585c:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b5860:	d07e      	beq.n	b5960 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b5862:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b5866:	fb04 f608 	mul.w	r6, r4, r8
   b586a:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b586e:	fb07 6609 	mla	r6, r7, r9, r6
   b5872:	fba4 4707 	umull	r4, r7, r4, r7
   b5876:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5878:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b587c:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b5880:	fb07 fe0e 	mul.w	lr, r7, lr
   b5884:	fb01 ee08 	mla	lr, r1, r8, lr
   b5888:	fba7 7101 	umull	r7, r1, r7, r1
   b588c:	4471      	add	r1, lr
   b588e:	0449      	lsls	r1, r1, #17
   b5890:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b5894:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b5896:	047f      	lsls	r7, r7, #17
   b5898:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b589a:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b589e:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b58a2:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b58a6:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b58aa:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b58ae:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b58b2:	07e4      	lsls	r4, r4, #31
   b58b4:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b58b6:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b58ba:	f640 4135 	movw	r1, #3125	; 0xc35
   b58be:	eb60 0606 	sbc.w	r6, r0, r6
   b58c2:	fba4 0401 	umull	r0, r4, r4, r1
   b58c6:	fb01 4106 	mla	r1, r1, r6, r4
   b58ca:	f7ff f973 	bl	b4bb4 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b58ce:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b58d2:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b58d6:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b58da:	0b43      	lsrs	r3, r0, #13
   b58dc:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b58e0:	fb02 f70c 	mul.w	r7, r2, ip
   b58e4:	17d4      	asrs	r4, r2, #31
   b58e6:	fb03 7704 	mla	r7, r3, r4, r7
   b58ea:	fba2 2403 	umull	r2, r4, r2, r3
   b58ee:	443c      	add	r4, r7
   b58f0:	fb02 f70c 	mul.w	r7, r2, ip
   b58f4:	fb03 7704 	mla	r7, r3, r4, r7
   b58f8:	fba2 2303 	umull	r2, r3, r2, r3
   b58fc:	441f      	add	r7, r3
   b58fe:	0e53      	lsrs	r3, r2, #25
   b5900:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5904:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5906:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b590a:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b590e:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5910:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5914:	fb02 4100 	mla	r1, r2, r0, r4
   b5918:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b591c:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b5920:	4431      	add	r1, r6
   b5922:	0cc0      	lsrs	r0, r0, #19
   b5924:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b5928:	1818      	adds	r0, r3, r0
   b592a:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b592e:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b5932:	0a00      	lsrs	r0, r0, #8
   b5934:	012d      	lsls	r5, r5, #4
   b5936:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b593a:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b593e:	0124      	lsls	r4, r4, #4
   b5940:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b5942:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b5946:	f7ff f8f7 	bl	b4b38 <__aeabi_l2f>
   b594a:	ed9f 0a07 	vldr	s0, [pc, #28]	; b5968 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b594e:	ee07 0a90 	vmov	s15, r0
   b5952:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b5956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b595a:	ed9f 0a04 	vldr	s0, [pc, #16]	; b596c <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b595e:	e7fa      	b.n	b5956 <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b5960:	ed9f 0a03 	vldr	s0, [pc, #12]	; b5970 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b5964:	e7f7      	b.n	b5956 <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b5966:	bf00      	nop
   b5968:	3b800000 	.word	0x3b800000
   b596c:	7fc00000 	.word	0x7fc00000
	...

000b5978 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   b5978:	b508      	push	{r3, lr}
   b597a:	ed2d 8b02 	vpush	{d8}
   b597e:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   b5982:	f7ff ff27 	bl	b57d4 <_ZN15Adafruit_BME28012readPressureEv>
   b5986:	ed9f 7a16 	vldr	s14, [pc, #88]	; b59e0 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   b598a:	eec0 7a07 	vdiv.f32	s15, s0, s14
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b598e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b5992:	ee17 0a90 	vmov	r0, s15
   b5996:	f7fe fca7 	bl	b42e8 <__aeabi_f2d>
   b599a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; b59d0 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   b599e:	ec41 0b10 	vmov	d0, r0, r1
   b59a2:	f001 fbad 	bl	b7100 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   b59a6:	490f      	ldr	r1, [pc, #60]	; (b59e4 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   b59a8:	ec53 2b10 	vmov	r2, r3, d0
   b59ac:	2000      	movs	r0, #0
   b59ae:	f7fe fb3b 	bl	b4028 <__aeabi_dsub>
   b59b2:	a309      	add	r3, pc, #36	; (adr r3, b59d8 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   b59b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b59b8:	f7fe fcee 	bl	b4398 <__aeabi_dmul>
   b59bc:	f7fe ff9c 	bl	b48f8 <__aeabi_d2f>
}
   b59c0:	ecbd 8b02 	vpop	{d8}
   b59c4:	ee00 0a10 	vmov	s0, r0
   b59c8:	bd08      	pop	{r3, pc}
   b59ca:	bf00      	nop
   b59cc:	f3af 8000 	nop.w
   b59d0:	1a36e2eb 	.word	0x1a36e2eb
   b59d4:	3fc85bc0 	.word	0x3fc85bc0
   b59d8:	00000000 	.word	0x00000000
   b59dc:	40e5a540 	.word	0x40e5a540
   b59e0:	42c80000 	.word	0x42c80000
   b59e4:	3ff00000 	.word	0x3ff00000

000b59e8 <_ZN15Adafruit_BME2804initEv>:
{
   b59e8:	b530      	push	{r4, r5, lr}
   b59ea:	4604      	mov	r4, r0
    if (_cs == -1) {
   b59ec:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b59f0:	1c42      	adds	r2, r0, #1
{
   b59f2:	b085      	sub	sp, #20
    if (_cs == -1) {
   b59f4:	d119      	bne.n	b5a2a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b59f6:	6820      	ldr	r0, [r4, #0]
   b59f8:	f000 fe08 	bl	b660c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b59fc:	21d0      	movs	r1, #208	; 0xd0
   b59fe:	4620      	mov	r0, r4
   b5a00:	f7ff fcce 	bl	b53a0 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b5a04:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b5a06:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b5a08:	d145      	bne.n	b5a96 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	22b6      	movs	r2, #182	; 0xb6
   b5a0e:	21e0      	movs	r1, #224	; 0xe0
   b5a10:	f7ff fc2a 	bl	b5268 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b5a14:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5a18:	f000 fa9e 	bl	b5f58 <delay>
    while (isReadingCalibration())
   b5a1c:	4620      	mov	r0, r4
   b5a1e:	f7ff fd13 	bl	b5448 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b5a22:	4605      	mov	r5, r0
   b5a24:	b328      	cbz	r0, b5a72 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b5a26:	2064      	movs	r0, #100	; 0x64
   b5a28:	e7f6      	b.n	b5a18 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b5a2a:	2101      	movs	r1, #1
   b5a2c:	b280      	uxth	r0, r0
   b5a2e:	f001 fab6 	bl	b6f9e <digitalWrite>
        pinMode(_cs, OUTPUT);
   b5a32:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5a36:	2101      	movs	r1, #1
   b5a38:	b280      	uxth	r0, r0
   b5a3a:	f001 fa9f 	bl	b6f7c <pinMode>
        if (_sck == -1) {
   b5a3e:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b5a42:	1c43      	adds	r3, r0, #1
   b5a44:	d104      	bne.n	b5a50 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b5a46:	f7ff fbab 	bl	b51a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a4a:	f000 ffef 	bl	b6a2c <_ZN8SPIClass5beginEv>
    }
   b5a4e:	e7d5      	b.n	b59fc <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b5a50:	2101      	movs	r1, #1
   b5a52:	b280      	uxth	r0, r0
   b5a54:	f001 fa92 	bl	b6f7c <pinMode>
            pinMode(_mosi, OUTPUT);
   b5a58:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b5a5c:	2101      	movs	r1, #1
   b5a5e:	b280      	uxth	r0, r0
   b5a60:	f001 fa8c 	bl	b6f7c <pinMode>
            pinMode(_miso, INPUT);
   b5a64:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b5a68:	2100      	movs	r1, #0
   b5a6a:	b280      	uxth	r0, r0
   b5a6c:	f001 fa86 	bl	b6f7c <pinMode>
   b5a70:	e7c4      	b.n	b59fc <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b5a72:	4620      	mov	r0, r4
   b5a74:	f7ff fd58 	bl	b5528 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b5a78:	2305      	movs	r3, #5
   b5a7a:	9300      	str	r3, [sp, #0]
   b5a7c:	461a      	mov	r2, r3
   b5a7e:	2103      	movs	r1, #3
   b5a80:	4620      	mov	r0, r4
   b5a82:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5a86:	f7ff fc41 	bl	b530c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b5a8a:	2064      	movs	r0, #100	; 0x64
   b5a8c:	f000 fa64 	bl	b5f58 <delay>
    return true;
   b5a90:	2001      	movs	r0, #1
}
   b5a92:	b005      	add	sp, #20
   b5a94:	bd30      	pop	{r4, r5, pc}
        return false;
   b5a96:	2000      	movs	r0, #0
   b5a98:	e7fb      	b.n	b5a92 <_ZN15Adafruit_BME2804initEv+0xaa>

000b5a9a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b5a9a:	2377      	movs	r3, #119	; 0x77
{
   b5a9c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b5a9e:	7103      	strb	r3, [r0, #4]
{
   b5aa0:	4604      	mov	r4, r0
	_wire = &Wire;
   b5aa2:	f001 fac3 	bl	b702c <_Z19__fetch_global_Wirev>
   b5aa6:	6020      	str	r0, [r4, #0]
	status = init();
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	f7ff ff9d 	bl	b59e8 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b5aae:	b930      	cbnz	r0, b5abe <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b5ab0:	2376      	movs	r3, #118	; 0x76
   b5ab2:	7123      	strb	r3, [r4, #4]
 		status = init();
   b5ab4:	4620      	mov	r0, r4
}
   b5ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b5aba:	f7ff bf95 	b.w	b59e8 <_ZN15Adafruit_BME2804initEv>
}
   b5abe:	bd10      	pop	{r4, pc}

000b5ac0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <os_mutex_recursive_create+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	00030248 	.word	0x00030248

000b5ad0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <HAL_RNG_GetRandomNumber+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	685b      	ldr	r3, [r3, #4]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030218 	.word	0x00030218

000b5ae0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	695b      	ldr	r3, [r3, #20]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030218 	.word	0x00030218

000b5af0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <hal_gpio_mode+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	689b      	ldr	r3, [r3, #8]
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	0003022c 	.word	0x0003022c

000b5b00 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <hal_gpio_get_mode+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	68db      	ldr	r3, [r3, #12]
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	0003022c 	.word	0x0003022c

000b5b10 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <hal_gpio_write+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	691b      	ldr	r3, [r3, #16]
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	0003022c 	.word	0x0003022c

000b5b20 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <hal_gpio_read+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	695b      	ldr	r3, [r3, #20]
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	0003022c 	.word	0x0003022c

000b5b30 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <hal_i2c_begin+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	68db      	ldr	r3, [r3, #12]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	00030228 	.word	0x00030228

000b5b40 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <hal_i2c_begin_transmission+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	699b      	ldr	r3, [r3, #24]
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	00030228 	.word	0x00030228

000b5b50 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <hal_i2c_end_transmission+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	69db      	ldr	r3, [r3, #28]
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	00030228 	.word	0x00030228

000b5b60 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <hal_i2c_write+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	6a1b      	ldr	r3, [r3, #32]
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	00030228 	.word	0x00030228

000b5b70 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <hal_i2c_available+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	00030228 	.word	0x00030228

000b5b80 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <hal_i2c_read+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	00030228 	.word	0x00030228

000b5b90 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <hal_i2c_peek+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	00030228 	.word	0x00030228

000b5ba0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <hal_i2c_flush+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	00030228 	.word	0x00030228

000b5bb0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <hal_i2c_is_enabled+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	00030228 	.word	0x00030228

000b5bc0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <hal_i2c_init+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	00030228 	.word	0x00030228

000b5bd0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <hal_i2c_request_ex+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	00030228 	.word	0x00030228

000b5be0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <inet_inet_ntop+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	695b      	ldr	r3, [r3, #20]
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	00030264 	.word	0x00030264

000b5bf0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <netdb_freeaddrinfo+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	689b      	ldr	r3, [r3, #8]
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	00030268 	.word	0x00030268

000b5c00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <netdb_getaddrinfo+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	68db      	ldr	r3, [r3, #12]
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	00030268 	.word	0x00030268

000b5c10 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <hal_spi_begin+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	681b      	ldr	r3, [r3, #0]
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	00030230 	.word	0x00030230

000b5c20 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <hal_spi_transfer+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	695b      	ldr	r3, [r3, #20]
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	00030230 	.word	0x00030230

000b5c30 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <hal_spi_init+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	69db      	ldr	r3, [r3, #28]
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	00030230 	.word	0x00030230

000b5c40 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <hal_spi_is_enabled+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	6a1b      	ldr	r3, [r3, #32]
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	00030230 	.word	0x00030230

000b5c50 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <hal_spi_info+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	00030230 	.word	0x00030230

000b5c60 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <hal_spi_set_settings+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	00030230 	.word	0x00030230

000b5c70 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <hal_spi_acquire+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	00030230 	.word	0x00030230

000b5c80 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <hal_spi_release+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030230 	.word	0x00030230

000b5c90 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <hal_usart_write+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	68db      	ldr	r3, [r3, #12]
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	0003023c 	.word	0x0003023c

000b5ca0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <hal_usart_available+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	691b      	ldr	r3, [r3, #16]
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	0003023c 	.word	0x0003023c

000b5cb0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <hal_usart_read+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	695b      	ldr	r3, [r3, #20]
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	0003023c 	.word	0x0003023c

000b5cc0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <hal_usart_peek+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	699b      	ldr	r3, [r3, #24]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	0003023c 	.word	0x0003023c

000b5cd0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <hal_usart_flush+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	69db      	ldr	r3, [r3, #28]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	0003023c 	.word	0x0003023c

000b5ce0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <hal_usart_is_enabled+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	6a1b      	ldr	r3, [r3, #32]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	0003023c 	.word	0x0003023c

000b5cf0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <hal_usart_available_data_for_write+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	0003023c 	.word	0x0003023c

000b5d00 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <hal_usart_init_ex+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	0003023c 	.word	0x0003023c

000b5d10 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <HAL_USB_USART_Init+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	681b      	ldr	r3, [r3, #0]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	0003024c 	.word	0x0003024c

000b5d20 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <HAL_USB_USART_Available_Data+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	691b      	ldr	r3, [r3, #16]
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	0003024c 	.word	0x0003024c

000b5d30 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	695b      	ldr	r3, [r3, #20]
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	0003024c 	.word	0x0003024c

000b5d40 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <HAL_USB_USART_Receive_Data+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	699b      	ldr	r3, [r3, #24]
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	0003024c 	.word	0x0003024c

000b5d50 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <HAL_USB_USART_Send_Data+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	69db      	ldr	r3, [r3, #28]
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	0003024c 	.word	0x0003024c

000b5d60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <HAL_USB_USART_Flush_Data+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	6a1b      	ldr	r3, [r3, #32]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	0003024c 	.word	0x0003024c

000b5d70 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <set_system_mode+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	685b      	ldr	r3, [r3, #4]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	00030220 	.word	0x00030220

000b5d80 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <system_delay_ms+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	695b      	ldr	r3, [r3, #20]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	00030220 	.word	0x00030220

000b5d90 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <application_thread_current+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	00030220 	.word	0x00030220

000b5da0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <application_thread_invoke+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030220 	.word	0x00030220

000b5db0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b03      	ldr	r3, [pc, #12]	; (b5dc0 <system_ctrl_set_app_request_handler+0x10>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5dba:	9301      	str	r3, [sp, #4]
   b5dbc:	bd08      	pop	{r3, pc}
   b5dbe:	0000      	.short	0x0000
   b5dc0:	00030220 	.word	0x00030220

000b5dc4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5dc4:	b508      	push	{r3, lr}
   b5dc6:	4b03      	ldr	r3, [pc, #12]	; (b5dd4 <system_ctrl_set_result+0x10>)
   b5dc8:	681b      	ldr	r3, [r3, #0]
   b5dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5dce:	9301      	str	r3, [sp, #4]
   b5dd0:	bd08      	pop	{r3, pc}
   b5dd2:	0000      	.short	0x0000
   b5dd4:	00030220 	.word	0x00030220

000b5dd8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b5dd8:	b508      	push	{r3, lr}
   b5dda:	4b02      	ldr	r3, [pc, #8]	; (b5de4 <spark_variable+0xc>)
   b5ddc:	681b      	ldr	r3, [r3, #0]
   b5dde:	681b      	ldr	r3, [r3, #0]
   b5de0:	9301      	str	r3, [sp, #4]
   b5de2:	bd08      	pop	{r3, pc}
   b5de4:	00030244 	.word	0x00030244

000b5de8 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b5de8:	b508      	push	{r3, lr}
   b5dea:	4b02      	ldr	r3, [pc, #8]	; (b5df4 <spark_cloud_flag_connected+0xc>)
   b5dec:	681b      	ldr	r3, [r3, #0]
   b5dee:	695b      	ldr	r3, [r3, #20]
   b5df0:	9301      	str	r3, [sp, #4]
   b5df2:	bd08      	pop	{r3, pc}
   b5df4:	00030244 	.word	0x00030244

000b5df8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5df8:	b508      	push	{r3, lr}
   b5dfa:	4b02      	ldr	r3, [pc, #8]	; (b5e04 <spark_send_event+0xc>)
   b5dfc:	681b      	ldr	r3, [r3, #0]
   b5dfe:	6a1b      	ldr	r3, [r3, #32]
   b5e00:	9301      	str	r3, [sp, #4]
   b5e02:	bd08      	pop	{r3, pc}
   b5e04:	00030244 	.word	0x00030244

000b5e08 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5e08:	b508      	push	{r3, lr}
   b5e0a:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5e0c:	681b      	ldr	r3, [r3, #0]
   b5e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5e10:	9301      	str	r3, [sp, #4]
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	00030244 	.word	0x00030244

000b5e18 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <network_connect+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	685b      	ldr	r3, [r3, #4]
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	00030240 	.word	0x00030240

000b5e28 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <network_connecting+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	689b      	ldr	r3, [r3, #8]
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	00030240 	.word	0x00030240

000b5e38 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <network_disconnect+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	68db      	ldr	r3, [r3, #12]
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	00030240 	.word	0x00030240

000b5e48 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <network_ready+0xc>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	691b      	ldr	r3, [r3, #16]
   b5e50:	9301      	str	r3, [sp, #4]
   b5e52:	bd08      	pop	{r3, pc}
   b5e54:	00030240 	.word	0x00030240

000b5e58 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <network_on+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	695b      	ldr	r3, [r3, #20]
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	00030240 	.word	0x00030240

000b5e68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <network_off+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	699b      	ldr	r3, [r3, #24]
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	00030240 	.word	0x00030240

000b5e78 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <network_listen+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	69db      	ldr	r3, [r3, #28]
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030240 	.word	0x00030240

000b5e88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <network_listening+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6a1b      	ldr	r3, [r3, #32]
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	00030240 	.word	0x00030240

000b5e98 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <network_set_listen_timeout+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	00030240 	.word	0x00030240

000b5ea8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <network_get_listen_timeout+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030240 	.word	0x00030240

000b5eb8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <network_is_on+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030240 	.word	0x00030240

000b5ec8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <network_is_off+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030240 	.word	0x00030240

000b5ed8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <malloc+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	681b      	ldr	r3, [r3, #0]
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	0003021c 	.word	0x0003021c

000b5ee8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <free+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	685b      	ldr	r3, [r3, #4]
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	0003021c 	.word	0x0003021c

000b5ef8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <vsnprintf+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	0003021c 	.word	0x0003021c

000b5f08 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <abort+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	0003021c 	.word	0x0003021c

000b5f18 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <_malloc_r+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	0003021c 	.word	0x0003021c

000b5f28 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <__errno+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	0003021c 	.word	0x0003021c

000b5f38 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <__assert_func+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	0003021c 	.word	0x0003021c

000b5f48 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <newlib_impure_ptr_callback+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	0003021c 	.word	0x0003021c

000b5f58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5f58:	2100      	movs	r1, #0
   b5f5a:	f7ff bf11 	b.w	b5d80 <system_delay_ms>

000b5f5e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5f5e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5f60:	6883      	ldr	r3, [r0, #8]
   b5f62:	4604      	mov	r4, r0
   b5f64:	b90b      	cbnz	r3, b5f6a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5f66:	f001 f8c7 	bl	b70f8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5f6a:	68c3      	ldr	r3, [r0, #12]
   b5f6c:	4798      	blx	r3
      if (_M_manager)
   b5f6e:	68a3      	ldr	r3, [r4, #8]
   b5f70:	b11b      	cbz	r3, b5f7a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5f72:	2203      	movs	r2, #3
   b5f74:	4621      	mov	r1, r4
   b5f76:	4620      	mov	r0, r4
   b5f78:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5f7a:	4620      	mov	r0, r4
   b5f7c:	2110      	movs	r1, #16
}
   b5f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5f82:	f7ff b818 	b.w	b4fb6 <_ZdlPvj>

000b5f86 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5f86:	b510      	push	{r4, lr}
      if (_M_manager)
   b5f88:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5f8a:	4604      	mov	r4, r0
      if (_M_manager)
   b5f8c:	b113      	cbz	r3, b5f94 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5f8e:	2203      	movs	r2, #3
   b5f90:	4601      	mov	r1, r0
   b5f92:	4798      	blx	r3
    }
   b5f94:	4620      	mov	r0, r4
   b5f96:	bd10      	pop	{r4, pc}

000b5f98 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5f98:	b513      	push	{r0, r1, r4, lr}
   b5f9a:	460b      	mov	r3, r1
   b5f9c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f9e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5fa2:	466c      	mov	r4, sp
   b5fa4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5fa8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5fac:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5fb0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5fb4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5fb8:	b002      	add	sp, #8
   b5fba:	bd10      	pop	{r4, pc}

000b5fbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5fbc:	4802      	ldr	r0, [pc, #8]	; (b5fc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5fbe:	2300      	movs	r3, #0
   b5fc0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5fc2:	f7ff bd7d 	b.w	b5ac0 <os_mutex_recursive_create>
   b5fc6:	bf00      	nop
   b5fc8:	2003e6c4 	.word	0x2003e6c4

000b5fcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5fcc:	4770      	bx	lr

000b5fce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5fce:	2000      	movs	r0, #0
   b5fd0:	4770      	bx	lr

000b5fd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5fd2:	b510      	push	{r4, lr}
   b5fd4:	2110      	movs	r1, #16
   b5fd6:	4604      	mov	r4, r0
   b5fd8:	f7fe ffed 	bl	b4fb6 <_ZdlPvj>
   b5fdc:	4620      	mov	r0, r4
   b5fde:	bd10      	pop	{r4, pc}

000b5fe0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5fe0:	b508      	push	{r3, lr}
      { delete this; }
   b5fe2:	f7ff fff6 	bl	b5fd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5fe6:	bd08      	pop	{r3, pc}

000b5fe8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5fe8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5fea:	2200      	movs	r2, #0
   b5fec:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5ff0:	6002      	str	r2, [r0, #0]
   b5ff2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5ff4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ff6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5ff8:	680c      	ldr	r4, [r1, #0]
   b5ffa:	8085      	strh	r5, [r0, #4]
   b5ffc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ffe:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6000:	bd30      	pop	{r4, r5, pc}

000b6002 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6002:	b510      	push	{r4, lr}
   b6004:	4604      	mov	r4, r0
    free((void*)msg_);
   b6006:	6800      	ldr	r0, [r0, #0]
   b6008:	f7ff ff6e 	bl	b5ee8 <free>
}
   b600c:	4620      	mov	r0, r4
   b600e:	bd10      	pop	{r4, pc}

000b6010 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6010:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6012:	68c4      	ldr	r4, [r0, #12]
   b6014:	b1f4      	cbz	r4, b6054 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6016:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6018:	2b02      	cmp	r3, #2
   b601a:	d103      	bne.n	b6024 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b601c:	f104 000c 	add.w	r0, r4, #12
   b6020:	f7ff ffef 	bl	b6002 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6024:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6026:	b135      	cbz	r5, b6036 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6028:	4628      	mov	r0, r5
   b602a:	f7ff ffac 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
   b602e:	2110      	movs	r1, #16
   b6030:	4628      	mov	r0, r5
   b6032:	f7fe ffc0 	bl	b4fb6 <_ZdlPvj>
   b6036:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6038:	b135      	cbz	r5, b6048 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b603a:	4628      	mov	r0, r5
   b603c:	f7ff ffa3 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
   b6040:	2110      	movs	r1, #16
   b6042:	4628      	mov	r0, r5
   b6044:	f7fe ffb7 	bl	b4fb6 <_ZdlPvj>
   b6048:	4620      	mov	r0, r4
   b604a:	2114      	movs	r1, #20
   b604c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6050:	f7fe bfb1 	b.w	b4fb6 <_ZdlPvj>
   b6054:	bd38      	pop	{r3, r4, r5, pc}

000b6056 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6056:	680b      	ldr	r3, [r1, #0]
   b6058:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b605a:	684b      	ldr	r3, [r1, #4]
   b605c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b605e:	b113      	cbz	r3, b6066 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6060:	685a      	ldr	r2, [r3, #4]
   b6062:	3201      	adds	r2, #1
   b6064:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6066:	4770      	bx	lr

000b6068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6068:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b606a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b606c:	4668      	mov	r0, sp
   b606e:	460d      	mov	r5, r1
   b6070:	f7ff fff1 	bl	b6056 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6074:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6076:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6078:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b607a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b607c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b607e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6080:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6082:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6084:	f7fe ffa1 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6088:	b135      	cbz	r5, b6098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b608a:	1d28      	adds	r0, r5, #4
   b608c:	f7fe ff9d 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6090:	2108      	movs	r1, #8
   b6092:	4628      	mov	r0, r5
   b6094:	f7fe ff8f 	bl	b4fb6 <_ZdlPvj>
        return p;
    }
   b6098:	4620      	mov	r0, r4
   b609a:	b003      	add	sp, #12
   b609c:	bd30      	pop	{r4, r5, pc}

000b609e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b609e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b60a0:	b510      	push	{r4, lr}
      if (_M_empty())
   b60a2:	b90a      	cbnz	r2, b60a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b60a4:	f001 f828 	bl	b70f8 <_ZSt25__throw_bad_function_callv>
    }
   b60a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b60ac:	68c3      	ldr	r3, [r0, #12]
   b60ae:	4718      	bx	r3

000b60b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b60b0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b60b2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b60b4:	f100 0110 	add.w	r1, r0, #16
   b60b8:	f7ff fff1 	bl	b609e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b60bc:	bd08      	pop	{r3, pc}

000b60be <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b60be:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b60c0:	b510      	push	{r4, lr}
      if (_M_empty())
   b60c2:	b90a      	cbnz	r2, b60c8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b60c4:	f001 f818 	bl	b70f8 <_ZSt25__throw_bad_function_callv>
    }
   b60c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b60cc:	68c3      	ldr	r3, [r0, #12]
   b60ce:	4718      	bx	r3

000b60d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b60d0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b60d2:	6800      	ldr	r0, [r0, #0]
   b60d4:	f100 0110 	add.w	r1, r0, #16
   b60d8:	f7ff fff1 	bl	b60be <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b60dc:	bd08      	pop	{r3, pc}
	...

000b60e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b60e0:	b538      	push	{r3, r4, r5, lr}
   b60e2:	2300      	movs	r3, #0
   b60e4:	4604      	mov	r4, r0
   b60e6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b60e8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b60ea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b60ec:	f7fe ff5f 	bl	b4fae <_Znwj>
   b60f0:	b128      	cbz	r0, b60fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b60f2:	2301      	movs	r3, #1
   b60f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b60f8:	4b02      	ldr	r3, [pc, #8]	; (b6104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b60fa:	6003      	str	r3, [r0, #0]
   b60fc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b60fe:	6020      	str	r0, [r4, #0]
	}
   b6100:	4620      	mov	r0, r4
   b6102:	bd38      	pop	{r3, r4, r5, pc}
   b6104:	000b8460 	.word	0x000b8460

000b6108 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6108:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b610a:	2300      	movs	r3, #0
   b610c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b610e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6110:	4604      	mov	r4, r0
   b6112:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6114:	b12b      	cbz	r3, b6122 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6116:	2202      	movs	r2, #2
   b6118:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b611a:	68eb      	ldr	r3, [r5, #12]
   b611c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b611e:	68ab      	ldr	r3, [r5, #8]
   b6120:	60a3      	str	r3, [r4, #8]
    }
   b6122:	4620      	mov	r0, r4
   b6124:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6128:	b5f0      	push	{r4, r5, r6, r7, lr}
   b612a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b612c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b612e:	4668      	mov	r0, sp
   b6130:	f7ff ff5a 	bl	b5fe8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6134:	f04f 0302 	mov.w	r3, #2
   b6138:	e8d4 2f4f 	ldrexb	r2, [r4]
   b613c:	2a00      	cmp	r2, #0
   b613e:	d103      	bne.n	b6148 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6140:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6144:	2900      	cmp	r1, #0
   b6146:	d1f7      	bne.n	b6138 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6148:	d125      	bne.n	b6196 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b614a:	f104 050c 	add.w	r5, r4, #12
   b614e:	4669      	mov	r1, sp
   b6150:	4628      	mov	r0, r5
   b6152:	f7ff ff49 	bl	b5fe8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6156:	f3bf 8f5b 	dmb	ish
   b615a:	2301      	movs	r3, #1
   b615c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b615e:	2000      	movs	r0, #0
   b6160:	f104 0308 	add.w	r3, r4, #8
   b6164:	f3bf 8f5b 	dmb	ish
   b6168:	e853 6f00 	ldrex	r6, [r3]
   b616c:	e843 0200 	strex	r2, r0, [r3]
   b6170:	2a00      	cmp	r2, #0
   b6172:	d1f9      	bne.n	b6168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6174:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6178:	b16e      	cbz	r6, b6196 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b617a:	f7ff fe09 	bl	b5d90 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b617e:	b178      	cbz	r0, b61a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6180:	4629      	mov	r1, r5
   b6182:	4630      	mov	r0, r6
   b6184:	f7ff ff8b 	bl	b609e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6188:	4630      	mov	r0, r6
   b618a:	f7ff fefc 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b618e:	2110      	movs	r1, #16
   b6190:	4630      	mov	r0, r6
   b6192:	f7fe ff10 	bl	b4fb6 <_ZdlPvj>
        p_->setError(std::move(error));
   b6196:	4668      	mov	r0, sp
   b6198:	f7ff ff33 	bl	b6002 <_ZN8particle5ErrorD1Ev>
    }
   b619c:	b009      	add	sp, #36	; 0x24
   b619e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b61a0:	4631      	mov	r1, r6
   b61a2:	a802      	add	r0, sp, #8
   b61a4:	f7ff ffb0 	bl	b6108 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b61a8:	68e0      	ldr	r0, [r4, #12]
   b61aa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b61ae:	b108      	cbz	r0, b61b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b61b0:	f002 f876 	bl	b82a0 <strdup>
        type_(type) {
   b61b4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b61b6:	2010      	movs	r0, #16
   b61b8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b61bc:	f7fe fef7 	bl	b4fae <_Znwj>
   b61c0:	4605      	mov	r5, r0
   b61c2:	b1e8      	cbz	r0, b6200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b61c4:	2700      	movs	r7, #0
   b61c6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b61c8:	2018      	movs	r0, #24
   b61ca:	f7fe fef0 	bl	b4fae <_Znwj>
   b61ce:	4604      	mov	r4, r0
   b61d0:	b188      	cbz	r0, b61f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b61d2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b61d4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b61d6:	a802      	add	r0, sp, #8
   b61d8:	f7ff fede 	bl	b5f98 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61dc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b61de:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b61e0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b61e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b61e4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b61e6:	a906      	add	r1, sp, #24
   b61e8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b61ea:	60e3      	str	r3, [r4, #12]
   b61ec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b61f0:	9205      	str	r2, [sp, #20]
   b61f2:	f7ff fef9 	bl	b5fe8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b61f6:	4b08      	ldr	r3, [pc, #32]	; (b6218 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b61f8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b61fa:	4b08      	ldr	r3, [pc, #32]	; (b621c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b61fc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b61fe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6200:	a806      	add	r0, sp, #24
   b6202:	f7ff fefe 	bl	b6002 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6206:	a802      	add	r0, sp, #8
   b6208:	f7ff febd 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b620c:	2200      	movs	r2, #0
   b620e:	4629      	mov	r1, r5
   b6210:	4803      	ldr	r0, [pc, #12]	; (b6220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6212:	f7ff fdc5 	bl	b5da0 <application_thread_invoke>
   b6216:	e7b7      	b.n	b6188 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6218:	000b60b1 	.word	0x000b60b1
   b621c:	000b6335 	.word	0x000b6335
   b6220:	000b5f5f 	.word	0x000b5f5f

000b6224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6228:	b08b      	sub	sp, #44	; 0x2c
   b622a:	4605      	mov	r5, r0
   b622c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6230:	460f      	mov	r7, r1
   b6232:	4690      	mov	r8, r2
   b6234:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6236:	f7ff fdd7 	bl	b5de8 <spark_cloud_flag_connected>
   b623a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b623c:	4683      	mov	fp, r0
   b623e:	bb38      	cbnz	r0, b6290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6240:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6244:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6246:	a905      	add	r1, sp, #20
   b6248:	4630      	mov	r0, r6
   b624a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b624e:	f7ff fecb 	bl	b5fe8 <_ZN8particle5ErrorC1EOS0_>
   b6252:	2014      	movs	r0, #20
   b6254:	f7fe feab 	bl	b4fae <_Znwj>
   b6258:	4604      	mov	r4, r0
   b625a:	b148      	cbz	r0, b6270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b625c:	2302      	movs	r3, #2
   b625e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6260:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6262:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6266:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6268:	4631      	mov	r1, r6
   b626a:	300c      	adds	r0, #12
   b626c:	f7ff febc 	bl	b5fe8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6270:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6272:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6274:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6278:	f7ff ff32 	bl	b60e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b627c:	4630      	mov	r0, r6
   b627e:	f7ff fec0 	bl	b6002 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6282:	a805      	add	r0, sp, #20
   b6284:	f7ff febd 	bl	b6002 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6288:	4628      	mov	r0, r5
   b628a:	b00b      	add	sp, #44	; 0x2c
   b628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6290:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6292:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6294:	2014      	movs	r0, #20
   b6296:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b629a:	9307      	str	r3, [sp, #28]
   b629c:	f7fe fe87 	bl	b4fae <_Znwj>
   b62a0:	4601      	mov	r1, r0
   b62a2:	b118      	cbz	r0, b62ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b62a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b62a8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b62aa:	7044      	strb	r4, [r0, #1]
   b62ac:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b62ae:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b62b0:	f7ff ff16 	bl	b60e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b62b4:	4b1e      	ldr	r3, [pc, #120]	; (b6330 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b62b6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b62b8:	2008      	movs	r0, #8
   b62ba:	f7fe fe78 	bl	b4fae <_Znwj>
   b62be:	4604      	mov	r4, r0
   b62c0:	b110      	cbz	r0, b62c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b62c2:	a903      	add	r1, sp, #12
   b62c4:	f7ff fec7 	bl	b6056 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b62c8:	9600      	str	r6, [sp, #0]
   b62ca:	fa5f f38a 	uxtb.w	r3, sl
   b62ce:	464a      	mov	r2, r9
   b62d0:	4641      	mov	r1, r8
   b62d2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b62d4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b62d6:	f7ff fd8f 	bl	b5df8 <spark_send_event>
   b62da:	b9b8      	cbnz	r0, b630c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b62dc:	9b03      	ldr	r3, [sp, #12]
   b62de:	785b      	ldrb	r3, [r3, #1]
   b62e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b62e4:	b993      	cbnz	r3, b630c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b62e6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b62ea:	a905      	add	r1, sp, #20
   b62ec:	a803      	add	r0, sp, #12
   b62ee:	9205      	str	r2, [sp, #20]
   b62f0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b62f4:	f7ff ff18 	bl	b6128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b62f8:	a805      	add	r0, sp, #20
   b62fa:	f7ff fe82 	bl	b6002 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b62fe:	a805      	add	r0, sp, #20
   b6300:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6302:	f7ff feb1 	bl	b6068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6306:	a806      	add	r0, sp, #24
   b6308:	f7fe fe5f 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b630c:	a903      	add	r1, sp, #12
   b630e:	a805      	add	r0, sp, #20
   b6310:	f7ff fea1 	bl	b6056 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6314:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6316:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6318:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b631a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b631c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b631e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6320:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6322:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6324:	f7fe fe51 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6328:	a804      	add	r0, sp, #16
   b632a:	f7fe fe4e 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b632e:	e7ab      	b.n	b6288 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6330:	000b63b1 	.word	0x000b63b1

000b6334 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6334:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6338:	4605      	mov	r5, r0
	switch (__op)
   b633a:	d103      	bne.n	b6344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b633c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b633e:	6003      	str	r3, [r0, #0]
      }
   b6340:	2000      	movs	r0, #0
   b6342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6344:	2a02      	cmp	r2, #2
   b6346:	d010      	beq.n	b636a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6348:	2a03      	cmp	r2, #3
   b634a:	d1f9      	bne.n	b6340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b634c:	6804      	ldr	r4, [r0, #0]
   b634e:	2c00      	cmp	r4, #0
   b6350:	d0f6      	beq.n	b6340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6352:	f104 0010 	add.w	r0, r4, #16
   b6356:	f7ff fe54 	bl	b6002 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b635a:	4620      	mov	r0, r4
   b635c:	f7ff fe13 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6360:	2118      	movs	r1, #24
   b6362:	4620      	mov	r0, r4
   b6364:	f7fe fe27 	bl	b4fb6 <_ZdlPvj>
   b6368:	e7ea      	b.n	b6340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b636a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b636c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b636e:	f7fe fe1e 	bl	b4fae <_Znwj>
   b6372:	4604      	mov	r4, r0
   b6374:	b150      	cbz	r0, b638c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6376:	4631      	mov	r1, r6
   b6378:	f7ff fec6 	bl	b6108 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b637c:	6930      	ldr	r0, [r6, #16]
   b637e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6382:	b108      	cbz	r0, b6388 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6384:	f001 ff8c 	bl	b82a0 <strdup>
        type_(type) {
   b6388:	6120      	str	r0, [r4, #16]
   b638a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b638c:	602c      	str	r4, [r5, #0]
	}
   b638e:	e7d7      	b.n	b6340 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6390 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6390:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6392:	2300      	movs	r3, #0
   b6394:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6396:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6398:	4604      	mov	r4, r0
   b639a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b639c:	b12b      	cbz	r3, b63aa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b639e:	2202      	movs	r2, #2
   b63a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b63a2:	68eb      	ldr	r3, [r5, #12]
   b63a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b63a6:	68ab      	ldr	r3, [r5, #8]
   b63a8:	60a3      	str	r3, [r4, #8]
    }
   b63aa:	4620      	mov	r0, r4
   b63ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b63b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b63b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b63b2:	b089      	sub	sp, #36	; 0x24
   b63b4:	4604      	mov	r4, r0
   b63b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b63b8:	a801      	add	r0, sp, #4
   b63ba:	4611      	mov	r1, r2
   b63bc:	f7ff fe54 	bl	b6068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b63c0:	b1a4      	cbz	r4, b63ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b63c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b63c4:	b11d      	cbz	r5, b63ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b63c6:	4628      	mov	r0, r5
   b63c8:	f001 ff6a 	bl	b82a0 <strdup>
   b63cc:	4605      	mov	r5, r0
   b63ce:	a801      	add	r0, sp, #4
   b63d0:	a903      	add	r1, sp, #12
        type_(type) {
   b63d2:	9503      	str	r5, [sp, #12]
   b63d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b63d8:	f7ff fea6 	bl	b6128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b63dc:	a803      	add	r0, sp, #12
   b63de:	f7ff fe10 	bl	b6002 <_ZN8particle5ErrorD1Ev>
   b63e2:	a802      	add	r0, sp, #8
   b63e4:	f7fe fdf1 	bl	b4fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b63e8:	b009      	add	sp, #36	; 0x24
   b63ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b63ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b63ee:	2301      	movs	r3, #1
   b63f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b63f4:	2a00      	cmp	r2, #0
   b63f6:	d103      	bne.n	b6400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b63f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b63fc:	2900      	cmp	r1, #0
   b63fe:	d1f7      	bne.n	b63f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6400:	d1ef      	bne.n	b63e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6402:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6404:	f3bf 8f5b 	dmb	ish
   b6408:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b640a:	1d2b      	adds	r3, r5, #4
   b640c:	f3bf 8f5b 	dmb	ish
   b6410:	e853 6f00 	ldrex	r6, [r3]
   b6414:	e843 4200 	strex	r2, r4, [r3]
   b6418:	2a00      	cmp	r2, #0
   b641a:	d1f9      	bne.n	b6410 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b641c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6420:	2e00      	cmp	r6, #0
   b6422:	d0de      	beq.n	b63e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6424:	4620      	mov	r0, r4
   b6426:	f7ff fcb3 	bl	b5d90 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b642a:	4607      	mov	r7, r0
   b642c:	b160      	cbz	r0, b6448 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b642e:	f105 010c 	add.w	r1, r5, #12
   b6432:	4630      	mov	r0, r6
   b6434:	f7ff fe43 	bl	b60be <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6438:	4630      	mov	r0, r6
   b643a:	f7ff fda4 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b643e:	2110      	movs	r1, #16
   b6440:	4630      	mov	r0, r6
   b6442:	f7fe fdb8 	bl	b4fb6 <_ZdlPvj>
   b6446:	e7cc      	b.n	b63e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6448:	4631      	mov	r1, r6
   b644a:	a803      	add	r0, sp, #12
   b644c:	f7ff ffa0 	bl	b6390 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6450:	7b2b      	ldrb	r3, [r5, #12]
   b6452:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6456:	2010      	movs	r0, #16
   b6458:	f7fe fda9 	bl	b4fae <_Znwj>
   b645c:	4605      	mov	r5, r0
   b645e:	b1d0      	cbz	r0, b6496 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6460:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6462:	2014      	movs	r0, #20
   b6464:	f7fe fda3 	bl	b4fae <_Znwj>
   b6468:	4604      	mov	r4, r0
   b646a:	b178      	cbz	r0, b648c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b646c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b646e:	4601      	mov	r1, r0
   b6470:	a803      	add	r0, sp, #12
   b6472:	f7ff fd91 	bl	b5f98 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6476:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6478:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b647a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b647c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b647e:	9205      	str	r2, [sp, #20]
   b6480:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6482:	60e3      	str	r3, [r4, #12]
   b6484:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6488:	9206      	str	r2, [sp, #24]
   b648a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b648c:	4b06      	ldr	r3, [pc, #24]	; (b64a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b648e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6490:	4b06      	ldr	r3, [pc, #24]	; (b64ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6492:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6494:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6496:	a803      	add	r0, sp, #12
   b6498:	f7ff fd75 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b649c:	2200      	movs	r2, #0
   b649e:	4629      	mov	r1, r5
   b64a0:	4803      	ldr	r0, [pc, #12]	; (b64b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b64a2:	f7ff fc7d 	bl	b5da0 <application_thread_invoke>
   b64a6:	e7c7      	b.n	b6438 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b64a8:	000b60d1 	.word	0x000b60d1
   b64ac:	000b64b5 	.word	0x000b64b5
   b64b0:	000b5f5f 	.word	0x000b5f5f

000b64b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b64b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b64b6:	b570      	push	{r4, r5, r6, lr}
   b64b8:	4604      	mov	r4, r0
	switch (__op)
   b64ba:	d103      	bne.n	b64c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b64bc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b64be:	6003      	str	r3, [r0, #0]
      }
   b64c0:	2000      	movs	r0, #0
   b64c2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b64c4:	2a02      	cmp	r2, #2
   b64c6:	d00c      	beq.n	b64e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b64c8:	2a03      	cmp	r2, #3
   b64ca:	d1f9      	bne.n	b64c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b64cc:	6804      	ldr	r4, [r0, #0]
   b64ce:	2c00      	cmp	r4, #0
   b64d0:	d0f6      	beq.n	b64c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b64d2:	4620      	mov	r0, r4
   b64d4:	f7ff fd57 	bl	b5f86 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b64d8:	2114      	movs	r1, #20
   b64da:	4620      	mov	r0, r4
   b64dc:	f7fe fd6b 	bl	b4fb6 <_ZdlPvj>
   b64e0:	e7ee      	b.n	b64c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b64e2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b64e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b64e6:	f7fe fd62 	bl	b4fae <_Znwj>
   b64ea:	4605      	mov	r5, r0
   b64ec:	b120      	cbz	r0, b64f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b64ee:	4631      	mov	r1, r6
   b64f0:	f7ff ff4e 	bl	b6390 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b64f4:	7c33      	ldrb	r3, [r6, #16]
   b64f6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b64f8:	6025      	str	r5, [r4, #0]
	}
   b64fa:	e7e1      	b.n	b64c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b64fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b64fc:	2200      	movs	r2, #0
   b64fe:	6840      	ldr	r0, [r0, #4]
   b6500:	4611      	mov	r1, r2
   b6502:	f7ff bcc1 	b.w	b5e88 <network_listening>

000b6506 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6506:	2200      	movs	r2, #0
   b6508:	6840      	ldr	r0, [r0, #4]
   b650a:	4611      	mov	r1, r2
   b650c:	f7ff bccc 	b.w	b5ea8 <network_get_listen_timeout>

000b6510 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6510:	6840      	ldr	r0, [r0, #4]
   b6512:	2200      	movs	r2, #0
   b6514:	f7ff bcc0 	b.w	b5e98 <network_set_listen_timeout>

000b6518 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6518:	6840      	ldr	r0, [r0, #4]
   b651a:	2200      	movs	r2, #0
   b651c:	f081 0101 	eor.w	r1, r1, #1
   b6520:	f7ff bcaa 	b.w	b5e78 <network_listen>

000b6524 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6524:	2300      	movs	r3, #0
   b6526:	6840      	ldr	r0, [r0, #4]
   b6528:	461a      	mov	r2, r3
   b652a:	4619      	mov	r1, r3
   b652c:	f7ff bc9c 	b.w	b5e68 <network_off>

000b6530 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6530:	2300      	movs	r3, #0
   b6532:	6840      	ldr	r0, [r0, #4]
   b6534:	461a      	mov	r2, r3
   b6536:	4619      	mov	r1, r3
   b6538:	f7ff bc8e 	b.w	b5e58 <network_on>

000b653c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b653c:	2200      	movs	r2, #0
   b653e:	6840      	ldr	r0, [r0, #4]
   b6540:	4611      	mov	r1, r2
   b6542:	f7ff bc81 	b.w	b5e48 <network_ready>

000b6546 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6546:	2200      	movs	r2, #0
   b6548:	6840      	ldr	r0, [r0, #4]
   b654a:	4611      	mov	r1, r2
   b654c:	f7ff bc6c 	b.w	b5e28 <network_connecting>

000b6550 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6550:	6840      	ldr	r0, [r0, #4]
   b6552:	2200      	movs	r2, #0
   b6554:	2102      	movs	r1, #2
   b6556:	f7ff bc6f 	b.w	b5e38 <network_disconnect>

000b655a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b655a:	2300      	movs	r3, #0
   b655c:	6840      	ldr	r0, [r0, #4]
   b655e:	461a      	mov	r2, r3
   b6560:	f7ff bc5a 	b.w	b5e18 <network_connect>

000b6564 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6564:	4b02      	ldr	r3, [pc, #8]	; (b6570 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6566:	2203      	movs	r2, #3
   b6568:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b656a:	4a02      	ldr	r2, [pc, #8]	; (b6574 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b656c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b656e:	4770      	bx	lr
   b6570:	2003e6c8 	.word	0x2003e6c8
   b6574:	000b847c 	.word	0x000b847c

000b6578 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6578:	4770      	bx	lr

000b657a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b657a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b657c:	4606      	mov	r6, r0
   b657e:	4615      	mov	r5, r2
   b6580:	460c      	mov	r4, r1
   b6582:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6584:	42bc      	cmp	r4, r7
   b6586:	d006      	beq.n	b6596 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6588:	6833      	ldr	r3, [r6, #0]
   b658a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b658e:	689b      	ldr	r3, [r3, #8]
   b6590:	4630      	mov	r0, r6
   b6592:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6594:	e7f6      	b.n	b6584 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6596:	4628      	mov	r0, r5
   b6598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b659a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b659a:	7c00      	ldrb	r0, [r0, #16]
   b659c:	2200      	movs	r2, #0
   b659e:	f7ff badf 	b.w	b5b60 <hal_i2c_write>

000b65a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b65a2:	7c00      	ldrb	r0, [r0, #16]
   b65a4:	2100      	movs	r1, #0
   b65a6:	f7ff bae3 	b.w	b5b70 <hal_i2c_available>

000b65aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b65aa:	7c00      	ldrb	r0, [r0, #16]
   b65ac:	2100      	movs	r1, #0
   b65ae:	f7ff bae7 	b.w	b5b80 <hal_i2c_read>

000b65b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b65b2:	7c00      	ldrb	r0, [r0, #16]
   b65b4:	2100      	movs	r1, #0
   b65b6:	f7ff baeb 	b.w	b5b90 <hal_i2c_peek>

000b65ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b65ba:	7c00      	ldrb	r0, [r0, #16]
   b65bc:	2100      	movs	r1, #0
   b65be:	f7ff baef 	b.w	b5ba0 <hal_i2c_flush>

000b65c2 <_ZN7TwoWireD0Ev>:
   b65c2:	b510      	push	{r4, lr}
   b65c4:	2114      	movs	r1, #20
   b65c6:	4604      	mov	r4, r0
   b65c8:	f7fe fcf5 	bl	b4fb6 <_ZdlPvj>
   b65cc:	4620      	mov	r0, r4
   b65ce:	bd10      	pop	{r4, pc}

000b65d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65d0:	b538      	push	{r3, r4, r5, lr}
   b65d2:	4604      	mov	r4, r0
   b65d4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b65d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65da:	2200      	movs	r2, #0
   b65dc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65e0:	4b09      	ldr	r3, [pc, #36]	; (b6608 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b65e2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65e4:	4608      	mov	r0, r1
   b65e6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b65e8:	4629      	mov	r1, r5
   b65ea:	f7ff fae9 	bl	b5bc0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65ee:	30bf      	adds	r0, #191	; 0xbf
   b65f0:	d108      	bne.n	b6604 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b65f2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b65f4:	07db      	lsls	r3, r3, #31
   b65f6:	d505      	bpl.n	b6604 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b65f8:	6868      	ldr	r0, [r5, #4]
   b65fa:	f7ff fc75 	bl	b5ee8 <free>
    free(conf.tx_buffer);
   b65fe:	68e8      	ldr	r0, [r5, #12]
   b6600:	f7ff fc72 	bl	b5ee8 <free>
}
   b6604:	4620      	mov	r0, r4
   b6606:	bd38      	pop	{r3, r4, r5, pc}
   b6608:	000b84b8 	.word	0x000b84b8

000b660c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b660c:	2300      	movs	r3, #0
   b660e:	7c00      	ldrb	r0, [r0, #16]
   b6610:	461a      	mov	r2, r3
   b6612:	4619      	mov	r1, r3
   b6614:	f7ff ba8c 	b.w	b5b30 <hal_i2c_begin>

000b6618 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b661a:	2200      	movs	r2, #0
   b661c:	2314      	movs	r3, #20
   b661e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6622:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6626:	780b      	ldrb	r3, [r1, #0]
   b6628:	f88d 3008 	strb.w	r3, [sp, #8]
   b662c:	684b      	ldr	r3, [r1, #4]
   b662e:	9303      	str	r3, [sp, #12]
   b6630:	68cb      	ldr	r3, [r1, #12]
   b6632:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6634:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6636:	7a0b      	ldrb	r3, [r1, #8]
   b6638:	9305      	str	r3, [sp, #20]
   b663a:	a901      	add	r1, sp, #4
   b663c:	f7ff fac8 	bl	b5bd0 <hal_i2c_request_ex>
}
   b6640:	b007      	add	sp, #28
   b6642:	f85d fb04 	ldr.w	pc, [sp], #4

000b6646 <_ZN7TwoWire11requestFromEhjh>:
{
   b6646:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6648:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b664a:	f88d 1000 	strb.w	r1, [sp]
   b664e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6652:	9103      	str	r1, [sp, #12]
   b6654:	bf18      	it	ne
   b6656:	2301      	movne	r3, #1
   b6658:	4669      	mov	r1, sp
    size_ = size;
   b665a:	9201      	str	r2, [sp, #4]
   b665c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6660:	f7ff ffda 	bl	b6618 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6664:	b005      	add	sp, #20
   b6666:	f85d fb04 	ldr.w	pc, [sp], #4

000b666a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b666a:	2301      	movs	r3, #1
   b666c:	f7ff bfeb 	b.w	b6646 <_ZN7TwoWire11requestFromEhjh>

000b6670 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6670:	7c00      	ldrb	r0, [r0, #16]
   b6672:	2200      	movs	r2, #0
   b6674:	f7ff ba64 	b.w	b5b40 <hal_i2c_begin_transmission>

000b6678 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6678:	7c00      	ldrb	r0, [r0, #16]
   b667a:	2200      	movs	r2, #0
   b667c:	f7ff ba68 	b.w	b5b50 <hal_i2c_end_transmission>

000b6680 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6680:	2101      	movs	r1, #1
   b6682:	f7ff bff9 	b.w	b6678 <_ZN7TwoWire15endTransmissionEh>

000b6686 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6686:	4770      	bx	lr

000b6688 <_ZN9IPAddressD0Ev>:
   b6688:	b510      	push	{r4, lr}
   b668a:	2118      	movs	r1, #24
   b668c:	4604      	mov	r4, r0
   b668e:	f7fe fc92 	bl	b4fb6 <_ZdlPvj>
   b6692:	4620      	mov	r0, r4
   b6694:	bd10      	pop	{r4, pc}

000b6696 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6696:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6698:	7d03      	ldrb	r3, [r0, #20]
   b669a:	2b06      	cmp	r3, #6
{
   b669c:	b08d      	sub	sp, #52	; 0x34
   b669e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66a0:	f100 0704 	add.w	r7, r0, #4
   b66a4:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b66a8:	d012      	beq.n	b66d0 <_ZNK9IPAddress7printToER5Print+0x3a>
   b66aa:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b66ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b66b2:	220a      	movs	r2, #10
   b66b4:	4630      	mov	r0, r6
   b66b6:	f000 f954 	bl	b6962 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b66ba:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b66bc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b66be:	d019      	beq.n	b66f4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b66c0:	2c00      	cmp	r4, #0
   b66c2:	d0f4      	beq.n	b66ae <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b66c4:	212e      	movs	r1, #46	; 0x2e
   b66c6:	4630      	mov	r0, r6
   b66c8:	f000 f93c 	bl	b6944 <_ZN5Print5printEc>
   b66cc:	4404      	add	r4, r0
   b66ce:	e7ee      	b.n	b66ae <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66d0:	232f      	movs	r3, #47	; 0x2f
   b66d2:	466a      	mov	r2, sp
   b66d4:	4639      	mov	r1, r7
   b66d6:	200a      	movs	r0, #10
		buf[0] = 0;
   b66d8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66dc:	f7ff fa80 	bl	b5be0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b66e0:	4668      	mov	r0, sp
   b66e2:	f7fe fc21 	bl	b4f28 <strlen>
   b66e6:	6833      	ldr	r3, [r6, #0]
   b66e8:	4602      	mov	r2, r0
   b66ea:	68db      	ldr	r3, [r3, #12]
   b66ec:	4669      	mov	r1, sp
   b66ee:	4630      	mov	r0, r6
   b66f0:	4798      	blx	r3
   b66f2:	4604      	mov	r4, r0
    }
    return n;
}
   b66f4:	4620      	mov	r0, r4
   b66f6:	b00d      	add	sp, #52	; 0x34
   b66f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b66fc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b66fc:	b510      	push	{r4, lr}
   b66fe:	4b05      	ldr	r3, [pc, #20]	; (b6714 <_ZN9IPAddressC1Ev+0x18>)
   b6700:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6702:	2211      	movs	r2, #17
   b6704:	f840 3b04 	str.w	r3, [r0], #4
   b6708:	2100      	movs	r1, #0
   b670a:	f001 fd93 	bl	b8234 <memset>
}
   b670e:	4620      	mov	r0, r4
   b6710:	bd10      	pop	{r4, pc}
   b6712:	bf00      	nop
   b6714:	000b84e0 	.word	0x000b84e0

000b6718 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6718:	4603      	mov	r3, r0
   b671a:	4a07      	ldr	r2, [pc, #28]	; (b6738 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b671c:	b510      	push	{r4, lr}
   b671e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6722:	f101 0210 	add.w	r2, r1, #16
   b6726:	f851 4b04 	ldr.w	r4, [r1], #4
   b672a:	f843 4b04 	str.w	r4, [r3], #4
   b672e:	4291      	cmp	r1, r2
   b6730:	d1f9      	bne.n	b6726 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6732:	780a      	ldrb	r2, [r1, #0]
   b6734:	701a      	strb	r2, [r3, #0]
}
   b6736:	bd10      	pop	{r4, pc}
   b6738:	000b84e0 	.word	0x000b84e0

000b673c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b673c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b673e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6742:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6746:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b674a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b674e:	2304      	movs	r3, #4
   b6750:	6041      	str	r1, [r0, #4]
   b6752:	7503      	strb	r3, [r0, #20]
}
   b6754:	bd10      	pop	{r4, pc}
	...

000b6758 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6758:	b507      	push	{r0, r1, r2, lr}
   b675a:	4b06      	ldr	r3, [pc, #24]	; (b6774 <_ZN9IPAddressC1EPKh+0x1c>)
   b675c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b675e:	78cb      	ldrb	r3, [r1, #3]
   b6760:	9300      	str	r3, [sp, #0]
   b6762:	788b      	ldrb	r3, [r1, #2]
   b6764:	784a      	ldrb	r2, [r1, #1]
   b6766:	7809      	ldrb	r1, [r1, #0]
   b6768:	f7ff ffe8 	bl	b673c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b676c:	b003      	add	sp, #12
   b676e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6772:	bf00      	nop
   b6774:	000b84e0 	.word	0x000b84e0

000b6778 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6778:	4b01      	ldr	r3, [pc, #4]	; (b6780 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b677a:	4a02      	ldr	r2, [pc, #8]	; (b6784 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b677c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b677e:	4770      	bx	lr
   b6780:	2003e6d0 	.word	0x2003e6d0
   b6784:	000b84ec 	.word	0x000b84ec

000b6788 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6788:	2300      	movs	r3, #0
   b678a:	6840      	ldr	r0, [r0, #4]
   b678c:	461a      	mov	r2, r3
   b678e:	f7ff bb43 	b.w	b5e18 <network_connect>

000b6792 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6792:	6840      	ldr	r0, [r0, #4]
   b6794:	2200      	movs	r2, #0
   b6796:	2102      	movs	r1, #2
   b6798:	f7ff bb4e 	b.w	b5e38 <network_disconnect>

000b679c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b679c:	2200      	movs	r2, #0
   b679e:	6840      	ldr	r0, [r0, #4]
   b67a0:	4611      	mov	r1, r2
   b67a2:	f7ff bb41 	b.w	b5e28 <network_connecting>

000b67a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b67a6:	2200      	movs	r2, #0
   b67a8:	6840      	ldr	r0, [r0, #4]
   b67aa:	4611      	mov	r1, r2
   b67ac:	f7ff bb4c 	b.w	b5e48 <network_ready>

000b67b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b67b0:	2300      	movs	r3, #0
   b67b2:	6840      	ldr	r0, [r0, #4]
   b67b4:	461a      	mov	r2, r3
   b67b6:	4619      	mov	r1, r3
   b67b8:	f7ff bb4e 	b.w	b5e58 <network_on>

000b67bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b67bc:	2300      	movs	r3, #0
   b67be:	6840      	ldr	r0, [r0, #4]
   b67c0:	461a      	mov	r2, r3
   b67c2:	4619      	mov	r1, r3
   b67c4:	f7ff bb50 	b.w	b5e68 <network_off>

000b67c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b67c8:	6840      	ldr	r0, [r0, #4]
   b67ca:	2100      	movs	r1, #0
   b67cc:	f7ff bb74 	b.w	b5eb8 <network_is_on>

000b67d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b67d0:	6840      	ldr	r0, [r0, #4]
   b67d2:	2100      	movs	r1, #0
   b67d4:	f7ff bb78 	b.w	b5ec8 <network_is_off>

000b67d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b67d8:	6840      	ldr	r0, [r0, #4]
   b67da:	2200      	movs	r2, #0
   b67dc:	f081 0101 	eor.w	r1, r1, #1
   b67e0:	f7ff bb4a 	b.w	b5e78 <network_listen>

000b67e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b67e4:	6840      	ldr	r0, [r0, #4]
   b67e6:	2200      	movs	r2, #0
   b67e8:	f7ff bb56 	b.w	b5e98 <network_set_listen_timeout>

000b67ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b67ec:	2200      	movs	r2, #0
   b67ee:	6840      	ldr	r0, [r0, #4]
   b67f0:	4611      	mov	r1, r2
   b67f2:	f7ff bb59 	b.w	b5ea8 <network_get_listen_timeout>

000b67f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b67f6:	2200      	movs	r2, #0
   b67f8:	6840      	ldr	r0, [r0, #4]
   b67fa:	4611      	mov	r1, r2
   b67fc:	f7ff bb44 	b.w	b5e88 <network_listening>

000b6800 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6804:	b095      	sub	sp, #84	; 0x54
   b6806:	4614      	mov	r4, r2
   b6808:	460d      	mov	r5, r1
   b680a:	4607      	mov	r7, r0
    IPAddress addr;
   b680c:	f7ff ff76 	bl	b66fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6810:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6812:	221c      	movs	r2, #28
   b6814:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6816:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6818:	f001 fd0c 	bl	b8234 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b681c:	2340      	movs	r3, #64	; 0x40
   b681e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6820:	4620      	mov	r0, r4
   b6822:	466b      	mov	r3, sp
   b6824:	aa0c      	add	r2, sp, #48	; 0x30
   b6826:	2100      	movs	r1, #0
   b6828:	f7ff f9ea 	bl	b5c00 <netdb_getaddrinfo>
    if (!r) {
   b682c:	4604      	mov	r4, r0
   b682e:	2800      	cmp	r0, #0
   b6830:	d14b      	bne.n	b68ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6832:	4602      	mov	r2, r0
   b6834:	2101      	movs	r1, #1
   b6836:	6868      	ldr	r0, [r5, #4]
   b6838:	f7ff fb06 	bl	b5e48 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b683c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b683e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6840:	4622      	mov	r2, r4
   b6842:	6868      	ldr	r0, [r5, #4]
   b6844:	f7ff fb00 	bl	b5e48 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6848:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b684a:	4681      	mov	r9, r0
        bool ok = false;
   b684c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b684e:	2e00      	cmp	r6, #0
   b6850:	d03b      	beq.n	b68ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6852:	2900      	cmp	r1, #0
   b6854:	d139      	bne.n	b68ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6856:	6873      	ldr	r3, [r6, #4]
   b6858:	2b02      	cmp	r3, #2
   b685a:	d003      	beq.n	b6864 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b685c:	2b0a      	cmp	r3, #10
   b685e:	d011      	beq.n	b6884 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6860:	69f6      	ldr	r6, [r6, #28]
   b6862:	e7f4      	b.n	b684e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6864:	f1b8 0f00 	cmp.w	r8, #0
   b6868:	d0fa      	beq.n	b6860 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b686a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b686c:	a806      	add	r0, sp, #24
   b686e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6870:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6872:	f7ff ff71 	bl	b6758 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6878:	1d3c      	adds	r4, r7, #4
   b687a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b687c:	682b      	ldr	r3, [r5, #0]
   b687e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6880:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6882:	e7ed      	b.n	b6860 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6884:	f1b9 0f00 	cmp.w	r9, #0
   b6888:	d0ea      	beq.n	b6860 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b688a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b688c:	2210      	movs	r2, #16
   b688e:	a801      	add	r0, sp, #4
   b6890:	f001 fcd0 	bl	b8234 <memset>
                    a.v = 6;
   b6894:	2306      	movs	r3, #6
   b6896:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b689a:	ad01      	add	r5, sp, #4
   b689c:	f104 0308 	add.w	r3, r4, #8
   b68a0:	3418      	adds	r4, #24
   b68a2:	6818      	ldr	r0, [r3, #0]
   b68a4:	6859      	ldr	r1, [r3, #4]
   b68a6:	462a      	mov	r2, r5
   b68a8:	c203      	stmia	r2!, {r0, r1}
   b68aa:	3308      	adds	r3, #8
   b68ac:	42a3      	cmp	r3, r4
   b68ae:	4615      	mov	r5, r2
   b68b0:	d1f7      	bne.n	b68a2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b68b2:	a901      	add	r1, sp, #4
   b68b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b68b6:	ad07      	add	r5, sp, #28
   b68b8:	f7ff ff2e 	bl	b6718 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b68bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68be:	1d3c      	adds	r4, r7, #4
   b68c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68c2:	682b      	ldr	r3, [r5, #0]
   b68c4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68c6:	4649      	mov	r1, r9
   b68c8:	e7ca      	b.n	b6860 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b68ca:	9800      	ldr	r0, [sp, #0]
   b68cc:	f7ff f990 	bl	b5bf0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b68d0:	4638      	mov	r0, r7
   b68d2:	b015      	add	sp, #84	; 0x54
   b68d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b68d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b68d8:	4b02      	ldr	r3, [pc, #8]	; (b68e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b68da:	4a03      	ldr	r2, [pc, #12]	; (b68e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b68dc:	601a      	str	r2, [r3, #0]
   b68de:	2200      	movs	r2, #0
   b68e0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b68e2:	4770      	bx	lr
   b68e4:	2003e6d4 	.word	0x2003e6d4
   b68e8:	000b84f8 	.word	0x000b84f8

000b68ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b68ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68ee:	4606      	mov	r6, r0
   b68f0:	460d      	mov	r5, r1
  size_t n = 0;
   b68f2:	188f      	adds	r7, r1, r2
   b68f4:	2400      	movs	r4, #0
  while (size--) {
   b68f6:	42bd      	cmp	r5, r7
   b68f8:	d00c      	beq.n	b6914 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b68fa:	6833      	ldr	r3, [r6, #0]
   b68fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6900:	689b      	ldr	r3, [r3, #8]
   b6902:	4630      	mov	r0, r6
   b6904:	4798      	blx	r3
     if (chunk>=0)
   b6906:	1e03      	subs	r3, r0, #0
   b6908:	db01      	blt.n	b690e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b690a:	441c      	add	r4, r3
  while (size--) {
   b690c:	e7f3      	b.n	b68f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b690e:	2c00      	cmp	r4, #0
   b6910:	bf08      	it	eq
   b6912:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6914:	4620      	mov	r0, r4
   b6916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6918 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6918:	b513      	push	{r0, r1, r4, lr}
   b691a:	4604      	mov	r4, r0
    }
   b691c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b691e:	b159      	cbz	r1, b6938 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6920:	9101      	str	r1, [sp, #4]
   b6922:	f7fe fb01 	bl	b4f28 <strlen>
   b6926:	6823      	ldr	r3, [r4, #0]
   b6928:	9901      	ldr	r1, [sp, #4]
   b692a:	68db      	ldr	r3, [r3, #12]
   b692c:	4602      	mov	r2, r0
   b692e:	4620      	mov	r0, r4
    }
   b6930:	b002      	add	sp, #8
   b6932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6936:	4718      	bx	r3
    }
   b6938:	b002      	add	sp, #8
   b693a:	bd10      	pop	{r4, pc}

000b693c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b693c:	b508      	push	{r3, lr}
  return write(str);
   b693e:	f7ff ffeb 	bl	b6918 <_ZN5Print5writeEPKc>
}
   b6942:	bd08      	pop	{r3, pc}

000b6944 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6944:	6803      	ldr	r3, [r0, #0]
   b6946:	689b      	ldr	r3, [r3, #8]
   b6948:	4718      	bx	r3

000b694a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b694a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b694c:	210d      	movs	r1, #13
{
   b694e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6950:	f7ff fff8 	bl	b6944 <_ZN5Print5printEc>
  n += print('\n');
   b6954:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6956:	4604      	mov	r4, r0
  n += print('\n');
   b6958:	4628      	mov	r0, r5
   b695a:	f7ff fff3 	bl	b6944 <_ZN5Print5printEc>
  return n;
}
   b695e:	4420      	add	r0, r4
   b6960:	bd38      	pop	{r3, r4, r5, pc}

000b6962 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6962:	b530      	push	{r4, r5, lr}
   b6964:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6966:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6968:	2a01      	cmp	r2, #1
  *str = '\0';
   b696a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b696e:	bf98      	it	ls
   b6970:	220a      	movls	r2, #10
   b6972:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6974:	460d      	mov	r5, r1
   b6976:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b697a:	fb01 5312 	mls	r3, r1, r2, r5
   b697e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6982:	2b09      	cmp	r3, #9
   b6984:	bf94      	ite	ls
   b6986:	3330      	addls	r3, #48	; 0x30
   b6988:	3337      	addhi	r3, #55	; 0x37
   b698a:	b2db      	uxtb	r3, r3
  } while(n);
   b698c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b698e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6992:	d9ef      	bls.n	b6974 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6994:	4621      	mov	r1, r4
   b6996:	f7ff ffbf 	bl	b6918 <_ZN5Print5writeEPKc>
}
   b699a:	b00b      	add	sp, #44	; 0x2c
   b699c:	bd30      	pop	{r4, r5, pc}

000b699e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b699e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69a2:	b086      	sub	sp, #24
   b69a4:	af00      	add	r7, sp, #0
   b69a6:	4605      	mov	r5, r0
   b69a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b69aa:	1d38      	adds	r0, r7, #4
   b69ac:	2114      	movs	r1, #20
{
   b69ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   b69b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b69b2:	f7ff faa1 	bl	b5ef8 <vsnprintf>

    if (n<bufsize)
   b69b6:	2813      	cmp	r0, #19
   b69b8:	d80e      	bhi.n	b69d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b69ba:	1d39      	adds	r1, r7, #4
   b69bc:	4628      	mov	r0, r5
   b69be:	f7ff ffab 	bl	b6918 <_ZN5Print5writeEPKc>
   b69c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b69c4:	b11e      	cbz	r6, b69ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b69c6:	4628      	mov	r0, r5
   b69c8:	f7ff ffbf 	bl	b694a <_ZN5Print7printlnEv>
   b69cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b69ce:	4620      	mov	r0, r4
   b69d0:	3718      	adds	r7, #24
   b69d2:	46bd      	mov	sp, r7
   b69d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b69d8:	f100 0308 	add.w	r3, r0, #8
   b69dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b69e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b69e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b69e6:	4622      	mov	r2, r4
   b69e8:	1c41      	adds	r1, r0, #1
   b69ea:	683b      	ldr	r3, [r7, #0]
   b69ec:	4668      	mov	r0, sp
   b69ee:	f7ff fa83 	bl	b5ef8 <vsnprintf>
  return write(str);
   b69f2:	4669      	mov	r1, sp
   b69f4:	4628      	mov	r0, r5
   b69f6:	f7ff ff8f 	bl	b6918 <_ZN5Print5writeEPKc>
   b69fa:	4604      	mov	r4, r0
   b69fc:	46c5      	mov	sp, r8
   b69fe:	e7e1      	b.n	b69c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6a00 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6a00:	4b01      	ldr	r3, [pc, #4]	; (b6a08 <_GLOBAL__sub_I_RGB+0x8>)
   b6a02:	2200      	movs	r2, #0
   b6a04:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6a06:	4770      	bx	lr
   b6a08:	2003e6dc 	.word	0x2003e6dc

000b6a0c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6a0c:	2100      	movs	r1, #0
   b6a0e:	f7ff b937 	b.w	b5c80 <hal_spi_release>

000b6a12 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6a12:	2100      	movs	r1, #0
   b6a14:	f7ff b92c 	b.w	b5c70 <hal_spi_acquire>

000b6a18 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6a18:	b510      	push	{r4, lr}
   b6a1a:	4604      	mov	r4, r0
   b6a1c:	4608      	mov	r0, r1
{
    _spi = spi;
   b6a1e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6a20:	f7ff f906 	bl	b5c30 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6a24:	2300      	movs	r3, #0
   b6a26:	6063      	str	r3, [r4, #4]
}
   b6a28:	4620      	mov	r0, r4
   b6a2a:	bd10      	pop	{r4, pc}

000b6a2c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6a2c:	b513      	push	{r0, r1, r4, lr}
   b6a2e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6a30:	7800      	ldrb	r0, [r0, #0]
   b6a32:	f7ff ffee 	bl	b6a12 <_ZN8SPIClass4lockEv.isra.0>
   b6a36:	b958      	cbnz	r0, b6a50 <_ZN8SPIClass5beginEv+0x24>
   b6a38:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6a3a:	9001      	str	r0, [sp, #4]
   b6a3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6a40:	f7ff f8e6 	bl	b5c10 <hal_spi_begin>
        unlock();
   b6a44:	9801      	ldr	r0, [sp, #4]
    }
}
   b6a46:	b002      	add	sp, #8
   b6a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6a4c:	f7ff bfde 	b.w	b6a0c <_ZN8SPIClass6unlockEv.isra.0>
   b6a50:	b002      	add	sp, #8
   b6a52:	bd10      	pop	{r4, pc}

000b6a54 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6a54:	7800      	ldrb	r0, [r0, #0]
   b6a56:	f7ff bfd9 	b.w	b6a0c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6a5c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6a5c:	0840      	lsrs	r0, r0, #1
{
   b6a5e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6a60:	6018      	str	r0, [r3, #0]
   b6a62:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6a64:	6818      	ldr	r0, [r3, #0]
   b6a66:	4288      	cmp	r0, r1
   b6a68:	b2e5      	uxtb	r5, r4
   b6a6a:	d906      	bls.n	b6a7a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6a6c:	3401      	adds	r4, #1
   b6a6e:	2c08      	cmp	r4, #8
   b6a70:	d002      	beq.n	b6a78 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6a72:	0840      	lsrs	r0, r0, #1
   b6a74:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6a76:	e7f5      	b.n	b6a64 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6a78:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6a7a:	4b02      	ldr	r3, [pc, #8]	; (b6a84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6a7c:	5d5b      	ldrb	r3, [r3, r5]
   b6a7e:	7013      	strb	r3, [r2, #0]
}
   b6a80:	bd30      	pop	{r4, r5, pc}
   b6a82:	bf00      	nop
   b6a84:	000b852c 	.word	0x000b852c

000b6a88 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a8c:	4606      	mov	r6, r0
   b6a8e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6a90:	7800      	ldrb	r0, [r0, #0]
{
   b6a92:	460c      	mov	r4, r1
    CHECK(lock());
   b6a94:	f7ff ffbd 	bl	b6a12 <_ZN8SPIClass4lockEv.isra.0>
   b6a98:	2800      	cmp	r0, #0
   b6a9a:	db1b      	blt.n	b6ad4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6a9c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6a9e:	2214      	movs	r2, #20
   b6aa0:	2100      	movs	r1, #0
   b6aa2:	a809      	add	r0, sp, #36	; 0x24
   b6aa4:	f001 fbc6 	bl	b8234 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6aa8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6aaa:	2200      	movs	r2, #0
   b6aac:	a909      	add	r1, sp, #36	; 0x24
   b6aae:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6ab0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6ab4:	f7ff f8cc 	bl	b5c50 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6ab8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6abc:	b113      	cbz	r3, b6ac4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6abe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6ac2:	b155      	cbz	r5, b6ada <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6ac4:	2700      	movs	r7, #0
   b6ac6:	46b9      	mov	r9, r7
   b6ac8:	46b8      	mov	r8, r7
   b6aca:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6acc:	7923      	ldrb	r3, [r4, #4]
   b6ace:	b15d      	cbz	r5, b6ae8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6ad0:	b1c3      	cbz	r3, b6b04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6ad2:	2000      	movs	r0, #0
}
   b6ad4:	b00f      	add	sp, #60	; 0x3c
   b6ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6ada:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6ade:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6ae2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6ae6:	e7f1      	b.n	b6acc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6ae8:	2b00      	cmp	r3, #0
   b6aea:	d135      	bne.n	b6b58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6aec:	68a3      	ldr	r3, [r4, #8]
   b6aee:	4543      	cmp	r3, r8
   b6af0:	d108      	bne.n	b6b04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6af2:	f88d 9020 	strb.w	r9, [sp, #32]
   b6af6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6afa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6afe:	89a3      	ldrh	r3, [r4, #12]
   b6b00:	429a      	cmp	r2, r3
   b6b02:	d0e6      	beq.n	b6ad2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6b04:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b06:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6b08:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6b0c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6b0e:	ab04      	add	r3, sp, #16
   b6b10:	f10d 020f 	add.w	r2, sp, #15
   b6b14:	f7ff ffa2 	bl	b6a5c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6b18:	7921      	ldrb	r1, [r4, #4]
   b6b1a:	b985      	cbnz	r5, b6b3e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6b1c:	b989      	cbnz	r1, b6b42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b1e:	68a3      	ldr	r3, [r4, #8]
   b6b20:	4543      	cmp	r3, r8
   b6b22:	d30e      	bcc.n	b6b42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6b24:	f88d 9020 	strb.w	r9, [sp, #32]
   b6b28:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6b2c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6b30:	89a3      	ldrh	r3, [r4, #12]
   b6b32:	429a      	cmp	r2, r3
   b6b34:	d105      	bne.n	b6b42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6b36:	9b04      	ldr	r3, [sp, #16]
   b6b38:	4543      	cmp	r3, r8
   b6b3a:	d102      	bne.n	b6b42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6b3c:	e7c9      	b.n	b6ad2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6b3e:	2900      	cmp	r1, #0
   b6b40:	d1f9      	bne.n	b6b36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6b42:	2300      	movs	r3, #0
   b6b44:	9301      	str	r3, [sp, #4]
   b6b46:	7b63      	ldrb	r3, [r4, #13]
   b6b48:	9300      	str	r3, [sp, #0]
   b6b4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6b4e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6b50:	7830      	ldrb	r0, [r6, #0]
   b6b52:	f7ff f885 	bl	b5c60 <hal_spi_set_settings>
   b6b56:	e7bc      	b.n	b6ad2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6b58:	e9cd 5500 	strd	r5, r5, [sp]
   b6b5c:	462b      	mov	r3, r5
   b6b5e:	462a      	mov	r2, r5
   b6b60:	2101      	movs	r1, #1
   b6b62:	e7f5      	b.n	b6b50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6b64 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6b64:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6b66:	7800      	ldrb	r0, [r0, #0]
   b6b68:	f7ff f85a 	bl	b5c20 <hal_spi_transfer>
}
   b6b6c:	b2c0      	uxtb	r0, r0
   b6b6e:	bd08      	pop	{r3, pc}

000b6b70 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6b70:	4b05      	ldr	r3, [pc, #20]	; (b6b88 <_GLOBAL__sub_I_System+0x18>)
   b6b72:	2202      	movs	r2, #2
   b6b74:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6b76:	4b05      	ldr	r3, [pc, #20]	; (b6b8c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6b78:	4a05      	ldr	r2, [pc, #20]	; (b6b90 <_GLOBAL__sub_I_System+0x20>)
   b6b7a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6b7c:	2000      	movs	r0, #0
   b6b7e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6b82:	f7ff b8f5 	b.w	b5d70 <set_system_mode>
   b6b86:	bf00      	nop
   b6b88:	2003e6f8 	.word	0x2003e6f8
   b6b8c:	2003e6ec 	.word	0x2003e6ec
   b6b90:	ffff0000 	.word	0xffff0000

000b6b94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6b94:	4b02      	ldr	r3, [pc, #8]	; (b6ba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6b96:	681a      	ldr	r2, [r3, #0]
   b6b98:	4b02      	ldr	r3, [pc, #8]	; (b6ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6b9a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6b9c:	4770      	bx	lr
   b6b9e:	bf00      	nop
   b6ba0:	2003e5f0 	.word	0x2003e5f0
   b6ba4:	2003e6fc 	.word	0x2003e6fc

000b6ba8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6ba8:	4770      	bx	lr

000b6baa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6baa:	7441      	strb	r1, [r0, #17]
}
   b6bac:	4770      	bx	lr

000b6bae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6bae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6bb0:	7c00      	ldrb	r0, [r0, #16]
   b6bb2:	f7ff f89d 	bl	b5cf0 <hal_usart_available_data_for_write>
}
   b6bb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bba:	bd08      	pop	{r3, pc}

000b6bbc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6bbc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6bbe:	7c00      	ldrb	r0, [r0, #16]
   b6bc0:	f7ff f86e 	bl	b5ca0 <hal_usart_available>
}
   b6bc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bc8:	bd08      	pop	{r3, pc}

000b6bca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6bca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6bcc:	7c00      	ldrb	r0, [r0, #16]
   b6bce:	f7ff f877 	bl	b5cc0 <hal_usart_peek>
}
   b6bd2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bd6:	bd08      	pop	{r3, pc}

000b6bd8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6bd8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6bda:	7c00      	ldrb	r0, [r0, #16]
   b6bdc:	f7ff f868 	bl	b5cb0 <hal_usart_read>
}
   b6be0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6be4:	bd08      	pop	{r3, pc}

000b6be6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6be6:	7c00      	ldrb	r0, [r0, #16]
   b6be8:	f7ff b872 	b.w	b5cd0 <hal_usart_flush>

000b6bec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6bee:	7c45      	ldrb	r5, [r0, #17]
{
   b6bf0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6bf2:	b12d      	cbz	r5, b6c00 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6bf4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6bf6:	b003      	add	sp, #12
   b6bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6bfc:	f7ff b848 	b.w	b5c90 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c00:	7c00      	ldrb	r0, [r0, #16]
   b6c02:	9101      	str	r1, [sp, #4]
   b6c04:	f7ff f874 	bl	b5cf0 <hal_usart_available_data_for_write>
   b6c08:	2800      	cmp	r0, #0
   b6c0a:	9901      	ldr	r1, [sp, #4]
   b6c0c:	dcf2      	bgt.n	b6bf4 <_ZN11USARTSerial5writeEh+0x8>
}
   b6c0e:	4628      	mov	r0, r5
   b6c10:	b003      	add	sp, #12
   b6c12:	bd30      	pop	{r4, r5, pc}

000b6c14 <_ZN11USARTSerialD0Ev>:
   b6c14:	b510      	push	{r4, lr}
   b6c16:	2114      	movs	r1, #20
   b6c18:	4604      	mov	r4, r0
   b6c1a:	f7fe f9cc 	bl	b4fb6 <_ZdlPvj>
   b6c1e:	4620      	mov	r0, r4
   b6c20:	bd10      	pop	{r4, pc}
	...

000b6c24 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6c24:	b510      	push	{r4, lr}
   b6c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c2a:	4604      	mov	r4, r0
   b6c2c:	4608      	mov	r0, r1
   b6c2e:	4611      	mov	r1, r2
   b6c30:	2200      	movs	r2, #0
   b6c32:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6c36:	4b04      	ldr	r3, [pc, #16]	; (b6c48 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6c38:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c3a:	2301      	movs	r3, #1
  _serial = serial;
   b6c3c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c3e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6c40:	f7ff f85e 	bl	b5d00 <hal_usart_init_ex>
}
   b6c44:	4620      	mov	r0, r4
   b6c46:	bd10      	pop	{r4, pc}
   b6c48:	000b8558 	.word	0x000b8558

000b6c4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c4c:	7441      	strb	r1, [r0, #17]
}
   b6c4e:	4770      	bx	lr

000b6c50 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c50:	4770      	bx	lr

000b6c52 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6c52:	4770      	bx	lr

000b6c54 <_ZN9USBSerial4readEv>:
{
   b6c54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6c56:	2100      	movs	r1, #0
   b6c58:	7c00      	ldrb	r0, [r0, #16]
   b6c5a:	f7ff f871 	bl	b5d40 <HAL_USB_USART_Receive_Data>
}
   b6c5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c62:	bd08      	pop	{r3, pc}

000b6c64 <_ZN9USBSerial4peekEv>:
{
   b6c64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6c66:	2101      	movs	r1, #1
   b6c68:	7c00      	ldrb	r0, [r0, #16]
   b6c6a:	f7ff f869 	bl	b5d40 <HAL_USB_USART_Receive_Data>
}
   b6c6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c72:	bd08      	pop	{r3, pc}

000b6c74 <_ZN9USBSerial17availableForWriteEv>:
{
   b6c74:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6c76:	7c00      	ldrb	r0, [r0, #16]
   b6c78:	f7ff f85a 	bl	b5d30 <HAL_USB_USART_Available_Data_For_Write>
}
   b6c7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c80:	bd08      	pop	{r3, pc}

000b6c82 <_ZN9USBSerial9availableEv>:
{
   b6c82:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6c84:	7c00      	ldrb	r0, [r0, #16]
   b6c86:	f7ff f84b 	bl	b5d20 <HAL_USB_USART_Available_Data>
}
   b6c8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c8e:	bd08      	pop	{r3, pc}

000b6c90 <_ZN9USBSerial5writeEh>:
{
   b6c90:	b513      	push	{r0, r1, r4, lr}
   b6c92:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c94:	7c00      	ldrb	r0, [r0, #16]
{
   b6c96:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c98:	f7ff f84a 	bl	b5d30 <HAL_USB_USART_Available_Data_For_Write>
   b6c9c:	2800      	cmp	r0, #0
   b6c9e:	9901      	ldr	r1, [sp, #4]
   b6ca0:	dc01      	bgt.n	b6ca6 <_ZN9USBSerial5writeEh+0x16>
   b6ca2:	7c60      	ldrb	r0, [r4, #17]
   b6ca4:	b120      	cbz	r0, b6cb0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6ca6:	7c20      	ldrb	r0, [r4, #16]
   b6ca8:	f7ff f852 	bl	b5d50 <HAL_USB_USART_Send_Data>
   b6cac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6cb0:	b002      	add	sp, #8
   b6cb2:	bd10      	pop	{r4, pc}

000b6cb4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6cb4:	7c00      	ldrb	r0, [r0, #16]
   b6cb6:	f7ff b853 	b.w	b5d60 <HAL_USB_USART_Flush_Data>

000b6cba <_ZN9USBSerialD0Ev>:
   b6cba:	b510      	push	{r4, lr}
   b6cbc:	2114      	movs	r1, #20
   b6cbe:	4604      	mov	r4, r0
   b6cc0:	f7fe f979 	bl	b4fb6 <_ZdlPvj>
   b6cc4:	4620      	mov	r0, r4
   b6cc6:	bd10      	pop	{r4, pc}

000b6cc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6cc8:	b510      	push	{r4, lr}
   b6cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6cce:	4604      	mov	r4, r0
   b6cd0:	4608      	mov	r0, r1
   b6cd2:	2100      	movs	r1, #0
   b6cd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6cd8:	4b04      	ldr	r3, [pc, #16]	; (b6cec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6cda:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6cdc:	2301      	movs	r3, #1
  _serial = serial;
   b6cde:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6ce0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6ce2:	4611      	mov	r1, r2
   b6ce4:	f7ff f814 	bl	b5d10 <HAL_USB_USART_Init>
}
   b6ce8:	4620      	mov	r0, r4
   b6cea:	bd10      	pop	{r4, pc}
   b6cec:	000b8588 	.word	0x000b8588

000b6cf0 <_Z19acquireSerialBufferv>:
{
   b6cf0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6cf2:	2214      	movs	r2, #20
{
   b6cf4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6cf6:	2100      	movs	r1, #0
   b6cf8:	f001 fa9c 	bl	b8234 <memset>
}
   b6cfc:	4620      	mov	r0, r4
   b6cfe:	bd10      	pop	{r4, pc}

000b6d00 <_Z16_fetch_usbserialv>:
{
   b6d00:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d02:	4c0f      	ldr	r4, [pc, #60]	; (b6d40 <_Z16_fetch_usbserialv+0x40>)
{
   b6d04:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6d06:	a803      	add	r0, sp, #12
   b6d08:	f7ff fff2 	bl	b6cf0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d0c:	7821      	ldrb	r1, [r4, #0]
   b6d0e:	f3bf 8f5b 	dmb	ish
   b6d12:	f011 0101 	ands.w	r1, r1, #1
   b6d16:	d10f      	bne.n	b6d38 <_Z16_fetch_usbserialv+0x38>
   b6d18:	4620      	mov	r0, r4
   b6d1a:	9101      	str	r1, [sp, #4]
   b6d1c:	f7fe f94d 	bl	b4fba <__cxa_guard_acquire>
   b6d20:	9901      	ldr	r1, [sp, #4]
   b6d22:	b148      	cbz	r0, b6d38 <_Z16_fetch_usbserialv+0x38>
   b6d24:	aa03      	add	r2, sp, #12
   b6d26:	4807      	ldr	r0, [pc, #28]	; (b6d44 <_Z16_fetch_usbserialv+0x44>)
   b6d28:	f7ff ffce 	bl	b6cc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6d2c:	4620      	mov	r0, r4
   b6d2e:	f7fe f949 	bl	b4fc4 <__cxa_guard_release>
   b6d32:	4805      	ldr	r0, [pc, #20]	; (b6d48 <_Z16_fetch_usbserialv+0x48>)
   b6d34:	f001 fa6a 	bl	b820c <atexit>
	return _usbserial;
}
   b6d38:	4802      	ldr	r0, [pc, #8]	; (b6d44 <_Z16_fetch_usbserialv+0x44>)
   b6d3a:	b008      	add	sp, #32
   b6d3c:	bd10      	pop	{r4, pc}
   b6d3e:	bf00      	nop
   b6d40:	2003e700 	.word	0x2003e700
   b6d44:	2003e704 	.word	0x2003e704
   b6d48:	000b6c51 	.word	0x000b6c51

000b6d4c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6d4c:	2200      	movs	r2, #0
   b6d4e:	6840      	ldr	r0, [r0, #4]
   b6d50:	4611      	mov	r1, r2
   b6d52:	f7ff b879 	b.w	b5e48 <network_ready>

000b6d56 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6d56:	2200      	movs	r2, #0
   b6d58:	6840      	ldr	r0, [r0, #4]
   b6d5a:	4611      	mov	r1, r2
   b6d5c:	f7ff b894 	b.w	b5e88 <network_listening>

000b6d60 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6d60:	2200      	movs	r2, #0
   b6d62:	6840      	ldr	r0, [r0, #4]
   b6d64:	4611      	mov	r1, r2
   b6d66:	f7ff b89f 	b.w	b5ea8 <network_get_listen_timeout>

000b6d6a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6d6a:	6840      	ldr	r0, [r0, #4]
   b6d6c:	2200      	movs	r2, #0
   b6d6e:	f7ff b893 	b.w	b5e98 <network_set_listen_timeout>

000b6d72 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6d72:	6840      	ldr	r0, [r0, #4]
   b6d74:	2200      	movs	r2, #0
   b6d76:	f081 0101 	eor.w	r1, r1, #1
   b6d7a:	f7ff b87d 	b.w	b5e78 <network_listen>

000b6d7e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6d7e:	2300      	movs	r3, #0
   b6d80:	6840      	ldr	r0, [r0, #4]
   b6d82:	461a      	mov	r2, r3
   b6d84:	4619      	mov	r1, r3
   b6d86:	f7ff b86f 	b.w	b5e68 <network_off>

000b6d8a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6d8a:	2300      	movs	r3, #0
   b6d8c:	6840      	ldr	r0, [r0, #4]
   b6d8e:	461a      	mov	r2, r3
   b6d90:	4619      	mov	r1, r3
   b6d92:	f7ff b861 	b.w	b5e58 <network_on>

000b6d96 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6d96:	2200      	movs	r2, #0
   b6d98:	6840      	ldr	r0, [r0, #4]
   b6d9a:	4611      	mov	r1, r2
   b6d9c:	f7ff b844 	b.w	b5e28 <network_connecting>

000b6da0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6da0:	6840      	ldr	r0, [r0, #4]
   b6da2:	2200      	movs	r2, #0
   b6da4:	2102      	movs	r1, #2
   b6da6:	f7ff b847 	b.w	b5e38 <network_disconnect>

000b6daa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6daa:	2300      	movs	r3, #0
   b6dac:	6840      	ldr	r0, [r0, #4]
   b6dae:	461a      	mov	r2, r3
   b6db0:	f7ff b832 	b.w	b5e18 <network_connect>

000b6db4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6db4:	4b02      	ldr	r3, [pc, #8]	; (b6dc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6db6:	2204      	movs	r2, #4
   b6db8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6dba:	4a02      	ldr	r2, [pc, #8]	; (b6dc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6dbc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6dbe:	4770      	bx	lr
   b6dc0:	2003e718 	.word	0x2003e718
   b6dc4:	000b85b8 	.word	0x000b85b8

000b6dc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6dc8:	4b01      	ldr	r3, [pc, #4]	; (b6dd0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6dca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6dcc:	4770      	bx	lr
   b6dce:	bf00      	nop
   b6dd0:	2003e5f8 	.word	0x2003e5f8

000b6dd4 <serialEventRun>:
{
   b6dd4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6dd6:	4b0b      	ldr	r3, [pc, #44]	; (b6e04 <serialEventRun+0x30>)
   b6dd8:	b143      	cbz	r3, b6dec <serialEventRun+0x18>
   b6dda:	f7ff ff91 	bl	b6d00 <_Z16_fetch_usbserialv>
   b6dde:	6803      	ldr	r3, [r0, #0]
   b6de0:	691b      	ldr	r3, [r3, #16]
   b6de2:	4798      	blx	r3
   b6de4:	2800      	cmp	r0, #0
   b6de6:	dd01      	ble.n	b6dec <serialEventRun+0x18>
        serialEvent();
   b6de8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6dec:	4b06      	ldr	r3, [pc, #24]	; (b6e08 <serialEventRun+0x34>)
   b6dee:	b143      	cbz	r3, b6e02 <serialEventRun+0x2e>
   b6df0:	f000 f95c 	bl	b70ac <_Z22__fetch_global_Serial1v>
   b6df4:	6803      	ldr	r3, [r0, #0]
   b6df6:	691b      	ldr	r3, [r3, #16]
   b6df8:	4798      	blx	r3
   b6dfa:	2800      	cmp	r0, #0
   b6dfc:	dd01      	ble.n	b6e02 <serialEventRun+0x2e>
        serialEvent1();
   b6dfe:	f3af 8000 	nop.w
}
   b6e02:	bd08      	pop	{r3, pc}
	...

000b6e0c <_post_loop>:
{
   b6e0c:	b508      	push	{r3, lr}
	serialEventRun();
   b6e0e:	f7ff ffe1 	bl	b6dd4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6e12:	f7fe fe65 	bl	b5ae0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6e16:	4b01      	ldr	r3, [pc, #4]	; (b6e1c <_post_loop+0x10>)
   b6e18:	6018      	str	r0, [r3, #0]
}
   b6e1a:	bd08      	pop	{r3, pc}
   b6e1c:	2003e728 	.word	0x2003e728

000b6e20 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6e20:	4805      	ldr	r0, [pc, #20]	; (b6e38 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6e22:	4a06      	ldr	r2, [pc, #24]	; (b6e3c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6e24:	4906      	ldr	r1, [pc, #24]	; (b6e40 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6e26:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6e28:	1a12      	subs	r2, r2, r0
   b6e2a:	f001 f9f5 	bl	b8218 <memcpy>
    __backup_sram_signature = signature;
   b6e2e:	4b05      	ldr	r3, [pc, #20]	; (b6e44 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6e30:	4a05      	ldr	r2, [pc, #20]	; (b6e48 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6e32:	601a      	str	r2, [r3, #0]
}
   b6e34:	bd08      	pop	{r3, pc}
   b6e36:	bf00      	nop
   b6e38:	2003f400 	.word	0x2003f400
   b6e3c:	2003f404 	.word	0x2003f404
   b6e40:	000b8738 	.word	0x000b8738
   b6e44:	2003f400 	.word	0x2003f400
   b6e48:	9a271c1e 	.word	0x9a271c1e

000b6e4c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6e4c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6e4e:	2300      	movs	r3, #0
   b6e50:	9300      	str	r3, [sp, #0]
   b6e52:	461a      	mov	r2, r3
   b6e54:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6e58:	f7fe ffb4 	bl	b5dc4 <system_ctrl_set_result>
}
   b6e5c:	b003      	add	sp, #12
   b6e5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6e64 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6e64:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6e66:	8843      	ldrh	r3, [r0, #2]
   b6e68:	2b0a      	cmp	r3, #10
   b6e6a:	d008      	beq.n	b6e7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6e6c:	2b50      	cmp	r3, #80	; 0x50
   b6e6e:	d10b      	bne.n	b6e88 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6e70:	4b09      	ldr	r3, [pc, #36]	; (b6e98 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6e72:	681b      	ldr	r3, [r3, #0]
   b6e74:	b14b      	cbz	r3, b6e8a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6e76:	b003      	add	sp, #12
   b6e78:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6e7c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6e7e:	f7ff ffe5 	bl	b6e4c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6e82:	b003      	add	sp, #12
   b6e84:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6e88:	2300      	movs	r3, #0
   b6e8a:	9300      	str	r3, [sp, #0]
   b6e8c:	461a      	mov	r2, r3
   b6e8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6e92:	f7fe ff97 	bl	b5dc4 <system_ctrl_set_result>
}
   b6e96:	e7f4      	b.n	b6e82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6e98:	2003e724 	.word	0x2003e724

000b6e9c <module_user_init_hook>:
{
   b6e9c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6e9e:	4812      	ldr	r0, [pc, #72]	; (b6ee8 <module_user_init_hook+0x4c>)
   b6ea0:	2100      	movs	r1, #0
   b6ea2:	f7ff f851 	bl	b5f48 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6ea6:	4b11      	ldr	r3, [pc, #68]	; (b6eec <module_user_init_hook+0x50>)
   b6ea8:	681a      	ldr	r2, [r3, #0]
   b6eaa:	4b11      	ldr	r3, [pc, #68]	; (b6ef0 <module_user_init_hook+0x54>)
   b6eac:	429a      	cmp	r2, r3
   b6eae:	4b11      	ldr	r3, [pc, #68]	; (b6ef4 <module_user_init_hook+0x58>)
   b6eb0:	bf0c      	ite	eq
   b6eb2:	2201      	moveq	r2, #1
   b6eb4:	2200      	movne	r2, #0
   b6eb6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6eb8:	d001      	beq.n	b6ebe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6eba:	f7ff ffb1 	bl	b6e20 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6ebe:	f7fe fe07 	bl	b5ad0 <HAL_RNG_GetRandomNumber>
   b6ec2:	4604      	mov	r4, r0
    srand(seed);
   b6ec4:	f001 f9be 	bl	b8244 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6ec8:	4b0b      	ldr	r3, [pc, #44]	; (b6ef8 <module_user_init_hook+0x5c>)
   b6eca:	b113      	cbz	r3, b6ed2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6ecc:	4620      	mov	r0, r4
   b6ece:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6ed2:	2100      	movs	r1, #0
   b6ed4:	4808      	ldr	r0, [pc, #32]	; (b6ef8 <module_user_init_hook+0x5c>)
   b6ed6:	f7fe ff97 	bl	b5e08 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6ede:	4807      	ldr	r0, [pc, #28]	; (b6efc <module_user_init_hook+0x60>)
   b6ee0:	2100      	movs	r1, #0
   b6ee2:	f7fe bf65 	b.w	b5db0 <system_ctrl_set_app_request_handler>
   b6ee6:	bf00      	nop
   b6ee8:	000b6dc9 	.word	0x000b6dc9
   b6eec:	2003f400 	.word	0x2003f400
   b6ef0:	9a271c1e 	.word	0x9a271c1e
   b6ef4:	2003e720 	.word	0x2003e720
   b6ef8:	00000000 	.word	0x00000000
   b6efc:	000b6e65 	.word	0x000b6e65

000b6f00 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6f00:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6f02:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6f04:	d902      	bls.n	b6f0c <pinAvailable+0xc>
    return false;
   b6f06:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6f08:	b002      	add	sp, #8
   b6f0a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6f0c:	f1a0 030b 	sub.w	r3, r0, #11
   b6f10:	2b02      	cmp	r3, #2
   b6f12:	d81a      	bhi.n	b6f4a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6f14:	4c17      	ldr	r4, [pc, #92]	; (b6f74 <pinAvailable+0x74>)
   b6f16:	7821      	ldrb	r1, [r4, #0]
   b6f18:	f3bf 8f5b 	dmb	ish
   b6f1c:	f011 0101 	ands.w	r1, r1, #1
   b6f20:	d10b      	bne.n	b6f3a <pinAvailable+0x3a>
   b6f22:	4620      	mov	r0, r4
   b6f24:	9101      	str	r1, [sp, #4]
   b6f26:	f7fe f848 	bl	b4fba <__cxa_guard_acquire>
   b6f2a:	9901      	ldr	r1, [sp, #4]
   b6f2c:	b128      	cbz	r0, b6f3a <pinAvailable+0x3a>
   b6f2e:	4812      	ldr	r0, [pc, #72]	; (b6f78 <pinAvailable+0x78>)
   b6f30:	f7ff fd72 	bl	b6a18 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6f34:	4620      	mov	r0, r4
   b6f36:	f7fe f845 	bl	b4fc4 <__cxa_guard_release>
   b6f3a:	4b0f      	ldr	r3, [pc, #60]	; (b6f78 <pinAvailable+0x78>)
   b6f3c:	7818      	ldrb	r0, [r3, #0]
   b6f3e:	f7fe fe7f 	bl	b5c40 <hal_spi_is_enabled>
   b6f42:	2800      	cmp	r0, #0
   b6f44:	d1df      	bne.n	b6f06 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6f46:	2001      	movs	r0, #1
   b6f48:	e7de      	b.n	b6f08 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6f4a:	2801      	cmp	r0, #1
   b6f4c:	d809      	bhi.n	b6f62 <pinAvailable+0x62>
   b6f4e:	f000 f86d 	bl	b702c <_Z19__fetch_global_Wirev>
   b6f52:	2100      	movs	r1, #0
   b6f54:	7c00      	ldrb	r0, [r0, #16]
   b6f56:	f7fe fe2b 	bl	b5bb0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6f5a:	f080 0001 	eor.w	r0, r0, #1
   b6f5e:	b2c0      	uxtb	r0, r0
   b6f60:	e7d2      	b.n	b6f08 <pinAvailable+0x8>
   b6f62:	3809      	subs	r0, #9
   b6f64:	2801      	cmp	r0, #1
   b6f66:	d8ee      	bhi.n	b6f46 <pinAvailable+0x46>
   b6f68:	f000 f8a0 	bl	b70ac <_Z22__fetch_global_Serial1v>
   b6f6c:	7c00      	ldrb	r0, [r0, #16]
   b6f6e:	f7fe feb7 	bl	b5ce0 <hal_usart_is_enabled>
   b6f72:	e7f2      	b.n	b6f5a <pinAvailable+0x5a>
   b6f74:	2003e6b8 	.word	0x2003e6b8
   b6f78:	2003e6bc 	.word	0x2003e6bc

000b6f7c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6f7c:	2823      	cmp	r0, #35	; 0x23
{
   b6f7e:	b538      	push	{r3, r4, r5, lr}
   b6f80:	4604      	mov	r4, r0
   b6f82:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6f84:	d80a      	bhi.n	b6f9c <pinMode+0x20>
   b6f86:	29ff      	cmp	r1, #255	; 0xff
   b6f88:	d008      	beq.n	b6f9c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6f8a:	f7ff ffb9 	bl	b6f00 <pinAvailable>
   b6f8e:	b128      	cbz	r0, b6f9c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b6f90:	4629      	mov	r1, r5
   b6f92:	4620      	mov	r0, r4
}
   b6f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b6f98:	f7fe bdaa 	b.w	b5af0 <hal_gpio_mode>
}
   b6f9c:	bd38      	pop	{r3, r4, r5, pc}

000b6f9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b6f9e:	b538      	push	{r3, r4, r5, lr}
   b6fa0:	4604      	mov	r4, r0
   b6fa2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b6fa4:	f7fe fdac 	bl	b5b00 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6fa8:	28ff      	cmp	r0, #255	; 0xff
   b6faa:	d010      	beq.n	b6fce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6fac:	2806      	cmp	r0, #6
   b6fae:	d804      	bhi.n	b6fba <digitalWrite+0x1c>
   b6fb0:	234d      	movs	r3, #77	; 0x4d
   b6fb2:	fa23 f000 	lsr.w	r0, r3, r0
   b6fb6:	07c3      	lsls	r3, r0, #31
   b6fb8:	d409      	bmi.n	b6fce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6fba:	4620      	mov	r0, r4
   b6fbc:	f7ff ffa0 	bl	b6f00 <pinAvailable>
   b6fc0:	b128      	cbz	r0, b6fce <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b6fc2:	4629      	mov	r1, r5
   b6fc4:	4620      	mov	r0, r4
}
   b6fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b6fca:	f7fe bda1 	b.w	b5b10 <hal_gpio_write>
}
   b6fce:	bd38      	pop	{r3, r4, r5, pc}

000b6fd0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b6fd0:	b510      	push	{r4, lr}
   b6fd2:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b6fd4:	f7fe fd94 	bl	b5b00 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6fd8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6fda:	b2db      	uxtb	r3, r3
   b6fdc:	2b01      	cmp	r3, #1
   b6fde:	d908      	bls.n	b6ff2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	f7ff ff8d 	bl	b6f00 <pinAvailable>
   b6fe6:	b120      	cbz	r0, b6ff2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b6fe8:	4620      	mov	r0, r4
}
   b6fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b6fee:	f7fe bd97 	b.w	b5b20 <hal_gpio_read>
}
   b6ff2:	2000      	movs	r0, #0
   b6ff4:	bd10      	pop	{r4, pc}

000b6ff6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ff6:	4770      	bx	lr

000b6ff8 <_Z17acquireWireBufferv>:
{
   b6ff8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6ffa:	4b0a      	ldr	r3, [pc, #40]	; (b7024 <_Z17acquireWireBufferv+0x2c>)
   b6ffc:	6003      	str	r3, [r0, #0]
   b6ffe:	2301      	movs	r3, #1
{
   b7000:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7002:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7004:	4908      	ldr	r1, [pc, #32]	; (b7028 <_Z17acquireWireBufferv+0x30>)
   b7006:	2020      	movs	r0, #32
   b7008:	f000 f874 	bl	b70f4 <_ZnajRKSt9nothrow_t>
	};
   b700c:	2520      	movs	r5, #32
   b700e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7010:	4905      	ldr	r1, [pc, #20]	; (b7028 <_Z17acquireWireBufferv+0x30>)
	};
   b7012:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7014:	4628      	mov	r0, r5
   b7016:	f000 f86d 	bl	b70f4 <_ZnajRKSt9nothrow_t>
	};
   b701a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b701e:	4620      	mov	r0, r4
   b7020:	bd38      	pop	{r3, r4, r5, pc}
   b7022:	bf00      	nop
   b7024:	00010018 	.word	0x00010018
   b7028:	000b85ec 	.word	0x000b85ec

000b702c <_Z19__fetch_global_Wirev>:
{
   b702c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b702e:	4d0e      	ldr	r5, [pc, #56]	; (b7068 <_Z19__fetch_global_Wirev+0x3c>)
   b7030:	7829      	ldrb	r1, [r5, #0]
   b7032:	f3bf 8f5b 	dmb	ish
   b7036:	f011 0401 	ands.w	r4, r1, #1
{
   b703a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b703c:	d111      	bne.n	b7062 <_Z19__fetch_global_Wirev+0x36>
   b703e:	4628      	mov	r0, r5
   b7040:	f7fd ffbb 	bl	b4fba <__cxa_guard_acquire>
   b7044:	b168      	cbz	r0, b7062 <_Z19__fetch_global_Wirev+0x36>
   b7046:	4668      	mov	r0, sp
   b7048:	f7ff ffd6 	bl	b6ff8 <_Z17acquireWireBufferv>
   b704c:	466a      	mov	r2, sp
   b704e:	4621      	mov	r1, r4
   b7050:	4806      	ldr	r0, [pc, #24]	; (b706c <_Z19__fetch_global_Wirev+0x40>)
   b7052:	f7ff fabd 	bl	b65d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7056:	4628      	mov	r0, r5
   b7058:	f7fd ffb4 	bl	b4fc4 <__cxa_guard_release>
   b705c:	4804      	ldr	r0, [pc, #16]	; (b7070 <_Z19__fetch_global_Wirev+0x44>)
   b705e:	f001 f8d5 	bl	b820c <atexit>
	return wire;
}
   b7062:	4802      	ldr	r0, [pc, #8]	; (b706c <_Z19__fetch_global_Wirev+0x40>)
   b7064:	b007      	add	sp, #28
   b7066:	bd30      	pop	{r4, r5, pc}
   b7068:	2003e72c 	.word	0x2003e72c
   b706c:	2003e730 	.word	0x2003e730
   b7070:	000b6ff7 	.word	0x000b6ff7

000b7074 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7074:	4770      	bx	lr
	...

000b7078 <_Z20acquireSerial1Bufferv>:
{
   b7078:	b538      	push	{r3, r4, r5, lr}
   b707a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b707c:	2514      	movs	r5, #20
   b707e:	462a      	mov	r2, r5
   b7080:	2100      	movs	r1, #0
   b7082:	f001 f8d7 	bl	b8234 <memset>
   b7086:	8025      	strh	r5, [r4, #0]
   b7088:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b708a:	4907      	ldr	r1, [pc, #28]	; (b70a8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b708c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b708e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7090:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7092:	f000 f82f 	bl	b70f4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7096:	4904      	ldr	r1, [pc, #16]	; (b70a8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7098:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b709a:	4628      	mov	r0, r5
   b709c:	f000 f82a 	bl	b70f4 <_ZnajRKSt9nothrow_t>
    };
   b70a0:	60e0      	str	r0, [r4, #12]
}
   b70a2:	4620      	mov	r0, r4
   b70a4:	bd38      	pop	{r3, r4, r5, pc}
   b70a6:	bf00      	nop
   b70a8:	000b85ec 	.word	0x000b85ec

000b70ac <_Z22__fetch_global_Serial1v>:
{
   b70ac:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70ae:	4d0e      	ldr	r5, [pc, #56]	; (b70e8 <_Z22__fetch_global_Serial1v+0x3c>)
   b70b0:	7829      	ldrb	r1, [r5, #0]
   b70b2:	f3bf 8f5b 	dmb	ish
   b70b6:	f011 0401 	ands.w	r4, r1, #1
{
   b70ba:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70bc:	d111      	bne.n	b70e2 <_Z22__fetch_global_Serial1v+0x36>
   b70be:	4628      	mov	r0, r5
   b70c0:	f7fd ff7b 	bl	b4fba <__cxa_guard_acquire>
   b70c4:	b168      	cbz	r0, b70e2 <_Z22__fetch_global_Serial1v+0x36>
   b70c6:	a801      	add	r0, sp, #4
   b70c8:	f7ff ffd6 	bl	b7078 <_Z20acquireSerial1Bufferv>
   b70cc:	aa01      	add	r2, sp, #4
   b70ce:	4621      	mov	r1, r4
   b70d0:	4806      	ldr	r0, [pc, #24]	; (b70ec <_Z22__fetch_global_Serial1v+0x40>)
   b70d2:	f7ff fda7 	bl	b6c24 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b70d6:	4628      	mov	r0, r5
   b70d8:	f7fd ff74 	bl	b4fc4 <__cxa_guard_release>
   b70dc:	4804      	ldr	r0, [pc, #16]	; (b70f0 <_Z22__fetch_global_Serial1v+0x44>)
   b70de:	f001 f895 	bl	b820c <atexit>
    return serial1;
}
   b70e2:	4802      	ldr	r0, [pc, #8]	; (b70ec <_Z22__fetch_global_Serial1v+0x40>)
   b70e4:	b007      	add	sp, #28
   b70e6:	bd30      	pop	{r4, r5, pc}
   b70e8:	2003e744 	.word	0x2003e744
   b70ec:	2003e748 	.word	0x2003e748
   b70f0:	000b7075 	.word	0x000b7075

000b70f4 <_ZnajRKSt9nothrow_t>:
   b70f4:	f7fd bf5d 	b.w	b4fb2 <_Znaj>

000b70f8 <_ZSt25__throw_bad_function_callv>:
   b70f8:	b508      	push	{r3, lr}
   b70fa:	f7fe ff05 	bl	b5f08 <abort>
	...

000b7100 <pow>:
   b7100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7102:	ed2d 8b02 	vpush	{d8}
   b7106:	ec57 6b10 	vmov	r6, r7, d0
   b710a:	ec55 4b11 	vmov	r4, r5, d1
   b710e:	f000 f8cb 	bl	b72a8 <__ieee754_pow>
   b7112:	4b63      	ldr	r3, [pc, #396]	; (b72a0 <pow+0x1a0>)
   b7114:	eeb0 8a40 	vmov.f32	s16, s0
   b7118:	eef0 8a60 	vmov.f32	s17, s1
   b711c:	f993 3000 	ldrsb.w	r3, [r3]
   b7120:	3301      	adds	r3, #1
   b7122:	d02a      	beq.n	b717a <pow+0x7a>
   b7124:	4622      	mov	r2, r4
   b7126:	462b      	mov	r3, r5
   b7128:	4620      	mov	r0, r4
   b712a:	4629      	mov	r1, r5
   b712c:	f7fd fbce 	bl	b48cc <__aeabi_dcmpun>
   b7130:	bb18      	cbnz	r0, b717a <pow+0x7a>
   b7132:	4632      	mov	r2, r6
   b7134:	463b      	mov	r3, r7
   b7136:	4630      	mov	r0, r6
   b7138:	4639      	mov	r1, r7
   b713a:	f7fd fbc7 	bl	b48cc <__aeabi_dcmpun>
   b713e:	2800      	cmp	r0, #0
   b7140:	d144      	bne.n	b71cc <pow+0xcc>
   b7142:	2200      	movs	r2, #0
   b7144:	2300      	movs	r3, #0
   b7146:	4630      	mov	r0, r6
   b7148:	4639      	mov	r1, r7
   b714a:	f7fd fb8d 	bl	b4868 <__aeabi_dcmpeq>
   b714e:	b1d8      	cbz	r0, b7188 <pow+0x88>
   b7150:	2200      	movs	r2, #0
   b7152:	2300      	movs	r3, #0
   b7154:	4620      	mov	r0, r4
   b7156:	4629      	mov	r1, r5
   b7158:	f7fd fb86 	bl	b4868 <__aeabi_dcmpeq>
   b715c:	2800      	cmp	r0, #0
   b715e:	d13d      	bne.n	b71dc <pow+0xdc>
   b7160:	ec45 4b10 	vmov	d0, r4, r5
   b7164:	f000 ff10 	bl	b7f88 <finite>
   b7168:	b138      	cbz	r0, b717a <pow+0x7a>
   b716a:	4620      	mov	r0, r4
   b716c:	4629      	mov	r1, r5
   b716e:	2200      	movs	r2, #0
   b7170:	2300      	movs	r3, #0
   b7172:	f7fd fb83 	bl	b487c <__aeabi_dcmplt>
   b7176:	2800      	cmp	r0, #0
   b7178:	d15c      	bne.n	b7234 <pow+0x134>
   b717a:	eeb0 0a48 	vmov.f32	s0, s16
   b717e:	eef0 0a68 	vmov.f32	s1, s17
   b7182:	ecbd 8b02 	vpop	{d8}
   b7186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7188:	eeb0 0a48 	vmov.f32	s0, s16
   b718c:	eef0 0a68 	vmov.f32	s1, s17
   b7190:	f000 fefa 	bl	b7f88 <finite>
   b7194:	b358      	cbz	r0, b71ee <pow+0xee>
   b7196:	ec51 0b18 	vmov	r0, r1, d8
   b719a:	2200      	movs	r2, #0
   b719c:	2300      	movs	r3, #0
   b719e:	f7fd fb63 	bl	b4868 <__aeabi_dcmpeq>
   b71a2:	2800      	cmp	r0, #0
   b71a4:	d0e9      	beq.n	b717a <pow+0x7a>
   b71a6:	ec47 6b10 	vmov	d0, r6, r7
   b71aa:	f000 feed 	bl	b7f88 <finite>
   b71ae:	2800      	cmp	r0, #0
   b71b0:	d0e3      	beq.n	b717a <pow+0x7a>
   b71b2:	ec45 4b10 	vmov	d0, r4, r5
   b71b6:	f000 fee7 	bl	b7f88 <finite>
   b71ba:	2800      	cmp	r0, #0
   b71bc:	d0dd      	beq.n	b717a <pow+0x7a>
   b71be:	f7fe feb3 	bl	b5f28 <__errno>
   b71c2:	2322      	movs	r3, #34	; 0x22
   b71c4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b7280 <pow+0x180>
   b71c8:	6003      	str	r3, [r0, #0]
   b71ca:	e7d6      	b.n	b717a <pow+0x7a>
   b71cc:	4620      	mov	r0, r4
   b71ce:	4629      	mov	r1, r5
   b71d0:	2200      	movs	r2, #0
   b71d2:	2300      	movs	r3, #0
   b71d4:	f7fd fb48 	bl	b4868 <__aeabi_dcmpeq>
   b71d8:	2800      	cmp	r0, #0
   b71da:	d0ce      	beq.n	b717a <pow+0x7a>
   b71dc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b7288 <pow+0x188>
   b71e0:	eeb0 0a48 	vmov.f32	s0, s16
   b71e4:	eef0 0a68 	vmov.f32	s1, s17
   b71e8:	ecbd 8b02 	vpop	{d8}
   b71ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b71ee:	ec47 6b10 	vmov	d0, r6, r7
   b71f2:	f000 fec9 	bl	b7f88 <finite>
   b71f6:	2800      	cmp	r0, #0
   b71f8:	d0cd      	beq.n	b7196 <pow+0x96>
   b71fa:	ec45 4b10 	vmov	d0, r4, r5
   b71fe:	f000 fec3 	bl	b7f88 <finite>
   b7202:	2800      	cmp	r0, #0
   b7204:	d0c7      	beq.n	b7196 <pow+0x96>
   b7206:	ec53 2b18 	vmov	r2, r3, d8
   b720a:	ee18 0a10 	vmov	r0, s16
   b720e:	4619      	mov	r1, r3
   b7210:	f7fd fb5c 	bl	b48cc <__aeabi_dcmpun>
   b7214:	bb20      	cbnz	r0, b7260 <pow+0x160>
   b7216:	f7fe fe87 	bl	b5f28 <__errno>
   b721a:	4603      	mov	r3, r0
   b721c:	2222      	movs	r2, #34	; 0x22
   b721e:	601a      	str	r2, [r3, #0]
   b7220:	4630      	mov	r0, r6
   b7222:	4639      	mov	r1, r7
   b7224:	2200      	movs	r2, #0
   b7226:	2300      	movs	r3, #0
   b7228:	f7fd fb28 	bl	b487c <__aeabi_dcmplt>
   b722c:	b948      	cbnz	r0, b7242 <pow+0x142>
   b722e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b7290 <pow+0x190>
   b7232:	e7a2      	b.n	b717a <pow+0x7a>
   b7234:	f7fe fe78 	bl	b5f28 <__errno>
   b7238:	2321      	movs	r3, #33	; 0x21
   b723a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b7298 <pow+0x198>
   b723e:	6003      	str	r3, [r0, #0]
   b7240:	e79b      	b.n	b717a <pow+0x7a>
   b7242:	ec45 4b10 	vmov	d0, r4, r5
   b7246:	f000 feb3 	bl	b7fb0 <rint>
   b724a:	4622      	mov	r2, r4
   b724c:	ec51 0b10 	vmov	r0, r1, d0
   b7250:	462b      	mov	r3, r5
   b7252:	f7fd fb09 	bl	b4868 <__aeabi_dcmpeq>
   b7256:	2800      	cmp	r0, #0
   b7258:	d1e9      	bne.n	b722e <pow+0x12e>
   b725a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b7298 <pow+0x198>
   b725e:	e78c      	b.n	b717a <pow+0x7a>
   b7260:	f7fe fe62 	bl	b5f28 <__errno>
   b7264:	2200      	movs	r2, #0
   b7266:	2300      	movs	r3, #0
   b7268:	2121      	movs	r1, #33	; 0x21
   b726a:	6001      	str	r1, [r0, #0]
   b726c:	4610      	mov	r0, r2
   b726e:	4619      	mov	r1, r3
   b7270:	f7fd f9bc 	bl	b45ec <__aeabi_ddiv>
   b7274:	ec41 0b18 	vmov	d8, r0, r1
   b7278:	e77f      	b.n	b717a <pow+0x7a>
   b727a:	bf00      	nop
   b727c:	f3af 8000 	nop.w
	...
   b728c:	3ff00000 	.word	0x3ff00000
   b7290:	00000000 	.word	0x00000000
   b7294:	7ff00000 	.word	0x7ff00000
   b7298:	00000000 	.word	0x00000000
   b729c:	fff00000 	.word	0xfff00000
   b72a0:	2003e5f4 	.word	0x2003e5f4
   b72a4:	00000000 	.word	0x00000000

000b72a8 <__ieee754_pow>:
   b72a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b72ac:	ec57 6b11 	vmov	r6, r7, d1
   b72b0:	ed2d 8b0c 	vpush	{d8-d13}
   b72b4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b72b8:	ea5a 0206 	orrs.w	r2, sl, r6
   b72bc:	b087      	sub	sp, #28
   b72be:	d03d      	beq.n	b733c <__ieee754_pow+0x94>
   b72c0:	ec55 4b10 	vmov	r4, r5, d0
   b72c4:	4972      	ldr	r1, [pc, #456]	; (b7490 <__ieee754_pow+0x1e8>)
   b72c6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b72ca:	4588      	cmp	r8, r1
   b72cc:	ee10 2a10 	vmov	r2, s0
   b72d0:	46a9      	mov	r9, r5
   b72d2:	dc2c      	bgt.n	b732e <__ieee754_pow+0x86>
   b72d4:	ee11 3a10 	vmov	r3, s2
   b72d8:	46bb      	mov	fp, r7
   b72da:	d036      	beq.n	b734a <__ieee754_pow+0xa2>
   b72dc:	458a      	cmp	sl, r1
   b72de:	dc26      	bgt.n	b732e <__ieee754_pow+0x86>
   b72e0:	496b      	ldr	r1, [pc, #428]	; (b7490 <__ieee754_pow+0x1e8>)
   b72e2:	458a      	cmp	sl, r1
   b72e4:	d021      	beq.n	b732a <__ieee754_pow+0x82>
   b72e6:	f1b9 0f00 	cmp.w	r9, #0
   b72ea:	db39      	blt.n	b7360 <__ieee754_pow+0xb8>
   b72ec:	2100      	movs	r1, #0
   b72ee:	9100      	str	r1, [sp, #0]
   b72f0:	2b00      	cmp	r3, #0
   b72f2:	d151      	bne.n	b7398 <__ieee754_pow+0xf0>
   b72f4:	4b66      	ldr	r3, [pc, #408]	; (b7490 <__ieee754_pow+0x1e8>)
   b72f6:	459a      	cmp	sl, r3
   b72f8:	f000 80a2 	beq.w	b7440 <__ieee754_pow+0x198>
   b72fc:	4b65      	ldr	r3, [pc, #404]	; (b7494 <__ieee754_pow+0x1ec>)
   b72fe:	459a      	cmp	sl, r3
   b7300:	f000 80b0 	beq.w	b7464 <__ieee754_pow+0x1bc>
   b7304:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b7308:	f000 84c0 	beq.w	b7c8c <__ieee754_pow+0x9e4>
   b730c:	4b62      	ldr	r3, [pc, #392]	; (b7498 <__ieee754_pow+0x1f0>)
   b730e:	459b      	cmp	fp, r3
   b7310:	d142      	bne.n	b7398 <__ieee754_pow+0xf0>
   b7312:	f1b9 0f00 	cmp.w	r9, #0
   b7316:	db3f      	blt.n	b7398 <__ieee754_pow+0xf0>
   b7318:	ec45 4b10 	vmov	d0, r4, r5
   b731c:	b007      	add	sp, #28
   b731e:	ecbd 8b0c 	vpop	{d8-d13}
   b7322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7326:	f000 bd59 	b.w	b7ddc <__ieee754_sqrt>
   b732a:	2b00      	cmp	r3, #0
   b732c:	d0db      	beq.n	b72e6 <__ieee754_pow+0x3e>
   b732e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b7332:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b7336:	ea58 0302 	orrs.w	r3, r8, r2
   b733a:	d109      	bne.n	b7350 <__ieee754_pow+0xa8>
   b733c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b7480 <__ieee754_pow+0x1d8>
   b7340:	b007      	add	sp, #28
   b7342:	ecbd 8b0c 	vpop	{d8-d13}
   b7346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b734a:	b90c      	cbnz	r4, b7350 <__ieee754_pow+0xa8>
   b734c:	45c2      	cmp	sl, r8
   b734e:	ddc7      	ble.n	b72e0 <__ieee754_pow+0x38>
   b7350:	4852      	ldr	r0, [pc, #328]	; (b749c <__ieee754_pow+0x1f4>)
   b7352:	b007      	add	sp, #28
   b7354:	ecbd 8b0c 	vpop	{d8-d13}
   b7358:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b735c:	f000 be20 	b.w	b7fa0 <nan>
   b7360:	494f      	ldr	r1, [pc, #316]	; (b74a0 <__ieee754_pow+0x1f8>)
   b7362:	458a      	cmp	sl, r1
   b7364:	f300 8085 	bgt.w	b7472 <__ieee754_pow+0x1ca>
   b7368:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b736c:	458a      	cmp	sl, r1
   b736e:	dd0f      	ble.n	b7390 <__ieee754_pow+0xe8>
   b7370:	ea4f 512a 	mov.w	r1, sl, asr #20
   b7374:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b7378:	2914      	cmp	r1, #20
   b737a:	f340 849b 	ble.w	b7cb4 <__ieee754_pow+0xa0c>
   b737e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b7382:	fa23 f001 	lsr.w	r0, r3, r1
   b7386:	fa00 f101 	lsl.w	r1, r0, r1
   b738a:	4299      	cmp	r1, r3
   b738c:	f000 84ed 	beq.w	b7d6a <__ieee754_pow+0xac2>
   b7390:	2100      	movs	r1, #0
   b7392:	9100      	str	r1, [sp, #0]
   b7394:	2b00      	cmp	r3, #0
   b7396:	d0b1      	beq.n	b72fc <__ieee754_pow+0x54>
   b7398:	ec45 4b10 	vmov	d0, r4, r5
   b739c:	9202      	str	r2, [sp, #8]
   b739e:	f000 fde9 	bl	b7f74 <fabs>
   b73a2:	9a02      	ldr	r2, [sp, #8]
   b73a4:	bb5a      	cbnz	r2, b73fe <__ieee754_pow+0x156>
   b73a6:	f1b8 0f00 	cmp.w	r8, #0
   b73aa:	d004      	beq.n	b73b6 <__ieee754_pow+0x10e>
   b73ac:	4b39      	ldr	r3, [pc, #228]	; (b7494 <__ieee754_pow+0x1ec>)
   b73ae:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b73b2:	429a      	cmp	r2, r3
   b73b4:	d123      	bne.n	b73fe <__ieee754_pow+0x156>
   b73b6:	f1bb 0f00 	cmp.w	fp, #0
   b73ba:	da07      	bge.n	b73cc <__ieee754_pow+0x124>
   b73bc:	ec53 2b10 	vmov	r2, r3, d0
   b73c0:	4934      	ldr	r1, [pc, #208]	; (b7494 <__ieee754_pow+0x1ec>)
   b73c2:	2000      	movs	r0, #0
   b73c4:	f7fd f912 	bl	b45ec <__aeabi_ddiv>
   b73c8:	ec41 0b10 	vmov	d0, r0, r1
   b73cc:	f1b9 0f00 	cmp.w	r9, #0
   b73d0:	dab6      	bge.n	b7340 <__ieee754_pow+0x98>
   b73d2:	9b00      	ldr	r3, [sp, #0]
   b73d4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b73d8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b73dc:	ea58 0303 	orrs.w	r3, r8, r3
   b73e0:	f040 848d 	bne.w	b7cfe <__ieee754_pow+0xa56>
   b73e4:	ec53 2b10 	vmov	r2, r3, d0
   b73e8:	4610      	mov	r0, r2
   b73ea:	4619      	mov	r1, r3
   b73ec:	f7fc fe1c 	bl	b4028 <__aeabi_dsub>
   b73f0:	4602      	mov	r2, r0
   b73f2:	460b      	mov	r3, r1
   b73f4:	f7fd f8fa 	bl	b45ec <__aeabi_ddiv>
   b73f8:	ec41 0b10 	vmov	d0, r0, r1
   b73fc:	e7a0      	b.n	b7340 <__ieee754_pow+0x98>
   b73fe:	9a00      	ldr	r2, [sp, #0]
   b7400:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b7404:	3b01      	subs	r3, #1
   b7406:	9304      	str	r3, [sp, #16]
   b7408:	4313      	orrs	r3, r2
   b740a:	d035      	beq.n	b7478 <__ieee754_pow+0x1d0>
   b740c:	4b25      	ldr	r3, [pc, #148]	; (b74a4 <__ieee754_pow+0x1fc>)
   b740e:	459a      	cmp	sl, r3
   b7410:	dd4c      	ble.n	b74ac <__ieee754_pow+0x204>
   b7412:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b7416:	459a      	cmp	sl, r3
   b7418:	4b23      	ldr	r3, [pc, #140]	; (b74a8 <__ieee754_pow+0x200>)
   b741a:	f340 83db 	ble.w	b7bd4 <__ieee754_pow+0x92c>
   b741e:	4598      	cmp	r8, r3
   b7420:	f340 8360 	ble.w	b7ae4 <__ieee754_pow+0x83c>
   b7424:	f1bb 0f00 	cmp.w	fp, #0
   b7428:	f340 8360 	ble.w	b7aec <__ieee754_pow+0x844>
   b742c:	a316      	add	r3, pc, #88	; (adr r3, b7488 <__ieee754_pow+0x1e0>)
   b742e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7432:	4610      	mov	r0, r2
   b7434:	4619      	mov	r1, r3
   b7436:	f7fc ffaf 	bl	b4398 <__aeabi_dmul>
   b743a:	ec41 0b10 	vmov	d0, r0, r1
   b743e:	e77f      	b.n	b7340 <__ieee754_pow+0x98>
   b7440:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b7444:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b7448:	4313      	orrs	r3, r2
   b744a:	f43f af77 	beq.w	b733c <__ieee754_pow+0x94>
   b744e:	4b16      	ldr	r3, [pc, #88]	; (b74a8 <__ieee754_pow+0x200>)
   b7450:	4598      	cmp	r8, r3
   b7452:	f340 837a 	ble.w	b7b4a <__ieee754_pow+0x8a2>
   b7456:	f1bb 0f00 	cmp.w	fp, #0
   b745a:	f2c0 8347 	blt.w	b7aec <__ieee754_pow+0x844>
   b745e:	ec47 6b10 	vmov	d0, r6, r7
   b7462:	e76d      	b.n	b7340 <__ieee754_pow+0x98>
   b7464:	f1bb 0f00 	cmp.w	fp, #0
   b7468:	f2c0 841a 	blt.w	b7ca0 <__ieee754_pow+0x9f8>
   b746c:	ec45 4b10 	vmov	d0, r4, r5
   b7470:	e766      	b.n	b7340 <__ieee754_pow+0x98>
   b7472:	2102      	movs	r1, #2
   b7474:	9100      	str	r1, [sp, #0]
   b7476:	e73b      	b.n	b72f0 <__ieee754_pow+0x48>
   b7478:	4622      	mov	r2, r4
   b747a:	462b      	mov	r3, r5
   b747c:	e7b4      	b.n	b73e8 <__ieee754_pow+0x140>
   b747e:	bf00      	nop
   b7480:	00000000 	.word	0x00000000
   b7484:	3ff00000 	.word	0x3ff00000
   b7488:	8800759c 	.word	0x8800759c
   b748c:	7e37e43c 	.word	0x7e37e43c
   b7490:	7ff00000 	.word	0x7ff00000
   b7494:	3ff00000 	.word	0x3ff00000
   b7498:	3fe00000 	.word	0x3fe00000
   b749c:	000b85f0 	.word	0x000b85f0
   b74a0:	433fffff 	.word	0x433fffff
   b74a4:	41e00000 	.word	0x41e00000
   b74a8:	3fefffff 	.word	0x3fefffff
   b74ac:	4be4      	ldr	r3, [pc, #912]	; (b7840 <__ieee754_pow+0x598>)
   b74ae:	ea09 0303 	and.w	r3, r9, r3
   b74b2:	2200      	movs	r2, #0
   b74b4:	b953      	cbnz	r3, b74cc <__ieee754_pow+0x224>
   b74b6:	ec51 0b10 	vmov	r0, r1, d0
   b74ba:	4be2      	ldr	r3, [pc, #904]	; (b7844 <__ieee754_pow+0x59c>)
   b74bc:	f7fc ff6c 	bl	b4398 <__aeabi_dmul>
   b74c0:	ec41 0b10 	vmov	d0, r0, r1
   b74c4:	ee10 8a90 	vmov	r8, s1
   b74c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b74cc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b74d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b74d4:	189a      	adds	r2, r3, r2
   b74d6:	4bdc      	ldr	r3, [pc, #880]	; (b7848 <__ieee754_pow+0x5a0>)
   b74d8:	9205      	str	r2, [sp, #20]
   b74da:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b74de:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b74e2:	4598      	cmp	r8, r3
   b74e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b74e8:	dd07      	ble.n	b74fa <__ieee754_pow+0x252>
   b74ea:	4bd8      	ldr	r3, [pc, #864]	; (b784c <__ieee754_pow+0x5a4>)
   b74ec:	4598      	cmp	r8, r3
   b74ee:	f340 8414 	ble.w	b7d1a <__ieee754_pow+0xa72>
   b74f2:	3201      	adds	r2, #1
   b74f4:	9205      	str	r2, [sp, #20]
   b74f6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b74fa:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b77e0 <__ieee754_pow+0x538>
   b74fe:	ed9f 7bba 	vldr	d7, [pc, #744]	; b77e8 <__ieee754_pow+0x540>
   b7502:	ec53 2b16 	vmov	r2, r3, d6
   b7506:	eeb0 ca47 	vmov.f32	s24, s14
   b750a:	eef0 ca67 	vmov.f32	s25, s15
   b750e:	2500      	movs	r5, #0
   b7510:	eeb0 da47 	vmov.f32	s26, s14
   b7514:	eef0 da67 	vmov.f32	s27, s15
   b7518:	ec5b ab10 	vmov	sl, fp, d0
   b751c:	46a3      	mov	fp, r4
   b751e:	4650      	mov	r0, sl
   b7520:	4659      	mov	r1, fp
   b7522:	ec43 2b1a 	vmov	d10, r2, r3
   b7526:	f7fc fd7f 	bl	b4028 <__aeabi_dsub>
   b752a:	ec53 2b1a 	vmov	r2, r3, d10
   b752e:	4680      	mov	r8, r0
   b7530:	4689      	mov	r9, r1
   b7532:	4650      	mov	r0, sl
   b7534:	4659      	mov	r1, fp
   b7536:	f7fc fd79 	bl	b402c <__adddf3>
   b753a:	4602      	mov	r2, r0
   b753c:	460b      	mov	r3, r1
   b753e:	2000      	movs	r0, #0
   b7540:	49c3      	ldr	r1, [pc, #780]	; (b7850 <__ieee754_pow+0x5a8>)
   b7542:	f7fd f853 	bl	b45ec <__aeabi_ddiv>
   b7546:	ec41 0b1b 	vmov	d11, r0, r1
   b754a:	4640      	mov	r0, r8
   b754c:	ec53 2b1b 	vmov	r2, r3, d11
   b7550:	4649      	mov	r1, r9
   b7552:	f7fc ff21 	bl	b4398 <__aeabi_dmul>
   b7556:	ec41 0b18 	vmov	d8, r0, r1
   b755a:	460a      	mov	r2, r1
   b755c:	4601      	mov	r1, r0
   b755e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b7562:	2100      	movs	r1, #0
   b7564:	9102      	str	r1, [sp, #8]
   b7566:	1064      	asrs	r4, r4, #1
   b7568:	ec4b ab19 	vmov	d9, sl, fp
   b756c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b7570:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b7574:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b7578:	2000      	movs	r0, #0
   b757a:	1959      	adds	r1, r3, r5
   b757c:	4604      	mov	r4, r0
   b757e:	460d      	mov	r5, r1
   b7580:	4602      	mov	r2, r0
   b7582:	460b      	mov	r3, r1
   b7584:	4650      	mov	r0, sl
   b7586:	4659      	mov	r1, fp
   b7588:	f7fc ff06 	bl	b4398 <__aeabi_dmul>
   b758c:	4602      	mov	r2, r0
   b758e:	460b      	mov	r3, r1
   b7590:	4640      	mov	r0, r8
   b7592:	4649      	mov	r1, r9
   b7594:	f7fc fd48 	bl	b4028 <__aeabi_dsub>
   b7598:	ec53 2b1a 	vmov	r2, r3, d10
   b759c:	4680      	mov	r8, r0
   b759e:	4689      	mov	r9, r1
   b75a0:	4620      	mov	r0, r4
   b75a2:	4629      	mov	r1, r5
   b75a4:	f7fc fd40 	bl	b4028 <__aeabi_dsub>
   b75a8:	4602      	mov	r2, r0
   b75aa:	460b      	mov	r3, r1
   b75ac:	ec51 0b19 	vmov	r0, r1, d9
   b75b0:	f7fc fd3a 	bl	b4028 <__aeabi_dsub>
   b75b4:	4652      	mov	r2, sl
   b75b6:	465b      	mov	r3, fp
   b75b8:	f7fc feee 	bl	b4398 <__aeabi_dmul>
   b75bc:	4602      	mov	r2, r0
   b75be:	460b      	mov	r3, r1
   b75c0:	4640      	mov	r0, r8
   b75c2:	4649      	mov	r1, r9
   b75c4:	f7fc fd30 	bl	b4028 <__aeabi_dsub>
   b75c8:	ec53 2b1b 	vmov	r2, r3, d11
   b75cc:	f7fc fee4 	bl	b4398 <__aeabi_dmul>
   b75d0:	ec53 2b18 	vmov	r2, r3, d8
   b75d4:	ec41 0b19 	vmov	d9, r0, r1
   b75d8:	ec51 0b18 	vmov	r0, r1, d8
   b75dc:	f7fc fedc 	bl	b4398 <__aeabi_dmul>
   b75e0:	a383      	add	r3, pc, #524	; (adr r3, b77f0 <__ieee754_pow+0x548>)
   b75e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75e6:	4604      	mov	r4, r0
   b75e8:	460d      	mov	r5, r1
   b75ea:	f7fc fed5 	bl	b4398 <__aeabi_dmul>
   b75ee:	a382      	add	r3, pc, #520	; (adr r3, b77f8 <__ieee754_pow+0x550>)
   b75f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75f4:	f7fc fd1a 	bl	b402c <__adddf3>
   b75f8:	4622      	mov	r2, r4
   b75fa:	462b      	mov	r3, r5
   b75fc:	f7fc fecc 	bl	b4398 <__aeabi_dmul>
   b7600:	a37f      	add	r3, pc, #508	; (adr r3, b7800 <__ieee754_pow+0x558>)
   b7602:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7606:	f7fc fd11 	bl	b402c <__adddf3>
   b760a:	4622      	mov	r2, r4
   b760c:	462b      	mov	r3, r5
   b760e:	f7fc fec3 	bl	b4398 <__aeabi_dmul>
   b7612:	a37d      	add	r3, pc, #500	; (adr r3, b7808 <__ieee754_pow+0x560>)
   b7614:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7618:	f7fc fd08 	bl	b402c <__adddf3>
   b761c:	4622      	mov	r2, r4
   b761e:	462b      	mov	r3, r5
   b7620:	f7fc feba 	bl	b4398 <__aeabi_dmul>
   b7624:	a37a      	add	r3, pc, #488	; (adr r3, b7810 <__ieee754_pow+0x568>)
   b7626:	e9d3 2300 	ldrd	r2, r3, [r3]
   b762a:	f7fc fcff 	bl	b402c <__adddf3>
   b762e:	4622      	mov	r2, r4
   b7630:	462b      	mov	r3, r5
   b7632:	f7fc feb1 	bl	b4398 <__aeabi_dmul>
   b7636:	a378      	add	r3, pc, #480	; (adr r3, b7818 <__ieee754_pow+0x570>)
   b7638:	e9d3 2300 	ldrd	r2, r3, [r3]
   b763c:	f7fc fcf6 	bl	b402c <__adddf3>
   b7640:	4622      	mov	r2, r4
   b7642:	4680      	mov	r8, r0
   b7644:	4689      	mov	r9, r1
   b7646:	462b      	mov	r3, r5
   b7648:	4620      	mov	r0, r4
   b764a:	4629      	mov	r1, r5
   b764c:	f7fc fea4 	bl	b4398 <__aeabi_dmul>
   b7650:	4602      	mov	r2, r0
   b7652:	460b      	mov	r3, r1
   b7654:	4640      	mov	r0, r8
   b7656:	4649      	mov	r1, r9
   b7658:	f7fc fe9e 	bl	b4398 <__aeabi_dmul>
   b765c:	4652      	mov	r2, sl
   b765e:	4604      	mov	r4, r0
   b7660:	460d      	mov	r5, r1
   b7662:	465b      	mov	r3, fp
   b7664:	ec51 0b18 	vmov	r0, r1, d8
   b7668:	f7fc fce0 	bl	b402c <__adddf3>
   b766c:	ec53 2b19 	vmov	r2, r3, d9
   b7670:	f7fc fe92 	bl	b4398 <__aeabi_dmul>
   b7674:	4622      	mov	r2, r4
   b7676:	462b      	mov	r3, r5
   b7678:	f7fc fcd8 	bl	b402c <__adddf3>
   b767c:	4652      	mov	r2, sl
   b767e:	4680      	mov	r8, r0
   b7680:	4689      	mov	r9, r1
   b7682:	465b      	mov	r3, fp
   b7684:	4650      	mov	r0, sl
   b7686:	4659      	mov	r1, fp
   b7688:	f7fc fe86 	bl	b4398 <__aeabi_dmul>
   b768c:	4602      	mov	r2, r0
   b768e:	460b      	mov	r3, r1
   b7690:	ec43 2b1a 	vmov	d10, r2, r3
   b7694:	4b6f      	ldr	r3, [pc, #444]	; (b7854 <__ieee754_pow+0x5ac>)
   b7696:	2200      	movs	r2, #0
   b7698:	f7fc fcc8 	bl	b402c <__adddf3>
   b769c:	4642      	mov	r2, r8
   b769e:	464b      	mov	r3, r9
   b76a0:	f7fc fcc4 	bl	b402c <__adddf3>
   b76a4:	2400      	movs	r4, #0
   b76a6:	460d      	mov	r5, r1
   b76a8:	4622      	mov	r2, r4
   b76aa:	462b      	mov	r3, r5
   b76ac:	4650      	mov	r0, sl
   b76ae:	4659      	mov	r1, fp
   b76b0:	f7fc fe72 	bl	b4398 <__aeabi_dmul>
   b76b4:	4b67      	ldr	r3, [pc, #412]	; (b7854 <__ieee754_pow+0x5ac>)
   b76b6:	4682      	mov	sl, r0
   b76b8:	468b      	mov	fp, r1
   b76ba:	2200      	movs	r2, #0
   b76bc:	4620      	mov	r0, r4
   b76be:	4629      	mov	r1, r5
   b76c0:	f7fc fcb2 	bl	b4028 <__aeabi_dsub>
   b76c4:	ec53 2b1a 	vmov	r2, r3, d10
   b76c8:	f7fc fcae 	bl	b4028 <__aeabi_dsub>
   b76cc:	4602      	mov	r2, r0
   b76ce:	460b      	mov	r3, r1
   b76d0:	4640      	mov	r0, r8
   b76d2:	4649      	mov	r1, r9
   b76d4:	f7fc fca8 	bl	b4028 <__aeabi_dsub>
   b76d8:	ec53 2b18 	vmov	r2, r3, d8
   b76dc:	f7fc fe5c 	bl	b4398 <__aeabi_dmul>
   b76e0:	4622      	mov	r2, r4
   b76e2:	462b      	mov	r3, r5
   b76e4:	4604      	mov	r4, r0
   b76e6:	460d      	mov	r5, r1
   b76e8:	ec51 0b19 	vmov	r0, r1, d9
   b76ec:	f7fc fe54 	bl	b4398 <__aeabi_dmul>
   b76f0:	4602      	mov	r2, r0
   b76f2:	460b      	mov	r3, r1
   b76f4:	4620      	mov	r0, r4
   b76f6:	4629      	mov	r1, r5
   b76f8:	f7fc fc98 	bl	b402c <__adddf3>
   b76fc:	4680      	mov	r8, r0
   b76fe:	4689      	mov	r9, r1
   b7700:	4642      	mov	r2, r8
   b7702:	464b      	mov	r3, r9
   b7704:	4650      	mov	r0, sl
   b7706:	4659      	mov	r1, fp
   b7708:	f7fc fc90 	bl	b402c <__adddf3>
   b770c:	a344      	add	r3, pc, #272	; (adr r3, b7820 <__ieee754_pow+0x578>)
   b770e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7712:	2000      	movs	r0, #0
   b7714:	4604      	mov	r4, r0
   b7716:	460d      	mov	r5, r1
   b7718:	f7fc fe3e 	bl	b4398 <__aeabi_dmul>
   b771c:	4652      	mov	r2, sl
   b771e:	ec41 0b19 	vmov	d9, r0, r1
   b7722:	465b      	mov	r3, fp
   b7724:	4620      	mov	r0, r4
   b7726:	4629      	mov	r1, r5
   b7728:	f7fc fc7e 	bl	b4028 <__aeabi_dsub>
   b772c:	4602      	mov	r2, r0
   b772e:	460b      	mov	r3, r1
   b7730:	4640      	mov	r0, r8
   b7732:	4649      	mov	r1, r9
   b7734:	f7fc fc78 	bl	b4028 <__aeabi_dsub>
   b7738:	a33b      	add	r3, pc, #236	; (adr r3, b7828 <__ieee754_pow+0x580>)
   b773a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b773e:	f7fc fe2b 	bl	b4398 <__aeabi_dmul>
   b7742:	4602      	mov	r2, r0
   b7744:	460b      	mov	r3, r1
   b7746:	4620      	mov	r0, r4
   b7748:	4629      	mov	r1, r5
   b774a:	4614      	mov	r4, r2
   b774c:	461d      	mov	r5, r3
   b774e:	a338      	add	r3, pc, #224	; (adr r3, b7830 <__ieee754_pow+0x588>)
   b7750:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7754:	f7fc fe20 	bl	b4398 <__aeabi_dmul>
   b7758:	4602      	mov	r2, r0
   b775a:	460b      	mov	r3, r1
   b775c:	4620      	mov	r0, r4
   b775e:	4629      	mov	r1, r5
   b7760:	f7fc fc64 	bl	b402c <__adddf3>
   b7764:	ec53 2b1d 	vmov	r2, r3, d13
   b7768:	f7fc fc60 	bl	b402c <__adddf3>
   b776c:	4680      	mov	r8, r0
   b776e:	9805      	ldr	r0, [sp, #20]
   b7770:	4689      	mov	r9, r1
   b7772:	f7fc fda7 	bl	b42c4 <__aeabi_i2d>
   b7776:	4642      	mov	r2, r8
   b7778:	4682      	mov	sl, r0
   b777a:	468b      	mov	fp, r1
   b777c:	464b      	mov	r3, r9
   b777e:	ec51 0b19 	vmov	r0, r1, d9
   b7782:	f7fc fc53 	bl	b402c <__adddf3>
   b7786:	ec53 2b1c 	vmov	r2, r3, d12
   b778a:	f7fc fc4f 	bl	b402c <__adddf3>
   b778e:	4652      	mov	r2, sl
   b7790:	465b      	mov	r3, fp
   b7792:	f7fc fc4b 	bl	b402c <__adddf3>
   b7796:	4652      	mov	r2, sl
   b7798:	465b      	mov	r3, fp
   b779a:	2000      	movs	r0, #0
   b779c:	4604      	mov	r4, r0
   b779e:	460d      	mov	r5, r1
   b77a0:	f7fc fc42 	bl	b4028 <__aeabi_dsub>
   b77a4:	ec53 2b1c 	vmov	r2, r3, d12
   b77a8:	f7fc fc3e 	bl	b4028 <__aeabi_dsub>
   b77ac:	ec53 2b19 	vmov	r2, r3, d9
   b77b0:	f7fc fc3a 	bl	b4028 <__aeabi_dsub>
   b77b4:	4602      	mov	r2, r0
   b77b6:	460b      	mov	r3, r1
   b77b8:	4640      	mov	r0, r8
   b77ba:	4649      	mov	r1, r9
   b77bc:	f7fc fc34 	bl	b4028 <__aeabi_dsub>
   b77c0:	9b00      	ldr	r3, [sp, #0]
   b77c2:	9a04      	ldr	r2, [sp, #16]
   b77c4:	3b01      	subs	r3, #1
   b77c6:	4313      	orrs	r3, r2
   b77c8:	4682      	mov	sl, r0
   b77ca:	468b      	mov	fp, r1
   b77cc:	f040 81b6 	bne.w	b7b3c <__ieee754_pow+0x894>
   b77d0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b7838 <__ieee754_pow+0x590>
   b77d4:	eeb0 8a47 	vmov.f32	s16, s14
   b77d8:	eef0 8a67 	vmov.f32	s17, s15
   b77dc:	e03c      	b.n	b7858 <__ieee754_pow+0x5b0>
   b77de:	bf00      	nop
   b77e0:	00000000 	.word	0x00000000
   b77e4:	3ff00000 	.word	0x3ff00000
	...
   b77f0:	4a454eef 	.word	0x4a454eef
   b77f4:	3fca7e28 	.word	0x3fca7e28
   b77f8:	93c9db65 	.word	0x93c9db65
   b77fc:	3fcd864a 	.word	0x3fcd864a
   b7800:	a91d4101 	.word	0xa91d4101
   b7804:	3fd17460 	.word	0x3fd17460
   b7808:	518f264d 	.word	0x518f264d
   b780c:	3fd55555 	.word	0x3fd55555
   b7810:	db6fabff 	.word	0xdb6fabff
   b7814:	3fdb6db6 	.word	0x3fdb6db6
   b7818:	33333303 	.word	0x33333303
   b781c:	3fe33333 	.word	0x3fe33333
   b7820:	e0000000 	.word	0xe0000000
   b7824:	3feec709 	.word	0x3feec709
   b7828:	dc3a03fd 	.word	0xdc3a03fd
   b782c:	3feec709 	.word	0x3feec709
   b7830:	145b01f5 	.word	0x145b01f5
   b7834:	be3e2fe0 	.word	0xbe3e2fe0
   b7838:	00000000 	.word	0x00000000
   b783c:	bff00000 	.word	0xbff00000
   b7840:	7ff00000 	.word	0x7ff00000
   b7844:	43400000 	.word	0x43400000
   b7848:	0003988e 	.word	0x0003988e
   b784c:	000bb679 	.word	0x000bb679
   b7850:	3ff00000 	.word	0x3ff00000
   b7854:	40080000 	.word	0x40080000
   b7858:	2300      	movs	r3, #0
   b785a:	e9cd 6700 	strd	r6, r7, [sp]
   b785e:	9300      	str	r3, [sp, #0]
   b7860:	e9dd 8900 	ldrd	r8, r9, [sp]
   b7864:	4630      	mov	r0, r6
   b7866:	4642      	mov	r2, r8
   b7868:	464b      	mov	r3, r9
   b786a:	4639      	mov	r1, r7
   b786c:	f7fc fbdc 	bl	b4028 <__aeabi_dsub>
   b7870:	4622      	mov	r2, r4
   b7872:	462b      	mov	r3, r5
   b7874:	f7fc fd90 	bl	b4398 <__aeabi_dmul>
   b7878:	4632      	mov	r2, r6
   b787a:	463b      	mov	r3, r7
   b787c:	4606      	mov	r6, r0
   b787e:	460f      	mov	r7, r1
   b7880:	4650      	mov	r0, sl
   b7882:	4659      	mov	r1, fp
   b7884:	f7fc fd88 	bl	b4398 <__aeabi_dmul>
   b7888:	4602      	mov	r2, r0
   b788a:	460b      	mov	r3, r1
   b788c:	4630      	mov	r0, r6
   b788e:	4639      	mov	r1, r7
   b7890:	f7fc fbcc 	bl	b402c <__adddf3>
   b7894:	4642      	mov	r2, r8
   b7896:	464b      	mov	r3, r9
   b7898:	4606      	mov	r6, r0
   b789a:	460f      	mov	r7, r1
   b789c:	4620      	mov	r0, r4
   b789e:	4629      	mov	r1, r5
   b78a0:	f7fc fd7a 	bl	b4398 <__aeabi_dmul>
   b78a4:	4604      	mov	r4, r0
   b78a6:	460d      	mov	r5, r1
   b78a8:	462b      	mov	r3, r5
   b78aa:	4630      	mov	r0, r6
   b78ac:	4639      	mov	r1, r7
   b78ae:	4622      	mov	r2, r4
   b78b0:	f7fc fbbc 	bl	b402c <__adddf3>
   b78b4:	4bc2      	ldr	r3, [pc, #776]	; (b7bc0 <__ieee754_pow+0x918>)
   b78b6:	4299      	cmp	r1, r3
   b78b8:	4680      	mov	r8, r0
   b78ba:	4689      	mov	r9, r1
   b78bc:	468a      	mov	sl, r1
   b78be:	f340 8118 	ble.w	b7af2 <__ieee754_pow+0x84a>
   b78c2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b78c6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b78ca:	4303      	orrs	r3, r0
   b78cc:	f040 8207 	bne.w	b7cde <__ieee754_pow+0xa36>
   b78d0:	a3a3      	add	r3, pc, #652	; (adr r3, b7b60 <__ieee754_pow+0x8b8>)
   b78d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b78d6:	4630      	mov	r0, r6
   b78d8:	4639      	mov	r1, r7
   b78da:	f7fc fba7 	bl	b402c <__adddf3>
   b78de:	4602      	mov	r2, r0
   b78e0:	460b      	mov	r3, r1
   b78e2:	4640      	mov	r0, r8
   b78e4:	4649      	mov	r1, r9
   b78e6:	4690      	mov	r8, r2
   b78e8:	4699      	mov	r9, r3
   b78ea:	4622      	mov	r2, r4
   b78ec:	462b      	mov	r3, r5
   b78ee:	f7fc fb9b 	bl	b4028 <__aeabi_dsub>
   b78f2:	4602      	mov	r2, r0
   b78f4:	460b      	mov	r3, r1
   b78f6:	4640      	mov	r0, r8
   b78f8:	4649      	mov	r1, r9
   b78fa:	f7fc ffdd 	bl	b48b8 <__aeabi_dcmpgt>
   b78fe:	2800      	cmp	r0, #0
   b7900:	f040 81ed 	bne.w	b7cde <__ieee754_pow+0xa36>
   b7904:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b7908:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b790c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b7910:	fa42 f303 	asr.w	r3, r2, r3
   b7914:	4453      	add	r3, sl
   b7916:	49ab      	ldr	r1, [pc, #684]	; (b7bc4 <__ieee754_pow+0x91c>)
   b7918:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b791c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b7920:	fa41 fc02 	asr.w	ip, r1, r2
   b7924:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b7928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b792c:	f1c2 0214 	rsb	r2, r2, #20
   b7930:	fa41 f202 	asr.w	r2, r1, r2
   b7934:	2000      	movs	r0, #0
   b7936:	ea23 010c 	bic.w	r1, r3, ip
   b793a:	f1ba 0f00 	cmp.w	sl, #0
   b793e:	9200      	str	r2, [sp, #0]
   b7940:	460b      	mov	r3, r1
   b7942:	4602      	mov	r2, r0
   b7944:	da02      	bge.n	b794c <__ieee754_pow+0x6a4>
   b7946:	9900      	ldr	r1, [sp, #0]
   b7948:	4249      	negs	r1, r1
   b794a:	9100      	str	r1, [sp, #0]
   b794c:	4620      	mov	r0, r4
   b794e:	4629      	mov	r1, r5
   b7950:	f7fc fb6a 	bl	b4028 <__aeabi_dsub>
   b7954:	9b00      	ldr	r3, [sp, #0]
   b7956:	051b      	lsls	r3, r3, #20
   b7958:	9302      	str	r3, [sp, #8]
   b795a:	4602      	mov	r2, r0
   b795c:	460b      	mov	r3, r1
   b795e:	4604      	mov	r4, r0
   b7960:	460d      	mov	r5, r1
   b7962:	4630      	mov	r0, r6
   b7964:	4639      	mov	r1, r7
   b7966:	f7fc fb61 	bl	b402c <__adddf3>
   b796a:	4689      	mov	r9, r1
   b796c:	f04f 0800 	mov.w	r8, #0
   b7970:	a37d      	add	r3, pc, #500	; (adr r3, b7b68 <__ieee754_pow+0x8c0>)
   b7972:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7976:	4640      	mov	r0, r8
   b7978:	4649      	mov	r1, r9
   b797a:	f7fc fd0d 	bl	b4398 <__aeabi_dmul>
   b797e:	4622      	mov	r2, r4
   b7980:	462b      	mov	r3, r5
   b7982:	4682      	mov	sl, r0
   b7984:	468b      	mov	fp, r1
   b7986:	4640      	mov	r0, r8
   b7988:	4649      	mov	r1, r9
   b798a:	f7fc fb4d 	bl	b4028 <__aeabi_dsub>
   b798e:	4602      	mov	r2, r0
   b7990:	460b      	mov	r3, r1
   b7992:	4630      	mov	r0, r6
   b7994:	4639      	mov	r1, r7
   b7996:	f7fc fb47 	bl	b4028 <__aeabi_dsub>
   b799a:	a375      	add	r3, pc, #468	; (adr r3, b7b70 <__ieee754_pow+0x8c8>)
   b799c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b79a0:	f7fc fcfa 	bl	b4398 <__aeabi_dmul>
   b79a4:	a374      	add	r3, pc, #464	; (adr r3, b7b78 <__ieee754_pow+0x8d0>)
   b79a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b79aa:	4604      	mov	r4, r0
   b79ac:	460d      	mov	r5, r1
   b79ae:	4640      	mov	r0, r8
   b79b0:	4649      	mov	r1, r9
   b79b2:	f7fc fcf1 	bl	b4398 <__aeabi_dmul>
   b79b6:	4602      	mov	r2, r0
   b79b8:	460b      	mov	r3, r1
   b79ba:	4620      	mov	r0, r4
   b79bc:	4629      	mov	r1, r5
   b79be:	f7fc fb35 	bl	b402c <__adddf3>
   b79c2:	4606      	mov	r6, r0
   b79c4:	460f      	mov	r7, r1
   b79c6:	4632      	mov	r2, r6
   b79c8:	463b      	mov	r3, r7
   b79ca:	4650      	mov	r0, sl
   b79cc:	4659      	mov	r1, fp
   b79ce:	f7fc fb2d 	bl	b402c <__adddf3>
   b79d2:	4652      	mov	r2, sl
   b79d4:	465b      	mov	r3, fp
   b79d6:	4604      	mov	r4, r0
   b79d8:	460d      	mov	r5, r1
   b79da:	f7fc fb25 	bl	b4028 <__aeabi_dsub>
   b79de:	4602      	mov	r2, r0
   b79e0:	460b      	mov	r3, r1
   b79e2:	4630      	mov	r0, r6
   b79e4:	4639      	mov	r1, r7
   b79e6:	f7fc fb1f 	bl	b4028 <__aeabi_dsub>
   b79ea:	4622      	mov	r2, r4
   b79ec:	4680      	mov	r8, r0
   b79ee:	4689      	mov	r9, r1
   b79f0:	462b      	mov	r3, r5
   b79f2:	4620      	mov	r0, r4
   b79f4:	4629      	mov	r1, r5
   b79f6:	f7fc fccf 	bl	b4398 <__aeabi_dmul>
   b79fa:	a361      	add	r3, pc, #388	; (adr r3, b7b80 <__ieee754_pow+0x8d8>)
   b79fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a00:	4606      	mov	r6, r0
   b7a02:	460f      	mov	r7, r1
   b7a04:	f7fc fcc8 	bl	b4398 <__aeabi_dmul>
   b7a08:	a35f      	add	r3, pc, #380	; (adr r3, b7b88 <__ieee754_pow+0x8e0>)
   b7a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a0e:	f7fc fb0b 	bl	b4028 <__aeabi_dsub>
   b7a12:	4632      	mov	r2, r6
   b7a14:	463b      	mov	r3, r7
   b7a16:	f7fc fcbf 	bl	b4398 <__aeabi_dmul>
   b7a1a:	a35d      	add	r3, pc, #372	; (adr r3, b7b90 <__ieee754_pow+0x8e8>)
   b7a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a20:	f7fc fb04 	bl	b402c <__adddf3>
   b7a24:	4632      	mov	r2, r6
   b7a26:	463b      	mov	r3, r7
   b7a28:	f7fc fcb6 	bl	b4398 <__aeabi_dmul>
   b7a2c:	a35a      	add	r3, pc, #360	; (adr r3, b7b98 <__ieee754_pow+0x8f0>)
   b7a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a32:	f7fc faf9 	bl	b4028 <__aeabi_dsub>
   b7a36:	4632      	mov	r2, r6
   b7a38:	463b      	mov	r3, r7
   b7a3a:	f7fc fcad 	bl	b4398 <__aeabi_dmul>
   b7a3e:	a358      	add	r3, pc, #352	; (adr r3, b7ba0 <__ieee754_pow+0x8f8>)
   b7a40:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7a44:	f7fc faf2 	bl	b402c <__adddf3>
   b7a48:	4632      	mov	r2, r6
   b7a4a:	463b      	mov	r3, r7
   b7a4c:	f7fc fca4 	bl	b4398 <__aeabi_dmul>
   b7a50:	4602      	mov	r2, r0
   b7a52:	460b      	mov	r3, r1
   b7a54:	4620      	mov	r0, r4
   b7a56:	4629      	mov	r1, r5
   b7a58:	f7fc fae6 	bl	b4028 <__aeabi_dsub>
   b7a5c:	4606      	mov	r6, r0
   b7a5e:	460f      	mov	r7, r1
   b7a60:	4632      	mov	r2, r6
   b7a62:	463b      	mov	r3, r7
   b7a64:	4620      	mov	r0, r4
   b7a66:	4629      	mov	r1, r5
   b7a68:	f7fc fc96 	bl	b4398 <__aeabi_dmul>
   b7a6c:	4602      	mov	r2, r0
   b7a6e:	460b      	mov	r3, r1
   b7a70:	4630      	mov	r0, r6
   b7a72:	4639      	mov	r1, r7
   b7a74:	4616      	mov	r6, r2
   b7a76:	461f      	mov	r7, r3
   b7a78:	2200      	movs	r2, #0
   b7a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b7a7e:	f7fc fad3 	bl	b4028 <__aeabi_dsub>
   b7a82:	4602      	mov	r2, r0
   b7a84:	460b      	mov	r3, r1
   b7a86:	4630      	mov	r0, r6
   b7a88:	4639      	mov	r1, r7
   b7a8a:	f7fc fdaf 	bl	b45ec <__aeabi_ddiv>
   b7a8e:	4642      	mov	r2, r8
   b7a90:	4606      	mov	r6, r0
   b7a92:	460f      	mov	r7, r1
   b7a94:	464b      	mov	r3, r9
   b7a96:	4620      	mov	r0, r4
   b7a98:	4629      	mov	r1, r5
   b7a9a:	f7fc fc7d 	bl	b4398 <__aeabi_dmul>
   b7a9e:	4642      	mov	r2, r8
   b7aa0:	464b      	mov	r3, r9
   b7aa2:	f7fc fac3 	bl	b402c <__adddf3>
   b7aa6:	4602      	mov	r2, r0
   b7aa8:	460b      	mov	r3, r1
   b7aaa:	4630      	mov	r0, r6
   b7aac:	4639      	mov	r1, r7
   b7aae:	f7fc fabb 	bl	b4028 <__aeabi_dsub>
   b7ab2:	4622      	mov	r2, r4
   b7ab4:	462b      	mov	r3, r5
   b7ab6:	f7fc fab7 	bl	b4028 <__aeabi_dsub>
   b7aba:	4602      	mov	r2, r0
   b7abc:	460b      	mov	r3, r1
   b7abe:	2000      	movs	r0, #0
   b7ac0:	4941      	ldr	r1, [pc, #260]	; (b7bc8 <__ieee754_pow+0x920>)
   b7ac2:	f7fc fab1 	bl	b4028 <__aeabi_dsub>
   b7ac6:	9a02      	ldr	r2, [sp, #8]
   b7ac8:	460b      	mov	r3, r1
   b7aca:	4413      	add	r3, r2
   b7acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b7ad0:	f2c0 8143 	blt.w	b7d5a <__ieee754_pow+0xab2>
   b7ad4:	4619      	mov	r1, r3
   b7ad6:	ec53 2b18 	vmov	r2, r3, d8
   b7ada:	f7fc fc5d 	bl	b4398 <__aeabi_dmul>
   b7ade:	ec41 0b10 	vmov	d0, r0, r1
   b7ae2:	e42d      	b.n	b7340 <__ieee754_pow+0x98>
   b7ae4:	f1bb 0f00 	cmp.w	fp, #0
   b7ae8:	f6ff aca0 	blt.w	b742c <__ieee754_pow+0x184>
   b7aec:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b7ba8 <__ieee754_pow+0x900>
   b7af0:	e426      	b.n	b7340 <__ieee754_pow+0x98>
   b7af2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b7bd0 <__ieee754_pow+0x928>
   b7af6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7afa:	4563      	cmp	r3, ip
   b7afc:	f340 80e7 	ble.w	b7cce <__ieee754_pow+0xa26>
   b7b00:	4b32      	ldr	r3, [pc, #200]	; (b7bcc <__ieee754_pow+0x924>)
   b7b02:	440b      	add	r3, r1
   b7b04:	4303      	orrs	r3, r0
   b7b06:	d10a      	bne.n	b7b1e <__ieee754_pow+0x876>
   b7b08:	4622      	mov	r2, r4
   b7b0a:	462b      	mov	r3, r5
   b7b0c:	f7fc fa8c 	bl	b4028 <__aeabi_dsub>
   b7b10:	4632      	mov	r2, r6
   b7b12:	463b      	mov	r3, r7
   b7b14:	f7fc fec6 	bl	b48a4 <__aeabi_dcmpge>
   b7b18:	2800      	cmp	r0, #0
   b7b1a:	f43f aef3 	beq.w	b7904 <__ieee754_pow+0x65c>
   b7b1e:	a324      	add	r3, pc, #144	; (adr r3, b7bb0 <__ieee754_pow+0x908>)
   b7b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b24:	ec51 0b18 	vmov	r0, r1, d8
   b7b28:	f7fc fc36 	bl	b4398 <__aeabi_dmul>
   b7b2c:	a320      	add	r3, pc, #128	; (adr r3, b7bb0 <__ieee754_pow+0x908>)
   b7b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b32:	f7fc fc31 	bl	b4398 <__aeabi_dmul>
   b7b36:	ec41 0b10 	vmov	d0, r0, r1
   b7b3a:	e401      	b.n	b7340 <__ieee754_pow+0x98>
   b7b3c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b7bb8 <__ieee754_pow+0x910>
   b7b40:	eeb0 8a47 	vmov.f32	s16, s14
   b7b44:	eef0 8a67 	vmov.f32	s17, s15
   b7b48:	e686      	b.n	b7858 <__ieee754_pow+0x5b0>
   b7b4a:	f1bb 0f00 	cmp.w	fp, #0
   b7b4e:	dacd      	bge.n	b7aec <__ieee754_pow+0x844>
   b7b50:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7b54:	ee00 6a10 	vmov	s0, r6
   b7b58:	ee00 3a90 	vmov	s1, r3
   b7b5c:	f7ff bbf0 	b.w	b7340 <__ieee754_pow+0x98>
   b7b60:	652b82fe 	.word	0x652b82fe
   b7b64:	3c971547 	.word	0x3c971547
   b7b68:	00000000 	.word	0x00000000
   b7b6c:	3fe62e43 	.word	0x3fe62e43
   b7b70:	fefa39ef 	.word	0xfefa39ef
   b7b74:	3fe62e42 	.word	0x3fe62e42
   b7b78:	0ca86c39 	.word	0x0ca86c39
   b7b7c:	be205c61 	.word	0xbe205c61
   b7b80:	72bea4d0 	.word	0x72bea4d0
   b7b84:	3e663769 	.word	0x3e663769
   b7b88:	c5d26bf1 	.word	0xc5d26bf1
   b7b8c:	3ebbbd41 	.word	0x3ebbbd41
   b7b90:	af25de2c 	.word	0xaf25de2c
   b7b94:	3f11566a 	.word	0x3f11566a
   b7b98:	16bebd93 	.word	0x16bebd93
   b7b9c:	3f66c16c 	.word	0x3f66c16c
   b7ba0:	5555553e 	.word	0x5555553e
   b7ba4:	3fc55555 	.word	0x3fc55555
	...
   b7bb0:	c2f8f359 	.word	0xc2f8f359
   b7bb4:	01a56e1f 	.word	0x01a56e1f
   b7bb8:	00000000 	.word	0x00000000
   b7bbc:	3ff00000 	.word	0x3ff00000
   b7bc0:	408fffff 	.word	0x408fffff
   b7bc4:	000fffff 	.word	0x000fffff
   b7bc8:	3ff00000 	.word	0x3ff00000
   b7bcc:	3f6f3400 	.word	0x3f6f3400
   b7bd0:	4090cbff 	.word	0x4090cbff
   b7bd4:	4598      	cmp	r8, r3
   b7bd6:	db85      	blt.n	b7ae4 <__ieee754_pow+0x83c>
   b7bd8:	4b7d      	ldr	r3, [pc, #500]	; (b7dd0 <__ieee754_pow+0xb28>)
   b7bda:	4598      	cmp	r8, r3
   b7bdc:	f73f ac22 	bgt.w	b7424 <__ieee754_pow+0x17c>
   b7be0:	ec51 0b10 	vmov	r0, r1, d0
   b7be4:	4b7a      	ldr	r3, [pc, #488]	; (b7dd0 <__ieee754_pow+0xb28>)
   b7be6:	2200      	movs	r2, #0
   b7be8:	f7fc fa1e 	bl	b4028 <__aeabi_dsub>
   b7bec:	a368      	add	r3, pc, #416	; (adr r3, b7d90 <__ieee754_pow+0xae8>)
   b7bee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7bf2:	4604      	mov	r4, r0
   b7bf4:	460d      	mov	r5, r1
   b7bf6:	f7fc fbcf 	bl	b4398 <__aeabi_dmul>
   b7bfa:	a367      	add	r3, pc, #412	; (adr r3, b7d98 <__ieee754_pow+0xaf0>)
   b7bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7c00:	4682      	mov	sl, r0
   b7c02:	468b      	mov	fp, r1
   b7c04:	4620      	mov	r0, r4
   b7c06:	4629      	mov	r1, r5
   b7c08:	f7fc fbc6 	bl	b4398 <__aeabi_dmul>
   b7c0c:	4b71      	ldr	r3, [pc, #452]	; (b7dd4 <__ieee754_pow+0xb2c>)
   b7c0e:	ec41 0b18 	vmov	d8, r0, r1
   b7c12:	2200      	movs	r2, #0
   b7c14:	4620      	mov	r0, r4
   b7c16:	4629      	mov	r1, r5
   b7c18:	f7fc fbbe 	bl	b4398 <__aeabi_dmul>
   b7c1c:	4602      	mov	r2, r0
   b7c1e:	460b      	mov	r3, r1
   b7c20:	a15f      	add	r1, pc, #380	; (adr r1, b7da0 <__ieee754_pow+0xaf8>)
   b7c22:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7c26:	f7fc f9ff 	bl	b4028 <__aeabi_dsub>
   b7c2a:	4622      	mov	r2, r4
   b7c2c:	462b      	mov	r3, r5
   b7c2e:	f7fc fbb3 	bl	b4398 <__aeabi_dmul>
   b7c32:	4602      	mov	r2, r0
   b7c34:	460b      	mov	r3, r1
   b7c36:	2000      	movs	r0, #0
   b7c38:	4967      	ldr	r1, [pc, #412]	; (b7dd8 <__ieee754_pow+0xb30>)
   b7c3a:	f7fc f9f5 	bl	b4028 <__aeabi_dsub>
   b7c3e:	4622      	mov	r2, r4
   b7c40:	4680      	mov	r8, r0
   b7c42:	4689      	mov	r9, r1
   b7c44:	462b      	mov	r3, r5
   b7c46:	4620      	mov	r0, r4
   b7c48:	4629      	mov	r1, r5
   b7c4a:	f7fc fba5 	bl	b4398 <__aeabi_dmul>
   b7c4e:	4602      	mov	r2, r0
   b7c50:	460b      	mov	r3, r1
   b7c52:	4640      	mov	r0, r8
   b7c54:	4649      	mov	r1, r9
   b7c56:	f7fc fb9f 	bl	b4398 <__aeabi_dmul>
   b7c5a:	a353      	add	r3, pc, #332	; (adr r3, b7da8 <__ieee754_pow+0xb00>)
   b7c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7c60:	f7fc fb9a 	bl	b4398 <__aeabi_dmul>
   b7c64:	4602      	mov	r2, r0
   b7c66:	460b      	mov	r3, r1
   b7c68:	ec51 0b18 	vmov	r0, r1, d8
   b7c6c:	f7fc f9dc 	bl	b4028 <__aeabi_dsub>
   b7c70:	4680      	mov	r8, r0
   b7c72:	4689      	mov	r9, r1
   b7c74:	4642      	mov	r2, r8
   b7c76:	464b      	mov	r3, r9
   b7c78:	4650      	mov	r0, sl
   b7c7a:	4659      	mov	r1, fp
   b7c7c:	f7fc f9d6 	bl	b402c <__adddf3>
   b7c80:	2000      	movs	r0, #0
   b7c82:	4652      	mov	r2, sl
   b7c84:	465b      	mov	r3, fp
   b7c86:	4604      	mov	r4, r0
   b7c88:	460d      	mov	r5, r1
   b7c8a:	e591      	b.n	b77b0 <__ieee754_pow+0x508>
   b7c8c:	4622      	mov	r2, r4
   b7c8e:	462b      	mov	r3, r5
   b7c90:	4620      	mov	r0, r4
   b7c92:	4629      	mov	r1, r5
   b7c94:	f7fc fb80 	bl	b4398 <__aeabi_dmul>
   b7c98:	ec41 0b10 	vmov	d0, r0, r1
   b7c9c:	f7ff bb50 	b.w	b7340 <__ieee754_pow+0x98>
   b7ca0:	494b      	ldr	r1, [pc, #300]	; (b7dd0 <__ieee754_pow+0xb28>)
   b7ca2:	2000      	movs	r0, #0
   b7ca4:	4622      	mov	r2, r4
   b7ca6:	462b      	mov	r3, r5
   b7ca8:	f7fc fca0 	bl	b45ec <__aeabi_ddiv>
   b7cac:	ec41 0b10 	vmov	d0, r0, r1
   b7cb0:	f7ff bb46 	b.w	b7340 <__ieee754_pow+0x98>
   b7cb4:	2b00      	cmp	r3, #0
   b7cb6:	d144      	bne.n	b7d42 <__ieee754_pow+0xa9a>
   b7cb8:	f1c1 0114 	rsb	r1, r1, #20
   b7cbc:	fa4a f001 	asr.w	r0, sl, r1
   b7cc0:	fa00 f101 	lsl.w	r1, r0, r1
   b7cc4:	4551      	cmp	r1, sl
   b7cc6:	d05a      	beq.n	b7d7e <__ieee754_pow+0xad6>
   b7cc8:	9300      	str	r3, [sp, #0]
   b7cca:	f7ff bb17 	b.w	b72fc <__ieee754_pow+0x54>
   b7cce:	4a42      	ldr	r2, [pc, #264]	; (b7dd8 <__ieee754_pow+0xb30>)
   b7cd0:	4293      	cmp	r3, r2
   b7cd2:	dc5b      	bgt.n	b7d8c <__ieee754_pow+0xae4>
   b7cd4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7cd8:	9102      	str	r1, [sp, #8]
   b7cda:	9100      	str	r1, [sp, #0]
   b7cdc:	e646      	b.n	b796c <__ieee754_pow+0x6c4>
   b7cde:	a334      	add	r3, pc, #208	; (adr r3, b7db0 <__ieee754_pow+0xb08>)
   b7ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7ce4:	ec51 0b18 	vmov	r0, r1, d8
   b7ce8:	f7fc fb56 	bl	b4398 <__aeabi_dmul>
   b7cec:	a330      	add	r3, pc, #192	; (adr r3, b7db0 <__ieee754_pow+0xb08>)
   b7cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7cf2:	f7fc fb51 	bl	b4398 <__aeabi_dmul>
   b7cf6:	ec41 0b10 	vmov	d0, r0, r1
   b7cfa:	f7ff bb21 	b.w	b7340 <__ieee754_pow+0x98>
   b7cfe:	9b00      	ldr	r3, [sp, #0]
   b7d00:	2b01      	cmp	r3, #1
   b7d02:	f47f ab1d 	bne.w	b7340 <__ieee754_pow+0x98>
   b7d06:	ee10 1a90 	vmov	r1, s1
   b7d0a:	ee10 2a10 	vmov	r2, s0
   b7d0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7d12:	ec43 2b10 	vmov	d0, r2, r3
   b7d16:	f7ff bb13 	b.w	b7340 <__ieee754_pow+0x98>
   b7d1a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b7db8 <__ieee754_pow+0xb10>
   b7d1e:	eeb0 ca47 	vmov.f32	s24, s14
   b7d22:	eef0 ca67 	vmov.f32	s25, s15
   b7d26:	ed9f 7b26 	vldr	d7, [pc, #152]	; b7dc0 <__ieee754_pow+0xb18>
   b7d2a:	eeb0 da47 	vmov.f32	s26, s14
   b7d2e:	eef0 da67 	vmov.f32	s27, s15
   b7d32:	ed9f 7b25 	vldr	d7, [pc, #148]	; b7dc8 <__ieee754_pow+0xb20>
   b7d36:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b7d3a:	ec53 2b17 	vmov	r2, r3, d7
   b7d3e:	f7ff bbeb 	b.w	b7518 <__ieee754_pow+0x270>
   b7d42:	ec45 4b10 	vmov	d0, r4, r5
   b7d46:	9200      	str	r2, [sp, #0]
   b7d48:	f000 f914 	bl	b7f74 <fabs>
   b7d4c:	9a00      	ldr	r2, [sp, #0]
   b7d4e:	2a00      	cmp	r2, #0
   b7d50:	f47f ab92 	bne.w	b7478 <__ieee754_pow+0x1d0>
   b7d54:	9200      	str	r2, [sp, #0]
   b7d56:	f7ff bb26 	b.w	b73a6 <__ieee754_pow+0xfe>
   b7d5a:	ec41 0b10 	vmov	d0, r0, r1
   b7d5e:	9800      	ldr	r0, [sp, #0]
   b7d60:	f000 f9c2 	bl	b80e8 <scalbn>
   b7d64:	ec51 0b10 	vmov	r0, r1, d0
   b7d68:	e6b5      	b.n	b7ad6 <__ieee754_pow+0x82e>
   b7d6a:	f000 0001 	and.w	r0, r0, #1
   b7d6e:	f1c0 0102 	rsb	r1, r0, #2
   b7d72:	9100      	str	r1, [sp, #0]
   b7d74:	2b00      	cmp	r3, #0
   b7d76:	f43f aac1 	beq.w	b72fc <__ieee754_pow+0x54>
   b7d7a:	f7ff bb0d 	b.w	b7398 <__ieee754_pow+0xf0>
   b7d7e:	f000 0001 	and.w	r0, r0, #1
   b7d82:	f1c0 0302 	rsb	r3, r0, #2
   b7d86:	9300      	str	r3, [sp, #0]
   b7d88:	f7ff bab8 	b.w	b72fc <__ieee754_pow+0x54>
   b7d8c:	151b      	asrs	r3, r3, #20
   b7d8e:	e5bb      	b.n	b7908 <__ieee754_pow+0x660>
   b7d90:	60000000 	.word	0x60000000
   b7d94:	3ff71547 	.word	0x3ff71547
   b7d98:	f85ddf44 	.word	0xf85ddf44
   b7d9c:	3e54ae0b 	.word	0x3e54ae0b
   b7da0:	55555555 	.word	0x55555555
   b7da4:	3fd55555 	.word	0x3fd55555
   b7da8:	652b82fe 	.word	0x652b82fe
   b7dac:	3ff71547 	.word	0x3ff71547
   b7db0:	8800759c 	.word	0x8800759c
   b7db4:	7e37e43c 	.word	0x7e37e43c
   b7db8:	40000000 	.word	0x40000000
   b7dbc:	3fe2b803 	.word	0x3fe2b803
   b7dc0:	43cfd006 	.word	0x43cfd006
   b7dc4:	3e4cfdeb 	.word	0x3e4cfdeb
   b7dc8:	00000000 	.word	0x00000000
   b7dcc:	3ff80000 	.word	0x3ff80000
   b7dd0:	3ff00000 	.word	0x3ff00000
   b7dd4:	3fd00000 	.word	0x3fd00000
   b7dd8:	3fe00000 	.word	0x3fe00000

000b7ddc <__ieee754_sqrt>:
   b7ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7de0:	4a63      	ldr	r2, [pc, #396]	; (b7f70 <__ieee754_sqrt+0x194>)
   b7de2:	ec55 4b10 	vmov	r4, r5, d0
   b7de6:	43aa      	bics	r2, r5
   b7de8:	f000 809f 	beq.w	b7f2a <__ieee754_sqrt+0x14e>
   b7dec:	2d00      	cmp	r5, #0
   b7dee:	ee10 ca10 	vmov	ip, s0
   b7df2:	462b      	mov	r3, r5
   b7df4:	dd54      	ble.n	b7ea0 <__ieee754_sqrt+0xc4>
   b7df6:	1529      	asrs	r1, r5, #20
   b7df8:	d063      	beq.n	b7ec2 <__ieee754_sqrt+0xe6>
   b7dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7dfe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b7e02:	07c9      	lsls	r1, r1, #31
   b7e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7e08:	d404      	bmi.n	b7e14 <__ieee754_sqrt+0x38>
   b7e0a:	005b      	lsls	r3, r3, #1
   b7e0c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b7e10:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7e14:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b7e18:	2600      	movs	r6, #0
   b7e1a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b7e1e:	107f      	asrs	r7, r7, #1
   b7e20:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7e24:	f04f 0e16 	mov.w	lr, #22
   b7e28:	4634      	mov	r4, r6
   b7e2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b7e2e:	18a1      	adds	r1, r4, r2
   b7e30:	4299      	cmp	r1, r3
   b7e32:	dc02      	bgt.n	b7e3a <__ieee754_sqrt+0x5e>
   b7e34:	1a5b      	subs	r3, r3, r1
   b7e36:	188c      	adds	r4, r1, r2
   b7e38:	4416      	add	r6, r2
   b7e3a:	005b      	lsls	r3, r3, #1
   b7e3c:	f1be 0e01 	subs.w	lr, lr, #1
   b7e40:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b7e44:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7e48:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7e4c:	d1ef      	bne.n	b7e2e <__ieee754_sqrt+0x52>
   b7e4e:	4675      	mov	r5, lr
   b7e50:	2020      	movs	r0, #32
   b7e52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b7e56:	e00a      	b.n	b7e6e <__ieee754_sqrt+0x92>
   b7e58:	d044      	beq.n	b7ee4 <__ieee754_sqrt+0x108>
   b7e5a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b7e5e:	3801      	subs	r0, #1
   b7e60:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b7e64:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7e68:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7e6c:	d043      	beq.n	b7ef6 <__ieee754_sqrt+0x11a>
   b7e6e:	42a3      	cmp	r3, r4
   b7e70:	eb02 010e 	add.w	r1, r2, lr
   b7e74:	ddf0      	ble.n	b7e58 <__ieee754_sqrt+0x7c>
   b7e76:	2900      	cmp	r1, #0
   b7e78:	eb01 0e02 	add.w	lr, r1, r2
   b7e7c:	db0a      	blt.n	b7e94 <__ieee754_sqrt+0xb8>
   b7e7e:	46a0      	mov	r8, r4
   b7e80:	1b1b      	subs	r3, r3, r4
   b7e82:	4561      	cmp	r1, ip
   b7e84:	bf88      	it	hi
   b7e86:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b7e8a:	ebac 0c01 	sub.w	ip, ip, r1
   b7e8e:	4415      	add	r5, r2
   b7e90:	4644      	mov	r4, r8
   b7e92:	e7e2      	b.n	b7e5a <__ieee754_sqrt+0x7e>
   b7e94:	f1be 0f00 	cmp.w	lr, #0
   b7e98:	dbf1      	blt.n	b7e7e <__ieee754_sqrt+0xa2>
   b7e9a:	f104 0801 	add.w	r8, r4, #1
   b7e9e:	e7ef      	b.n	b7e80 <__ieee754_sqrt+0xa4>
   b7ea0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b7ea4:	4322      	orrs	r2, r4
   b7ea6:	d038      	beq.n	b7f1a <__ieee754_sqrt+0x13e>
   b7ea8:	2d00      	cmp	r5, #0
   b7eaa:	d14e      	bne.n	b7f4a <__ieee754_sqrt+0x16e>
   b7eac:	4629      	mov	r1, r5
   b7eae:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b7eb2:	3915      	subs	r1, #21
   b7eb4:	4613      	mov	r3, r2
   b7eb6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b7eba:	2a00      	cmp	r2, #0
   b7ebc:	d0f7      	beq.n	b7eae <__ieee754_sqrt+0xd2>
   b7ebe:	02d6      	lsls	r6, r2, #11
   b7ec0:	d450      	bmi.n	b7f64 <__ieee754_sqrt+0x188>
   b7ec2:	2000      	movs	r0, #0
   b7ec4:	005b      	lsls	r3, r3, #1
   b7ec6:	02dd      	lsls	r5, r3, #11
   b7ec8:	4604      	mov	r4, r0
   b7eca:	f100 0001 	add.w	r0, r0, #1
   b7ece:	d5f9      	bpl.n	b7ec4 <__ieee754_sqrt+0xe8>
   b7ed0:	461a      	mov	r2, r3
   b7ed2:	4663      	mov	r3, ip
   b7ed4:	fa0c fc00 	lsl.w	ip, ip, r0
   b7ed8:	f1c0 0020 	rsb	r0, r0, #32
   b7edc:	40c3      	lsrs	r3, r0
   b7ede:	1b09      	subs	r1, r1, r4
   b7ee0:	4313      	orrs	r3, r2
   b7ee2:	e78a      	b.n	b7dfa <__ieee754_sqrt+0x1e>
   b7ee4:	4561      	cmp	r1, ip
   b7ee6:	d8b8      	bhi.n	b7e5a <__ieee754_sqrt+0x7e>
   b7ee8:	2900      	cmp	r1, #0
   b7eea:	eb01 0e02 	add.w	lr, r1, r2
   b7eee:	dbd1      	blt.n	b7e94 <__ieee754_sqrt+0xb8>
   b7ef0:	4698      	mov	r8, r3
   b7ef2:	2300      	movs	r3, #0
   b7ef4:	e7c9      	b.n	b7e8a <__ieee754_sqrt+0xae>
   b7ef6:	ea53 030c 	orrs.w	r3, r3, ip
   b7efa:	d110      	bne.n	b7f1e <__ieee754_sqrt+0x142>
   b7efc:	0868      	lsrs	r0, r5, #1
   b7efe:	1071      	asrs	r1, r6, #1
   b7f00:	07f3      	lsls	r3, r6, #31
   b7f02:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b7f06:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b7f0a:	bf48      	it	mi
   b7f0c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b7f10:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b7f14:	4602      	mov	r2, r0
   b7f16:	ec43 2b10 	vmov	d0, r2, r3
   b7f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7f1e:	1c6a      	adds	r2, r5, #1
   b7f20:	bf16      	itet	ne
   b7f22:	1c68      	addne	r0, r5, #1
   b7f24:	3601      	addeq	r6, #1
   b7f26:	0840      	lsrne	r0, r0, #1
   b7f28:	e7e9      	b.n	b7efe <__ieee754_sqrt+0x122>
   b7f2a:	ee10 2a10 	vmov	r2, s0
   b7f2e:	ee10 0a10 	vmov	r0, s0
   b7f32:	462b      	mov	r3, r5
   b7f34:	4629      	mov	r1, r5
   b7f36:	f7fc fa2f 	bl	b4398 <__aeabi_dmul>
   b7f3a:	4622      	mov	r2, r4
   b7f3c:	462b      	mov	r3, r5
   b7f3e:	f7fc f875 	bl	b402c <__adddf3>
   b7f42:	ec41 0b10 	vmov	d0, r0, r1
   b7f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7f4a:	ee10 2a10 	vmov	r2, s0
   b7f4e:	4620      	mov	r0, r4
   b7f50:	4629      	mov	r1, r5
   b7f52:	f7fc f869 	bl	b4028 <__aeabi_dsub>
   b7f56:	4602      	mov	r2, r0
   b7f58:	460b      	mov	r3, r1
   b7f5a:	f7fc fb47 	bl	b45ec <__aeabi_ddiv>
   b7f5e:	ec41 0b10 	vmov	d0, r0, r1
   b7f62:	e7da      	b.n	b7f1a <__ieee754_sqrt+0x13e>
   b7f64:	4663      	mov	r3, ip
   b7f66:	2020      	movs	r0, #32
   b7f68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7f6c:	e7b6      	b.n	b7edc <__ieee754_sqrt+0x100>
   b7f6e:	bf00      	nop
   b7f70:	7ff00000 	.word	0x7ff00000

000b7f74 <fabs>:
   b7f74:	ec51 0b10 	vmov	r0, r1, d0
   b7f78:	ee10 2a10 	vmov	r2, s0
   b7f7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7f80:	ec43 2b10 	vmov	d0, r2, r3
   b7f84:	4770      	bx	lr
   b7f86:	bf00      	nop

000b7f88 <finite>:
   b7f88:	b082      	sub	sp, #8
   b7f8a:	ed8d 0b00 	vstr	d0, [sp]
   b7f8e:	9801      	ldr	r0, [sp, #4]
   b7f90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b7f94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b7f98:	0fc0      	lsrs	r0, r0, #31
   b7f9a:	b002      	add	sp, #8
   b7f9c:	4770      	bx	lr
   b7f9e:	bf00      	nop

000b7fa0 <nan>:
   b7fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7fa8 <nan+0x8>
   b7fa4:	4770      	bx	lr
   b7fa6:	bf00      	nop
   b7fa8:	00000000 	.word	0x00000000
   b7fac:	7ff80000 	.word	0x7ff80000

000b7fb0 <rint>:
   b7fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7fb2:	ec53 2b10 	vmov	r2, r3, d0
   b7fb6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b7fba:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b7fbe:	2913      	cmp	r1, #19
   b7fc0:	ee10 0a10 	vmov	r0, s0
   b7fc4:	b083      	sub	sp, #12
   b7fc6:	461c      	mov	r4, r3
   b7fc8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b7fcc:	dc3a      	bgt.n	b8044 <rint+0x94>
   b7fce:	2900      	cmp	r1, #0
   b7fd0:	db30      	blt.n	b8034 <rint+0x84>
   b7fd2:	4d42      	ldr	r5, [pc, #264]	; (b80dc <rint+0x12c>)
   b7fd4:	fa45 fc01 	asr.w	ip, r5, r1
   b7fd8:	ea03 050c 	and.w	r5, r3, ip
   b7fdc:	4315      	orrs	r5, r2
   b7fde:	d02d      	beq.n	b803c <rint+0x8c>
   b7fe0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b7fe4:	4318      	orrs	r0, r3
   b7fe6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b7fea:	d00c      	beq.n	b8006 <rint+0x56>
   b7fec:	ea24 0c0c 	bic.w	ip, r4, ip
   b7ff0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b7ff4:	2913      	cmp	r1, #19
   b7ff6:	fa44 f101 	asr.w	r1, r4, r1
   b7ffa:	bf0c      	ite	eq
   b7ffc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8000:	2000      	movne	r0, #0
   b8002:	ea4c 0401 	orr.w	r4, ip, r1
   b8006:	4936      	ldr	r1, [pc, #216]	; (b80e0 <rint+0x130>)
   b8008:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b800c:	4623      	mov	r3, r4
   b800e:	e9de 4500 	ldrd	r4, r5, [lr]
   b8012:	4602      	mov	r2, r0
   b8014:	4629      	mov	r1, r5
   b8016:	4620      	mov	r0, r4
   b8018:	f7fc f808 	bl	b402c <__adddf3>
   b801c:	e9cd 0100 	strd	r0, r1, [sp]
   b8020:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8024:	4622      	mov	r2, r4
   b8026:	462b      	mov	r3, r5
   b8028:	f7fb fffe 	bl	b4028 <__aeabi_dsub>
   b802c:	ec41 0b10 	vmov	d0, r0, r1
   b8030:	b003      	add	sp, #12
   b8032:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8034:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8038:	4311      	orrs	r1, r2
   b803a:	d124      	bne.n	b8086 <rint+0xd6>
   b803c:	ec43 2b10 	vmov	d0, r2, r3
   b8040:	b003      	add	sp, #12
   b8042:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8044:	2933      	cmp	r1, #51	; 0x33
   b8046:	dd08      	ble.n	b805a <rint+0xaa>
   b8048:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b804c:	d1f6      	bne.n	b803c <rint+0x8c>
   b804e:	4619      	mov	r1, r3
   b8050:	f7fb ffec 	bl	b402c <__adddf3>
   b8054:	ec41 0b10 	vmov	d0, r0, r1
   b8058:	e7f2      	b.n	b8040 <rint+0x90>
   b805a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b805e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8062:	fa21 f10c 	lsr.w	r1, r1, ip
   b8066:	420a      	tst	r2, r1
   b8068:	d0e8      	beq.n	b803c <rint+0x8c>
   b806a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b806e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8072:	d0c8      	beq.n	b8006 <rint+0x56>
   b8074:	ea20 0303 	bic.w	r3, r0, r3
   b8078:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b807c:	fa40 fc0c 	asr.w	ip, r0, ip
   b8080:	ea43 000c 	orr.w	r0, r3, ip
   b8084:	e7bf      	b.n	b8006 <rint+0x56>
   b8086:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b808a:	4318      	orrs	r0, r3
   b808c:	4a14      	ldr	r2, [pc, #80]	; (b80e0 <rint+0x130>)
   b808e:	4243      	negs	r3, r0
   b8090:	4303      	orrs	r3, r0
   b8092:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8096:	0b1b      	lsrs	r3, r3, #12
   b8098:	0c62      	lsrs	r2, r4, #17
   b809a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b809e:	0452      	lsls	r2, r2, #17
   b80a0:	ea43 0702 	orr.w	r7, r3, r2
   b80a4:	463b      	mov	r3, r7
   b80a6:	e9de 6700 	ldrd	r6, r7, [lr]
   b80aa:	ee10 2a10 	vmov	r2, s0
   b80ae:	4630      	mov	r0, r6
   b80b0:	4639      	mov	r1, r7
   b80b2:	f7fb ffbb 	bl	b402c <__adddf3>
   b80b6:	e9cd 0100 	strd	r0, r1, [sp]
   b80ba:	4632      	mov	r2, r6
   b80bc:	463b      	mov	r3, r7
   b80be:	e9dd 0100 	ldrd	r0, r1, [sp]
   b80c2:	f7fb ffb1 	bl	b4028 <__aeabi_dsub>
   b80c6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b80ca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b80ce:	4602      	mov	r2, r0
   b80d0:	ea41 0304 	orr.w	r3, r1, r4
   b80d4:	ec43 2b10 	vmov	d0, r2, r3
   b80d8:	b003      	add	sp, #12
   b80da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b80dc:	000fffff 	.word	0x000fffff
   b80e0:	000b85f8 	.word	0x000b85f8
   b80e4:	00000000 	.word	0x00000000

000b80e8 <scalbn>:
   b80e8:	b538      	push	{r3, r4, r5, lr}
   b80ea:	ec53 2b10 	vmov	r2, r3, d0
   b80ee:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b80f2:	4604      	mov	r4, r0
   b80f4:	469c      	mov	ip, r3
   b80f6:	bb89      	cbnz	r1, b815c <scalbn+0x74>
   b80f8:	ee10 1a10 	vmov	r1, s0
   b80fc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b8100:	ea5c 0101 	orrs.w	r1, ip, r1
   b8104:	d029      	beq.n	b815a <scalbn+0x72>
   b8106:	4619      	mov	r1, r3
   b8108:	2200      	movs	r2, #0
   b810a:	4b3d      	ldr	r3, [pc, #244]	; (b8200 <scalbn+0x118>)
   b810c:	4d3d      	ldr	r5, [pc, #244]	; (b8204 <scalbn+0x11c>)
   b810e:	ee10 0a10 	vmov	r0, s0
   b8112:	f7fc f941 	bl	b4398 <__aeabi_dmul>
   b8116:	42ac      	cmp	r4, r5
   b8118:	4602      	mov	r2, r0
   b811a:	460b      	mov	r3, r1
   b811c:	db16      	blt.n	b814c <scalbn+0x64>
   b811e:	468c      	mov	ip, r1
   b8120:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8124:	3936      	subs	r1, #54	; 0x36
   b8126:	4421      	add	r1, r4
   b8128:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b812c:	4281      	cmp	r1, r0
   b812e:	dc21      	bgt.n	b8174 <scalbn+0x8c>
   b8130:	2900      	cmp	r1, #0
   b8132:	dc47      	bgt.n	b81c4 <scalbn+0xdc>
   b8134:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8138:	da34      	bge.n	b81a4 <scalbn+0xbc>
   b813a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b813e:	428c      	cmp	r4, r1
   b8140:	dc18      	bgt.n	b8174 <scalbn+0x8c>
   b8142:	2b00      	cmp	r3, #0
   b8144:	a126      	add	r1, pc, #152	; (adr r1, b81e0 <scalbn+0xf8>)
   b8146:	e9d1 0100 	ldrd	r0, r1, [r1]
   b814a:	db44      	blt.n	b81d6 <scalbn+0xee>
   b814c:	a324      	add	r3, pc, #144	; (adr r3, b81e0 <scalbn+0xf8>)
   b814e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8152:	f7fc f921 	bl	b4398 <__aeabi_dmul>
   b8156:	ec41 0b10 	vmov	d0, r0, r1
   b815a:	bd38      	pop	{r3, r4, r5, pc}
   b815c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8160:	4281      	cmp	r1, r0
   b8162:	d1e0      	bne.n	b8126 <scalbn+0x3e>
   b8164:	ee10 0a10 	vmov	r0, s0
   b8168:	4619      	mov	r1, r3
   b816a:	f7fb ff5f 	bl	b402c <__adddf3>
   b816e:	ec41 0b10 	vmov	d0, r0, r1
   b8172:	bd38      	pop	{r3, r4, r5, pc}
   b8174:	2b00      	cmp	r3, #0
   b8176:	a11c      	add	r1, pc, #112	; (adr r1, b81e8 <scalbn+0x100>)
   b8178:	e9d1 0100 	ldrd	r0, r1, [r1]
   b817c:	db07      	blt.n	b818e <scalbn+0xa6>
   b817e:	a31a      	add	r3, pc, #104	; (adr r3, b81e8 <scalbn+0x100>)
   b8180:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8184:	f7fc f908 	bl	b4398 <__aeabi_dmul>
   b8188:	ec41 0b10 	vmov	d0, r0, r1
   b818c:	bd38      	pop	{r3, r4, r5, pc}
   b818e:	a118      	add	r1, pc, #96	; (adr r1, b81f0 <scalbn+0x108>)
   b8190:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8194:	a314      	add	r3, pc, #80	; (adr r3, b81e8 <scalbn+0x100>)
   b8196:	e9d3 2300 	ldrd	r2, r3, [r3]
   b819a:	f7fc f8fd 	bl	b4398 <__aeabi_dmul>
   b819e:	ec41 0b10 	vmov	d0, r0, r1
   b81a2:	e7f3      	b.n	b818c <scalbn+0xa4>
   b81a4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b81a8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b81ac:	3136      	adds	r1, #54	; 0x36
   b81ae:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b81b2:	4610      	mov	r0, r2
   b81b4:	4619      	mov	r1, r3
   b81b6:	2200      	movs	r2, #0
   b81b8:	4b13      	ldr	r3, [pc, #76]	; (b8208 <scalbn+0x120>)
   b81ba:	f7fc f8ed 	bl	b4398 <__aeabi_dmul>
   b81be:	ec41 0b10 	vmov	d0, r0, r1
   b81c2:	bd38      	pop	{r3, r4, r5, pc}
   b81c4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b81c8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b81cc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b81d0:	ec43 2b10 	vmov	d0, r2, r3
   b81d4:	bd38      	pop	{r3, r4, r5, pc}
   b81d6:	a108      	add	r1, pc, #32	; (adr r1, b81f8 <scalbn+0x110>)
   b81d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b81dc:	e7b6      	b.n	b814c <scalbn+0x64>
   b81de:	bf00      	nop
   b81e0:	c2f8f359 	.word	0xc2f8f359
   b81e4:	01a56e1f 	.word	0x01a56e1f
   b81e8:	8800759c 	.word	0x8800759c
   b81ec:	7e37e43c 	.word	0x7e37e43c
   b81f0:	8800759c 	.word	0x8800759c
   b81f4:	fe37e43c 	.word	0xfe37e43c
   b81f8:	c2f8f359 	.word	0xc2f8f359
   b81fc:	81a56e1f 	.word	0x81a56e1f
   b8200:	43500000 	.word	0x43500000
   b8204:	ffff3cb0 	.word	0xffff3cb0
   b8208:	3c900000 	.word	0x3c900000

000b820c <atexit>:
   b820c:	2300      	movs	r3, #0
   b820e:	4601      	mov	r1, r0
   b8210:	461a      	mov	r2, r3
   b8212:	4618      	mov	r0, r3
   b8214:	f000 b862 	b.w	b82dc <__register_exitproc>

000b8218 <memcpy>:
   b8218:	440a      	add	r2, r1
   b821a:	4291      	cmp	r1, r2
   b821c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8220:	d100      	bne.n	b8224 <memcpy+0xc>
   b8222:	4770      	bx	lr
   b8224:	b510      	push	{r4, lr}
   b8226:	f811 4b01 	ldrb.w	r4, [r1], #1
   b822a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b822e:	4291      	cmp	r1, r2
   b8230:	d1f9      	bne.n	b8226 <memcpy+0xe>
   b8232:	bd10      	pop	{r4, pc}

000b8234 <memset>:
   b8234:	4402      	add	r2, r0
   b8236:	4603      	mov	r3, r0
   b8238:	4293      	cmp	r3, r2
   b823a:	d100      	bne.n	b823e <memset+0xa>
   b823c:	4770      	bx	lr
   b823e:	f803 1b01 	strb.w	r1, [r3], #1
   b8242:	e7f9      	b.n	b8238 <memset+0x4>

000b8244 <srand>:
   b8244:	b538      	push	{r3, r4, r5, lr}
   b8246:	4b10      	ldr	r3, [pc, #64]	; (b8288 <srand+0x44>)
   b8248:	681d      	ldr	r5, [r3, #0]
   b824a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b824c:	4604      	mov	r4, r0
   b824e:	b9b3      	cbnz	r3, b827e <srand+0x3a>
   b8250:	2018      	movs	r0, #24
   b8252:	f7fd fe41 	bl	b5ed8 <malloc>
   b8256:	4602      	mov	r2, r0
   b8258:	63a8      	str	r0, [r5, #56]	; 0x38
   b825a:	b920      	cbnz	r0, b8266 <srand+0x22>
   b825c:	4b0b      	ldr	r3, [pc, #44]	; (b828c <srand+0x48>)
   b825e:	480c      	ldr	r0, [pc, #48]	; (b8290 <srand+0x4c>)
   b8260:	2142      	movs	r1, #66	; 0x42
   b8262:	f7fd fe69 	bl	b5f38 <__assert_func>
   b8266:	490b      	ldr	r1, [pc, #44]	; (b8294 <srand+0x50>)
   b8268:	4b0b      	ldr	r3, [pc, #44]	; (b8298 <srand+0x54>)
   b826a:	e9c0 1300 	strd	r1, r3, [r0]
   b826e:	4b0b      	ldr	r3, [pc, #44]	; (b829c <srand+0x58>)
   b8270:	6083      	str	r3, [r0, #8]
   b8272:	230b      	movs	r3, #11
   b8274:	8183      	strh	r3, [r0, #12]
   b8276:	2100      	movs	r1, #0
   b8278:	2001      	movs	r0, #1
   b827a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b827e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8280:	2200      	movs	r2, #0
   b8282:	611c      	str	r4, [r3, #16]
   b8284:	615a      	str	r2, [r3, #20]
   b8286:	bd38      	pop	{r3, r4, r5, pc}
   b8288:	2003e5f8 	.word	0x2003e5f8
   b828c:	000b8608 	.word	0x000b8608
   b8290:	000b861f 	.word	0x000b861f
   b8294:	abcd330e 	.word	0xabcd330e
   b8298:	e66d1234 	.word	0xe66d1234
   b829c:	0005deec 	.word	0x0005deec

000b82a0 <strdup>:
   b82a0:	4b02      	ldr	r3, [pc, #8]	; (b82ac <strdup+0xc>)
   b82a2:	4601      	mov	r1, r0
   b82a4:	6818      	ldr	r0, [r3, #0]
   b82a6:	f000 b803 	b.w	b82b0 <_strdup_r>
   b82aa:	bf00      	nop
   b82ac:	2003e5f8 	.word	0x2003e5f8

000b82b0 <_strdup_r>:
   b82b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82b2:	4604      	mov	r4, r0
   b82b4:	4608      	mov	r0, r1
   b82b6:	460d      	mov	r5, r1
   b82b8:	f7fc fe36 	bl	b4f28 <strlen>
   b82bc:	1c42      	adds	r2, r0, #1
   b82be:	4611      	mov	r1, r2
   b82c0:	4620      	mov	r0, r4
   b82c2:	9201      	str	r2, [sp, #4]
   b82c4:	f7fd fe28 	bl	b5f18 <_malloc_r>
   b82c8:	4604      	mov	r4, r0
   b82ca:	b118      	cbz	r0, b82d4 <_strdup_r+0x24>
   b82cc:	9a01      	ldr	r2, [sp, #4]
   b82ce:	4629      	mov	r1, r5
   b82d0:	f7ff ffa2 	bl	b8218 <memcpy>
   b82d4:	4620      	mov	r0, r4
   b82d6:	b003      	add	sp, #12
   b82d8:	bd30      	pop	{r4, r5, pc}
	...

000b82dc <__register_exitproc>:
   b82dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b82e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b839c <__register_exitproc+0xc0>
   b82e4:	4606      	mov	r6, r0
   b82e6:	f8d8 0000 	ldr.w	r0, [r8]
   b82ea:	461f      	mov	r7, r3
   b82ec:	460d      	mov	r5, r1
   b82ee:	4691      	mov	r9, r2
   b82f0:	f000 f856 	bl	b83a0 <__retarget_lock_acquire_recursive>
   b82f4:	4b25      	ldr	r3, [pc, #148]	; (b838c <__register_exitproc+0xb0>)
   b82f6:	681c      	ldr	r4, [r3, #0]
   b82f8:	b934      	cbnz	r4, b8308 <__register_exitproc+0x2c>
   b82fa:	4c25      	ldr	r4, [pc, #148]	; (b8390 <__register_exitproc+0xb4>)
   b82fc:	601c      	str	r4, [r3, #0]
   b82fe:	4b25      	ldr	r3, [pc, #148]	; (b8394 <__register_exitproc+0xb8>)
   b8300:	b113      	cbz	r3, b8308 <__register_exitproc+0x2c>
   b8302:	681b      	ldr	r3, [r3, #0]
   b8304:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8308:	6863      	ldr	r3, [r4, #4]
   b830a:	2b1f      	cmp	r3, #31
   b830c:	dd07      	ble.n	b831e <__register_exitproc+0x42>
   b830e:	f8d8 0000 	ldr.w	r0, [r8]
   b8312:	f000 f847 	bl	b83a4 <__retarget_lock_release_recursive>
   b8316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b831e:	b34e      	cbz	r6, b8374 <__register_exitproc+0x98>
   b8320:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8324:	b988      	cbnz	r0, b834a <__register_exitproc+0x6e>
   b8326:	4b1c      	ldr	r3, [pc, #112]	; (b8398 <__register_exitproc+0xbc>)
   b8328:	b923      	cbnz	r3, b8334 <__register_exitproc+0x58>
   b832a:	f8d8 0000 	ldr.w	r0, [r8]
   b832e:	f000 f838 	bl	b83a2 <__retarget_lock_release>
   b8332:	e7f0      	b.n	b8316 <__register_exitproc+0x3a>
   b8334:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8338:	f7fd fdce 	bl	b5ed8 <malloc>
   b833c:	2800      	cmp	r0, #0
   b833e:	d0f4      	beq.n	b832a <__register_exitproc+0x4e>
   b8340:	2300      	movs	r3, #0
   b8342:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8346:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b834a:	6863      	ldr	r3, [r4, #4]
   b834c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8350:	2201      	movs	r2, #1
   b8352:	409a      	lsls	r2, r3
   b8354:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8358:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b835c:	4313      	orrs	r3, r2
   b835e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8362:	2e02      	cmp	r6, #2
   b8364:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8368:	bf02      	ittt	eq
   b836a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b836e:	4313      	orreq	r3, r2
   b8370:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8374:	6863      	ldr	r3, [r4, #4]
   b8376:	f8d8 0000 	ldr.w	r0, [r8]
   b837a:	1c5a      	adds	r2, r3, #1
   b837c:	3302      	adds	r3, #2
   b837e:	6062      	str	r2, [r4, #4]
   b8380:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8384:	f000 f80e 	bl	b83a4 <__retarget_lock_release_recursive>
   b8388:	2000      	movs	r0, #0
   b838a:	e7c6      	b.n	b831a <__register_exitproc+0x3e>
   b838c:	2003e7e8 	.word	0x2003e7e8
   b8390:	2003e75c 	.word	0x2003e75c
   b8394:	00000000 	.word	0x00000000
   b8398:	000b5ed9 	.word	0x000b5ed9
   b839c:	2003e65c 	.word	0x2003e65c

000b83a0 <__retarget_lock_acquire_recursive>:
   b83a0:	4770      	bx	lr

000b83a2 <__retarget_lock_release>:
   b83a2:	4770      	bx	lr

000b83a4 <__retarget_lock_release_recursive>:
   b83a4:	4770      	bx	lr

000b83a6 <link_code_end>:
	...

000b83a8 <dynalib_user>:
   b83a8:	4f39 000b 4f75 000b 4f9d 000b 4fa1 000b     9O..uO...O...O..
   b83b8:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
   b83c8:	0079 7270 7365 7573 6572 6100 746c 7469     y.pressure.altit
   b83d8:	6475 0065 6557 7461 6568 2072 7453 7461     ude.Weather Stat
   b83e8:	6f69 206e 6e4f 696c 656e 3a20 0029 6574     ion Online :).te
   b83f8:	7473 6e69 0067 6564 6166 6c75 2074 4d00     sting.default .M
   b8408:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   b8418:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   b8428:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   b8438:	2073 4f4d 4544 7525 003e 0000               s MODE%u>...

000b8444 <_ZTVN8particle11SPISettingsE>:
	...
   b844c:	5145 000b 5119 000b 511b 000b               EQ...Q...Q..

000b8458 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8460:	5fcd 000b 5fd3 000b 6011 000b 5fe1 000b     ._..._...`..._..
   b8470:	5fcf 000b                                   ._..

000b8474 <_ZTVN5spark13EthernetClassE>:
	...
   b847c:	655b 000b 6551 000b 6547 000b 653d 000b     [e..Qe..Ge..=e..
   b848c:	6531 000b 6525 000b 67c9 000b 67d1 000b     1e..%e...g...g..
   b849c:	6519 000b 6511 000b 6507 000b 64fd 000b     .e...e...e...d..
   b84ac:	6801 000b                                   .h..

000b84b0 <_ZTV7TwoWire>:
	...
   b84b8:	6579 000b 65c3 000b 659b 000b 657b 000b     ye...e...e..{e..
   b84c8:	65a3 000b 65ab 000b 65b3 000b 65bb 000b     .e...e...e...e..

000b84d8 <_ZTV9IPAddress>:
	...
   b84e0:	6697 000b 6687 000b 6689 000b 7061 0070     .f...f...f..app.

000b84f0 <_ZTVN5spark12NetworkClassE>:
	...
   b84f8:	6789 000b 6793 000b 679d 000b 67a7 000b     .g...g...g...g..
   b8508:	67b1 000b 67bd 000b 67c9 000b 67d1 000b     .g...g...g...g..
   b8518:	67d9 000b 67e5 000b 67ed 000b 67f7 000b     .g...g...g...g..
   b8528:	6801 000b                                   .h..

000b852c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b852c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b853c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b854c:	6d69 0065                                   ime.

000b8550 <_ZTV11USARTSerial>:
	...
   b8558:	6ba9 000b 6c15 000b 6bed 000b 68ed 000b     .k...l...k...h..
   b8568:	6bbd 000b 6bd9 000b 6bcb 000b 6be7 000b     .k...k...k...k..
   b8578:	6bab 000b 6baf 000b                         .k...k..

000b8580 <_ZTV9USBSerial>:
	...
   b8588:	6c53 000b 6cbb 000b 6c91 000b 68ed 000b     Sl...l...l...h..
   b8598:	6c83 000b 6c55 000b 6c65 000b 6cb5 000b     .l..Ul..el...l..
   b85a8:	6c75 000b 6c4d 000b                         ul..Ml..

000b85b0 <_ZTVN5spark9WiFiClassE>:
	...
   b85b8:	6dab 000b 6da1 000b 6d97 000b 6d4d 000b     .m...m...m..Mm..
   b85c8:	6d8b 000b 6d7f 000b 67c9 000b 67d1 000b     .m...m...g...g..
   b85d8:	6d73 000b 6d6b 000b 6d61 000b 6d57 000b     sm..km..am..Wm..
   b85e8:	6801 000b                                   .h..

000b85ec <_ZSt7nothrow>:
	...

000b85f8 <TWO52>:
   b85f8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b8608:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b8618:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b8628:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b8638:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b8648:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b8658:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b8668:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b8678 <link_const_data_end>:
   b8678:	000b5105 	.word	0x000b5105
   b867c:	000b5fbd 	.word	0x000b5fbd
   b8680:	000b6565 	.word	0x000b6565
   b8684:	000b6779 	.word	0x000b6779
   b8688:	000b68d9 	.word	0x000b68d9
   b868c:	000b6a01 	.word	0x000b6a01
   b8690:	000b6b71 	.word	0x000b6b71
   b8694:	000b6b95 	.word	0x000b6b95
   b8698:	000b6db5 	.word	0x000b6db5
